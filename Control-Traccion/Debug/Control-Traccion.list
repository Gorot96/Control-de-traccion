
Control-Traccion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08008878  08008878  00018878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008908  08008908  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008908  08008908  00018908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008910  08008910  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008910  08008910  00018910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008914  08008914  00018914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002138  20000010  08008928  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002148  08008928  00022148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028fd9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e79  00000000  00000000  00049019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022a8  00000000  00000000  0004de98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020d0  00000000  00000000  00050140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005bf5  00000000  00000000  00052210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026a9f  00000000  00000000  00057e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112ba6  00000000  00000000  0007e8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019144a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009594  00000000  00000000  0019149c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008860 	.word	0x08008860

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008860 	.word	0x08008860

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 ffd3 	bl	8001482 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f828 	bl	8000530 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e0:	f000 f888 	bl	80005f4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 faa4 	bl	8000a30 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004e8:	f000 f928 	bl	800073c <MX_DFSDM1_Init>
  MX_QUADSPI_Init();
 80004ec:	f000 f9de 	bl	80008ac <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004f0:	f000 fa02 	bl	80008f8 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 80004f4:	f000 fa3e 	bl	8000974 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004f8:	f000 fa6c 	bl	80009d4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80004fc:	f000 f956 	bl	80007ac <MX_I2C1_Init>
  MX_I2C2_Init();
 8000500:	f000 f994 	bl	800082c <MX_I2C2_Init>
  MX_ADC1_Init();
 8000504:	f000 f8a4 	bl	8000650 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000508:	f005 fc22 	bl	8005d50 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800050c:	4a05      	ldr	r2, [pc, #20]	; (8000524 <main+0x50>)
 800050e:	2100      	movs	r1, #0
 8000510:	4805      	ldr	r0, [pc, #20]	; (8000528 <main+0x54>)
 8000512:	f005 fc67 	bl	8005de4 <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <main+0x58>)
 800051a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800051c:	f005 fc3c 	bl	8005d98 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	e7fe      	b.n	8000520 <main+0x4c>
 8000522:	bf00      	nop
 8000524:	0800889c 	.word	0x0800889c
 8000528:	08000d65 	.word	0x08000d65
 800052c:	200007a8 	.word	0x200007a8

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b096      	sub	sp, #88	; 0x58
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2244      	movs	r2, #68	; 0x44
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f008 f986 	bl	8008850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000552:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000556:	f002 fe9b 	bl	8003290 <HAL_PWREx_ControlVoltageScaling>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000560:	f000 fc08 	bl	8000d74 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000564:	f002 fe76 	bl	8003254 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000568:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <SystemClock_Config+0xc0>)
 800056a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800056e:	4a20      	ldr	r2, [pc, #128]	; (80005f0 <SystemClock_Config+0xc0>)
 8000570:	f023 0318 	bic.w	r3, r3, #24
 8000574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000578:	2314      	movs	r3, #20
 800057a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000588:	2360      	movs	r3, #96	; 0x60
 800058a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	2302      	movs	r3, #2
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000590:	2301      	movs	r3, #1
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000594:	2301      	movs	r3, #1
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000598:	2328      	movs	r3, #40	; 0x28
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800059c:	2307      	movs	r3, #7
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 ff91 	bl	80034d4 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005b8:	f000 fbdc 	bl	8000d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2303      	movs	r3, #3
 80005c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	2104      	movs	r1, #4
 80005d4:	4618      	mov	r0, r3
 80005d6:	f003 fb59 	bl	8003c8c <HAL_RCC_ClockConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005e0:	f000 fbc8 	bl	8000d74 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005e4:	f004 f860 	bl	80046a8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005e8:	bf00      	nop
 80005ea:	3758      	adds	r7, #88	; 0x58
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40021000 	.word	0x40021000

080005f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b0a2      	sub	sp, #136	; 0x88
 80005f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005fa:	463b      	mov	r3, r7
 80005fc:	2288      	movs	r2, #136	; 0x88
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f008 f925 	bl	8008850 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000606:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800060a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800060c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000610:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000612:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000616:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000618:	2301      	movs	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800061c:	2301      	movs	r3, #1
 800061e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000620:	2318      	movs	r3, #24
 8000622:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000624:	2307      	movs	r3, #7
 8000626:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000630:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000634:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000636:	463b      	mov	r3, r7
 8000638:	4618      	mov	r0, r3
 800063a:	f003 fd4b 	bl	80040d4 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8000644:	f000 fb96 	bl	8000d74 <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	3788      	adds	r7, #136	; 0x88
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
 8000670:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000672:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <MX_ADC1_Init+0xe0>)
 8000674:	4a2f      	ldr	r2, [pc, #188]	; (8000734 <MX_ADC1_Init+0xe4>)
 8000676:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000678:	4b2d      	ldr	r3, [pc, #180]	; (8000730 <MX_ADC1_Init+0xe0>)
 800067a:	2200      	movs	r2, #0
 800067c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800067e:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <MX_ADC1_Init+0xe0>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000684:	4b2a      	ldr	r3, [pc, #168]	; (8000730 <MX_ADC1_Init+0xe0>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <MX_ADC1_Init+0xe0>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <MX_ADC1_Init+0xe0>)
 8000692:	2204      	movs	r2, #4
 8000694:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000696:	4b26      	ldr	r3, [pc, #152]	; (8000730 <MX_ADC1_Init+0xe0>)
 8000698:	2200      	movs	r2, #0
 800069a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800069c:	4b24      	ldr	r3, [pc, #144]	; (8000730 <MX_ADC1_Init+0xe0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006a2:	4b23      	ldr	r3, [pc, #140]	; (8000730 <MX_ADC1_Init+0xe0>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a8:	4b21      	ldr	r3, [pc, #132]	; (8000730 <MX_ADC1_Init+0xe0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <MX_ADC1_Init+0xe0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b6:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <MX_ADC1_Init+0xe0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_ADC1_Init+0xe0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006c4:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_ADC1_Init+0xe0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <MX_ADC1_Init+0xe0>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d2:	4817      	ldr	r0, [pc, #92]	; (8000730 <MX_ADC1_Init+0xe0>)
 80006d4:	f001 f8fa 	bl	80018cc <HAL_ADC_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006de:	f000 fb49 	bl	8000d74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	4810      	ldr	r0, [pc, #64]	; (8000730 <MX_ADC1_Init+0xe0>)
 80006ee:	f001 fe59 	bl	80023a4 <HAL_ADCEx_MultiModeConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006f8:	f000 fb3c 	bl	8000d74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_ADC1_Init+0xe8>)
 80006fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000700:	2306      	movs	r3, #6
 8000702:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000708:	237f      	movs	r3, #127	; 0x7f
 800070a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800070c:	2304      	movs	r3, #4
 800070e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_ADC1_Init+0xe0>)
 800071a:	f001 fa2d 	bl	8001b78 <HAL_ADC_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000724:	f000 fb26 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	; 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	2000002c 	.word	0x2000002c
 8000734:	50040000 	.word	0x50040000
 8000738:	3ac04000 	.word	0x3ac04000

0800073c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_DFSDM1_Init+0x68>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <MX_DFSDM1_Init+0x6c>)
 8000744:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_DFSDM1_Init+0x68>)
 8000748:	2201      	movs	r2, #1
 800074a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_DFSDM1_Init+0x68>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_DFSDM1_Init+0x68>)
 8000754:	2202      	movs	r2, #2
 8000756:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_DFSDM1_Init+0x68>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_DFSDM1_Init+0x68>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_DFSDM1_Init+0x68>)
 8000766:	f44f 7280 	mov.w	r2, #256	; 0x100
 800076a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <MX_DFSDM1_Init+0x68>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_DFSDM1_Init+0x68>)
 8000774:	2204      	movs	r2, #4
 8000776:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_DFSDM1_Init+0x68>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_DFSDM1_Init+0x68>)
 8000780:	2201      	movs	r2, #1
 8000782:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_DFSDM1_Init+0x68>)
 8000786:	2200      	movs	r2, #0
 8000788:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_DFSDM1_Init+0x68>)
 800078c:	2200      	movs	r2, #0
 800078e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_DFSDM1_Init+0x68>)
 8000792:	f001 ffc9 	bl	8002728 <HAL_DFSDM_ChannelInit>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800079c:	f000 faea 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000090 	.word	0x20000090
 80007a8:	40016020 	.word	0x40016020

080007ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <MX_I2C1_Init+0x74>)
 80007b2:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <MX_I2C1_Init+0x78>)
 80007b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_I2C1_Init+0x74>)
 80007b8:	4a1b      	ldr	r2, [pc, #108]	; (8000828 <MX_I2C1_Init+0x7c>)
 80007ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007bc:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_I2C1_Init+0x74>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_I2C1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_I2C1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e6:	480e      	ldr	r0, [pc, #56]	; (8000820 <MX_I2C1_Init+0x74>)
 80007e8:	f002 fac6 	bl	8002d78 <HAL_I2C_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007f2:	f000 fabf 	bl	8000d74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f6:	2100      	movs	r1, #0
 80007f8:	4809      	ldr	r0, [pc, #36]	; (8000820 <MX_I2C1_Init+0x74>)
 80007fa:	f002 fb4c 	bl	8002e96 <HAL_I2CEx_ConfigAnalogFilter>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000804:	f000 fab6 	bl	8000d74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000808:	2100      	movs	r1, #0
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_I2C1_Init+0x74>)
 800080c:	f002 fb8e 	bl	8002f2c <HAL_I2CEx_ConfigDigitalFilter>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 faad 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000c8 	.word	0x200000c8
 8000824:	40005400 	.word	0x40005400
 8000828:	10909cec 	.word	0x10909cec

0800082c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000830:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000832:	4a1c      	ldr	r2, [pc, #112]	; (80008a4 <MX_I2C2_Init+0x78>)
 8000834:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000838:	4a1b      	ldr	r2, [pc, #108]	; (80008a8 <MX_I2C2_Init+0x7c>)
 800083a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_I2C2_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000844:	2201      	movs	r2, #1
 8000846:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_I2C2_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_I2C2_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000866:	480e      	ldr	r0, [pc, #56]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000868:	f002 fa86 	bl	8002d78 <HAL_I2C_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000872:	f000 fa7f 	bl	8000d74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000876:	2100      	movs	r1, #0
 8000878:	4809      	ldr	r0, [pc, #36]	; (80008a0 <MX_I2C2_Init+0x74>)
 800087a:	f002 fb0c 	bl	8002e96 <HAL_I2CEx_ConfigAnalogFilter>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000884:	f000 fa76 	bl	8000d74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000888:	2100      	movs	r1, #0
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_I2C2_Init+0x74>)
 800088c:	f002 fb4e 	bl	8002f2c <HAL_I2CEx_ConfigDigitalFilter>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000896:	f000 fa6d 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000011c 	.word	0x2000011c
 80008a4:	40005800 	.word	0x40005800
 80008a8:	10909cec 	.word	0x10909cec

080008ac <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_QUADSPI_Init+0x44>)
 80008b2:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <MX_QUADSPI_Init+0x48>)
 80008b4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_QUADSPI_Init+0x44>)
 80008b8:	2202      	movs	r2, #2
 80008ba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_QUADSPI_Init+0x44>)
 80008be:	2204      	movs	r2, #4
 80008c0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_QUADSPI_Init+0x44>)
 80008c4:	2210      	movs	r2, #16
 80008c6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_QUADSPI_Init+0x44>)
 80008ca:	2217      	movs	r2, #23
 80008cc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_QUADSPI_Init+0x44>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_QUADSPI_Init+0x44>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_QUADSPI_Init+0x44>)
 80008dc:	f002 fd3e 	bl	800335c <HAL_QSPI_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80008e6:	f000 fa45 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000170 	.word	0x20000170
 80008f4:	a0001000 	.word	0xa0001000

080008f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_SPI3_Init+0x74>)
 80008fe:	4a1c      	ldr	r2, [pc, #112]	; (8000970 <MX_SPI3_Init+0x78>)
 8000900:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_SPI3_Init+0x74>)
 8000904:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000908:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_SPI3_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_SPI3_Init+0x74>)
 8000912:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000916:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_SPI3_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_SPI3_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_SPI3_Init+0x74>)
 8000926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800092a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_SPI3_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_SPI3_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_SPI3_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_SPI3_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_SPI3_Init+0x74>)
 8000946:	2207      	movs	r2, #7
 8000948:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_SPI3_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_SPI3_Init+0x74>)
 8000952:	2208      	movs	r2, #8
 8000954:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_SPI3_Init+0x74>)
 8000958:	f004 f888 	bl	8004a6c <HAL_SPI_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000962:	f000 fa07 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200001b4 	.word	0x200001b4
 8000970:	40003c00 	.word	0x40003c00

08000974 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_USART3_UART_Init+0x58>)
 800097a:	4a15      	ldr	r2, [pc, #84]	; (80009d0 <MX_USART3_UART_Init+0x5c>)
 800097c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_USART3_UART_Init+0x58>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART3_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_USART3_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART3_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART3_UART_Init+0x58>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART3_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART3_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART3_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART3_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART3_UART_Init+0x58>)
 80009b8:	f004 fa1b 	bl	8004df2 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009c2:	f000 f9d7 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000218 	.word	0x20000218
 80009d0:	40004800 	.word	0x40004800

080009d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e2:	2206      	movs	r2, #6
 80009e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e8:	2202      	movs	r2, #2
 80009ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ee:	2202      	movs	r2, #2
 80009f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a18:	f002 fad4 	bl	8002fc4 <HAL_PCD_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a22:	f000 f9a7 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000029c 	.word	0x2000029c

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a46:	4bbd      	ldr	r3, [pc, #756]	; (8000d3c <MX_GPIO_Init+0x30c>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4abc      	ldr	r2, [pc, #752]	; (8000d3c <MX_GPIO_Init+0x30c>)
 8000a4c:	f043 0310 	orr.w	r3, r3, #16
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4bba      	ldr	r3, [pc, #744]	; (8000d3c <MX_GPIO_Init+0x30c>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0310 	and.w	r3, r3, #16
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	4bb7      	ldr	r3, [pc, #732]	; (8000d3c <MX_GPIO_Init+0x30c>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4ab6      	ldr	r2, [pc, #728]	; (8000d3c <MX_GPIO_Init+0x30c>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4bb4      	ldr	r3, [pc, #720]	; (8000d3c <MX_GPIO_Init+0x30c>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4bb1      	ldr	r3, [pc, #708]	; (8000d3c <MX_GPIO_Init+0x30c>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4ab0      	ldr	r2, [pc, #704]	; (8000d3c <MX_GPIO_Init+0x30c>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4bae      	ldr	r3, [pc, #696]	; (8000d3c <MX_GPIO_Init+0x30c>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	4bab      	ldr	r3, [pc, #684]	; (8000d3c <MX_GPIO_Init+0x30c>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4aaa      	ldr	r2, [pc, #680]	; (8000d3c <MX_GPIO_Init+0x30c>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4ba8      	ldr	r3, [pc, #672]	; (8000d3c <MX_GPIO_Init+0x30c>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa6:	4ba5      	ldr	r3, [pc, #660]	; (8000d3c <MX_GPIO_Init+0x30c>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4aa4      	ldr	r2, [pc, #656]	; (8000d3c <MX_GPIO_Init+0x30c>)
 8000aac:	f043 0308 	orr.w	r3, r3, #8
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4ba2      	ldr	r3, [pc, #648]	; (8000d3c <MX_GPIO_Init+0x30c>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0308 	and.w	r3, r3, #8
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000ac4:	489e      	ldr	r0, [pc, #632]	; (8000d40 <MX_GPIO_Init+0x310>)
 8000ac6:	f002 f927 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f249 0114 	movw	r1, #36884	; 0x9014
 8000ad0:	489c      	ldr	r0, [pc, #624]	; (8000d44 <MX_GPIO_Init+0x314>)
 8000ad2:	f002 f921 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f241 0181 	movw	r1, #4225	; 0x1081
 8000adc:	489a      	ldr	r0, [pc, #616]	; (8000d48 <MX_GPIO_Init+0x318>)
 8000ade:	f002 f91b 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae8:	4897      	ldr	r0, [pc, #604]	; (8000d48 <MX_GPIO_Init+0x318>)
 8000aea:	f002 f915 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000af4:	4895      	ldr	r0, [pc, #596]	; (8000d4c <MX_GPIO_Init+0x31c>)
 8000af6:	f002 f90f 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_RST_GPIO_Port, SPBTLE_RF_RST_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b04:	f002 f908 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2120      	movs	r1, #32
 8000b0c:	488d      	ldr	r0, [pc, #564]	; (8000d44 <MX_GPIO_Init+0x314>)
 8000b0e:	f002 f903 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	2101      	movs	r1, #1
 8000b16:	488a      	ldr	r0, [pc, #552]	; (8000d40 <MX_GPIO_Init+0x310>)
 8000b18:	f002 f8fe 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000b1c:	f240 1315 	movw	r3, #277	; 0x115
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4882      	ldr	r0, [pc, #520]	; (8000d40 <MX_GPIO_Init+0x310>)
 8000b36:	f001 ff45 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000b3a:	236a      	movs	r3, #106	; 0x6a
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	487c      	ldr	r0, [pc, #496]	; (8000d40 <MX_GPIO_Init+0x310>)
 8000b50:	f001 ff38 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b5a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4878      	ldr	r0, [pc, #480]	; (8000d4c <MX_GPIO_Init+0x31c>)
 8000b6c:	f001 ff2a 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000b70:	2303      	movs	r3, #3
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b80:	2308      	movs	r3, #8
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8e:	f001 ff19 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 ARD_D4_Pin PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|ARD_D4_Pin|GPIO_PIN_15;
 8000b92:	f248 030c 	movw	r3, #32780	; 0x800c
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb2:	f001 ff07 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000bb6:	23e0      	movs	r3, #224	; 0xe0
 8000bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bc6:	2305      	movs	r3, #5
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd4:	f001 fef6 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bdc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4855      	ldr	r0, [pc, #340]	; (8000d44 <MX_GPIO_Init+0x314>)
 8000bee:	f001 fee9 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c02:	2302      	movs	r3, #2
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	484d      	ldr	r0, [pc, #308]	; (8000d44 <MX_GPIO_Init+0x314>)
 8000c0e:	f001 fed9 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin SPSGRF_915_SDN_Pin ARD_D5_Pin
                           SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|SPSGRF_915_SDN_Pin|ARD_D5_Pin
 8000c12:	f249 0334 	movw	r3, #36916	; 0x9034
 8000c16:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4846      	ldr	r0, [pc, #280]	; (8000d44 <MX_GPIO_Init+0x314>)
 8000c2c:	f001 feca 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000c30:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000c34:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4840      	ldr	r0, [pc, #256]	; (8000d48 <MX_GPIO_Init+0x318>)
 8000c48:	f001 febc 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c4c:	f243 0381 	movw	r3, #12417	; 0x3081
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4838      	ldr	r0, [pc, #224]	; (8000d48 <MX_GPIO_Init+0x318>)
 8000c66:	f001 fead 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c6a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	4832      	ldr	r0, [pc, #200]	; (8000d4c <MX_GPIO_Init+0x31c>)
 8000c84:	f001 fe9e 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c88:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	482b      	ldr	r0, [pc, #172]	; (8000d4c <MX_GPIO_Init+0x31c>)
 8000ca0:	f001 fe90 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPBTLE_RF_RST_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_RST_Pin;
 8000ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPBTLE_RF_RST_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc0:	f001 fe80 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	481a      	ldr	r0, [pc, #104]	; (8000d48 <MX_GPIO_Init+0x318>)
 8000ce0:	f001 fe70 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000ce4:	2378      	movs	r3, #120	; 0x78
 8000ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4812      	ldr	r0, [pc, #72]	; (8000d48 <MX_GPIO_Init+0x318>)
 8000d00:	f001 fe60 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d04:	23c0      	movs	r3, #192	; 0xc0
 8000d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d14:	2307      	movs	r3, #7
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4809      	ldr	r0, [pc, #36]	; (8000d44 <MX_GPIO_Init+0x314>)
 8000d20:	f001 fe50 	bl	80029c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2105      	movs	r1, #5
 8000d28:	2017      	movs	r0, #23
 8000d2a:	f001 fcc6 	bl	80026ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d2e:	2017      	movs	r0, #23
 8000d30:	f001 fcdf 	bl	80026f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2105      	movs	r1, #5
 8000d38:	2028      	movs	r0, #40	; 0x28
 8000d3a:	e009      	b.n	8000d50 <MX_GPIO_Init+0x320>
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	48001000 	.word	0x48001000
 8000d44:	48000400 	.word	0x48000400
 8000d48:	48000c00 	.word	0x48000c00
 8000d4c:	48000800 	.word	0x48000800
 8000d50:	f001 fcb3 	bl	80026ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d54:	2028      	movs	r0, #40	; 0x28
 8000d56:	f001 fccc 	bl	80026f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d5a:	bf00      	nop
 8000d5c:	3728      	adds	r7, #40	; 0x28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop

08000d64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f005 f8cb 	bl	8005f08 <osDelay>
 8000d72:	e7fb      	b.n	8000d6c <StartDefaultTask+0x8>

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <Error_Handler+0x8>
	...

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6613      	str	r3, [r2, #96]	; 0x60
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_MspInit+0x4c>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <HAL_MspInit+0x4c>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	6593      	str	r3, [r2, #88]	; 0x58
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_MspInit+0x4c>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	210f      	movs	r1, #15
 8000dba:	f06f 0001 	mvn.w	r0, #1
 8000dbe:	f001 fc7c 	bl	80026ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a21      	ldr	r2, [pc, #132]	; (8000e74 <HAL_ADC_MspInit+0xa4>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d13c      	bne.n	8000e6c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000df2:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <HAL_ADC_MspInit+0xa8>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	4a20      	ldr	r2, [pc, #128]	; (8000e78 <HAL_ADC_MspInit+0xa8>)
 8000df8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <HAL_ADC_MspInit+0xa8>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <HAL_ADC_MspInit+0xa8>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	4a1a      	ldr	r2, [pc, #104]	; (8000e78 <HAL_ADC_MspInit+0xa8>)
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e16:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <HAL_ADC_MspInit+0xa8>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_ADC_MspInit+0xa8>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <HAL_ADC_MspInit+0xa8>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_ADC_MspInit+0xa8>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN4
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000e3a:	233f      	movs	r3, #63	; 0x3f
 8000e3c:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e3e:	230b      	movs	r3, #11
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480b      	ldr	r0, [pc, #44]	; (8000e7c <HAL_ADC_MspInit+0xac>)
 8000e4e:	f001 fdb9 	bl	80029c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000e52:	2310      	movs	r3, #16
 8000e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e56:	230b      	movs	r3, #11
 8000e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e68:	f001 fdac 	bl	80029c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e6c:	bf00      	nop
 8000e6e:	3728      	adds	r7, #40	; 0x28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	50040000 	.word	0x50040000
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	48000800 	.word	0x48000800

08000e80 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b0ac      	sub	sp, #176	; 0xb0
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2288      	movs	r2, #136	; 0x88
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f007 fcd5 	bl	8008850 <memset>
  if(DFSDM1_Init == 0)
 8000ea6:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d142      	bne.n	8000f34 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000eae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eb2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f003 f908 	bl	80040d4 <HAL_RCCEx_PeriphCLKConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000eca:	f7ff ff53 	bl	8000d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000ece:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed2:	4a1b      	ldr	r2, [pc, #108]	; (8000f40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ed4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ed8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ede:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a15      	ldr	r2, [pc, #84]	; (8000f40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000eec:	f043 0310 	orr.w	r3, r3, #16
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0310 	and.w	r3, r3, #16
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000efe:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000f02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f18:	2306      	movs	r3, #6
 8000f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f22:	4619      	mov	r1, r3
 8000f24:	4807      	ldr	r0, [pc, #28]	; (8000f44 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000f26:	f001 fd4d 	bl	80029c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000f2a:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	4a02      	ldr	r2, [pc, #8]	; (8000f3c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f32:	6013      	str	r3, [r2, #0]
  }

}
 8000f34:	bf00      	nop
 8000f36:	37b0      	adds	r7, #176	; 0xb0
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200007ac 	.word	0x200007ac
 8000f40:	40021000 	.word	0x40021000
 8000f44:	48001000 	.word	0x48001000

08000f48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0ae      	sub	sp, #184	; 0xb8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	2288      	movs	r2, #136	; 0x88
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f007 fc71 	bl	8008850 <memset>
  if(hi2c->Instance==I2C1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a42      	ldr	r2, [pc, #264]	; (800107c <HAL_I2C_MspInit+0x134>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d13c      	bne.n	8000ff2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f78:	2340      	movs	r3, #64	; 0x40
 8000f7a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4618      	mov	r0, r3
 8000f86:	f003 f8a5 	bl	80040d4 <HAL_RCCEx_PeriphCLKConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f90:	f7ff fef0 	bl	8000d74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f94:	4b3a      	ldr	r3, [pc, #232]	; (8001080 <HAL_I2C_MspInit+0x138>)
 8000f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f98:	4a39      	ldr	r2, [pc, #228]	; (8001080 <HAL_I2C_MspInit+0x138>)
 8000f9a:	f043 0302 	orr.w	r3, r3, #2
 8000f9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa0:	4b37      	ldr	r3, [pc, #220]	; (8001080 <HAL_I2C_MspInit+0x138>)
 8000fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	61bb      	str	r3, [r7, #24]
 8000faa:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb4:	2312      	movs	r3, #18
 8000fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	482c      	ldr	r0, [pc, #176]	; (8001084 <HAL_I2C_MspInit+0x13c>)
 8000fd4:	f001 fcf6 	bl	80029c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd8:	4b29      	ldr	r3, [pc, #164]	; (8001080 <HAL_I2C_MspInit+0x138>)
 8000fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fdc:	4a28      	ldr	r2, [pc, #160]	; (8001080 <HAL_I2C_MspInit+0x138>)
 8000fde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8000fe4:	4b26      	ldr	r3, [pc, #152]	; (8001080 <HAL_I2C_MspInit+0x138>)
 8000fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ff0:	e040      	b.n	8001074 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a24      	ldr	r2, [pc, #144]	; (8001088 <HAL_I2C_MspInit+0x140>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d13b      	bne.n	8001074 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001000:	2300      	movs	r3, #0
 8001002:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4618      	mov	r0, r3
 800100a:	f003 f863 	bl	80040d4 <HAL_RCCEx_PeriphCLKConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001014:	f7ff feae 	bl	8000d74 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <HAL_I2C_MspInit+0x138>)
 800101a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101c:	4a18      	ldr	r2, [pc, #96]	; (8001080 <HAL_I2C_MspInit+0x138>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <HAL_I2C_MspInit+0x138>)
 8001026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001030:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001034:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001038:	2312      	movs	r3, #18
 800103a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800104a:	2304      	movs	r3, #4
 800104c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001054:	4619      	mov	r1, r3
 8001056:	480b      	ldr	r0, [pc, #44]	; (8001084 <HAL_I2C_MspInit+0x13c>)
 8001058:	f001 fcb4 	bl	80029c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_I2C_MspInit+0x138>)
 800105e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001060:	4a07      	ldr	r2, [pc, #28]	; (8001080 <HAL_I2C_MspInit+0x138>)
 8001062:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001066:	6593      	str	r3, [r2, #88]	; 0x58
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_I2C_MspInit+0x138>)
 800106a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
}
 8001074:	bf00      	nop
 8001076:	37b8      	adds	r7, #184	; 0xb8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40005400 	.word	0x40005400
 8001080:	40021000 	.word	0x40021000
 8001084:	48000400 	.word	0x48000400
 8001088:	40005800 	.word	0x40005800

0800108c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a17      	ldr	r2, [pc, #92]	; (8001108 <HAL_QSPI_MspInit+0x7c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d128      	bne.n	8001100 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_QSPI_MspInit+0x80>)
 80010b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010b2:	4a16      	ldr	r2, [pc, #88]	; (800110c <HAL_QSPI_MspInit+0x80>)
 80010b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b8:	6513      	str	r3, [r2, #80]	; 0x50
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <HAL_QSPI_MspInit+0x80>)
 80010bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <HAL_QSPI_MspInit+0x80>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	4a10      	ldr	r2, [pc, #64]	; (800110c <HAL_QSPI_MspInit+0x80>)
 80010cc:	f043 0310 	orr.w	r3, r3, #16
 80010d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_QSPI_MspInit+0x80>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	f003 0310 	and.w	r3, r3, #16
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80010de:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80010e2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010f0:	230a      	movs	r3, #10
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <HAL_QSPI_MspInit+0x84>)
 80010fc:	f001 fc62 	bl	80029c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001100:	bf00      	nop
 8001102:	3728      	adds	r7, #40	; 0x28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	a0001000 	.word	0xa0001000
 800110c:	40021000 	.word	0x40021000
 8001110:	48001000 	.word	0x48001000

08001114 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a17      	ldr	r2, [pc, #92]	; (8001190 <HAL_SPI_MspInit+0x7c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d128      	bne.n	8001188 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <HAL_SPI_MspInit+0x80>)
 8001138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113a:	4a16      	ldr	r2, [pc, #88]	; (8001194 <HAL_SPI_MspInit+0x80>)
 800113c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001140:	6593      	str	r3, [r2, #88]	; 0x58
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <HAL_SPI_MspInit+0x80>)
 8001144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_SPI_MspInit+0x80>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	4a10      	ldr	r2, [pc, #64]	; (8001194 <HAL_SPI_MspInit+0x80>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_SPI_MspInit+0x80>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001166:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800116a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001178:	2306      	movs	r3, #6
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <HAL_SPI_MspInit+0x84>)
 8001184:	f001 fc1e 	bl	80029c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	; 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40003c00 	.word	0x40003c00
 8001194:	40021000 	.word	0x40021000
 8001198:	48000800 	.word	0x48000800

0800119c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b0ac      	sub	sp, #176	; 0xb0
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2288      	movs	r2, #136	; 0x88
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f007 fb47 	bl	8008850 <memset>
  if(huart->Instance==USART3)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a21      	ldr	r2, [pc, #132]	; (800124c <HAL_UART_MspInit+0xb0>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d13b      	bne.n	8001244 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011cc:	2304      	movs	r3, #4
 80011ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4618      	mov	r0, r3
 80011da:	f002 ff7b 	bl	80040d4 <HAL_RCCEx_PeriphCLKConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011e4:	f7ff fdc6 	bl	8000d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <HAL_UART_MspInit+0xb4>)
 80011ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ec:	4a18      	ldr	r2, [pc, #96]	; (8001250 <HAL_UART_MspInit+0xb4>)
 80011ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f2:	6593      	str	r3, [r2, #88]	; 0x58
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <HAL_UART_MspInit+0xb4>)
 80011f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <HAL_UART_MspInit+0xb4>)
 8001202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001204:	4a12      	ldr	r2, [pc, #72]	; (8001250 <HAL_UART_MspInit+0xb4>)
 8001206:	f043 0308 	orr.w	r3, r3, #8
 800120a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_UART_MspInit+0xb4>)
 800120e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001218:	f44f 7340 	mov.w	r3, #768	; 0x300
 800121c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001232:	2307      	movs	r3, #7
 8001234:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001238:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800123c:	4619      	mov	r1, r3
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <HAL_UART_MspInit+0xb8>)
 8001240:	f001 fbc0 	bl	80029c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001244:	bf00      	nop
 8001246:	37b0      	adds	r7, #176	; 0xb0
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40004800 	.word	0x40004800
 8001250:	40021000 	.word	0x40021000
 8001254:	48000c00 	.word	0x48000c00

08001258 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001278:	d154      	bne.n	8001324 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	4b2c      	ldr	r3, [pc, #176]	; (800132c <HAL_PCD_MspInit+0xd4>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	4a2b      	ldr	r2, [pc, #172]	; (800132c <HAL_PCD_MspInit+0xd4>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001286:	4b29      	ldr	r3, [pc, #164]	; (800132c <HAL_PCD_MspInit+0xd4>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012aa:	f001 fb8b 	bl	80029c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80012ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012c0:	230a      	movs	r3, #10
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ce:	f001 fb79 	bl	80029c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <HAL_PCD_MspInit+0xd4>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	4a15      	ldr	r2, [pc, #84]	; (800132c <HAL_PCD_MspInit+0xd4>)
 80012d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <HAL_PCD_MspInit+0xd4>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_PCD_MspInit+0xd4>)
 80012ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d114      	bne.n	8001320 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <HAL_PCD_MspInit+0xd4>)
 80012f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fa:	4a0c      	ldr	r2, [pc, #48]	; (800132c <HAL_PCD_MspInit+0xd4>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	6593      	str	r3, [r2, #88]	; 0x58
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_PCD_MspInit+0xd4>)
 8001304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800130e:	f002 f815 	bl	800333c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_PCD_MspInit+0xd4>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <HAL_PCD_MspInit+0xd4>)
 8001318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800131c:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800131e:	e001      	b.n	8001324 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001320:	f002 f80c 	bl	800333c <HAL_PWREx_EnableVddUSB>
}
 8001324:	bf00      	nop
 8001326:	3728      	adds	r7, #40	; 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40021000 	.word	0x40021000

08001330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <NMI_Handler+0x4>

08001336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133a:	e7fe      	b.n	800133a <HardFault_Handler+0x4>

0800133c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <MemManage_Handler+0x4>

08001342 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001346:	e7fe      	b.n	8001346 <BusFault_Handler+0x4>

08001348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800134c:	e7fe      	b.n	800134c <UsageFault_Handler+0x4>

0800134e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001360:	f000 f8e4 	bl	800152c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001364:	f006 f9de 	bl	8007724 <xTaskGetSchedulerState>
 8001368:	4603      	mov	r3, r0
 800136a:	2b01      	cmp	r3, #1
 800136c:	d001      	beq.n	8001372 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800136e:	f006 ffc3 	bl	80082f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}

08001376 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800137a:	2020      	movs	r0, #32
 800137c:	f001 fce4 	bl	8002d48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001380:	2040      	movs	r0, #64	; 0x40
 8001382:	f001 fce1 	bl	8002d48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001386:	2080      	movs	r0, #128	; 0x80
 8001388:	f001 fcde 	bl	8002d48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800138c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001390:	f001 fcda 	bl	8002d48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800139c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013a0:	f001 fcd2 	bl	8002d48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80013a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013a8:	f001 fcce 	bl	8002d48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80013ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013b0:	f001 fcca 	bl	8002d48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80013b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013b8:	f001 fcc6 	bl	8002d48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80013bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013c0:	f001 fcc2 	bl	8002d48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <SystemInit+0x20>)
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <SystemInit+0x20>)
 80013d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80013f0:	2002      	movs	r0, #2
 80013f2:	f001 fca9 	bl	8002d48 <HAL_GPIO_EXTI_IRQHandler>
 portYIELD_FROM_ISR(pdFALSE);
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d102      	bne.n	8001410 <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 800140a:	f004 fc5d 	bl	8005cc8 <SPI_WIFI_ISR>
      break;
 800140e:	e000      	b.n	8001412 <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 8001410:	bf00      	nop
    }
  }
  portYIELD_FROM_ISR(pdFALSE);
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <SPI3_IRQHandler>:
  * @param  None
  * @retval None
  */
extern  SPI_HandleTypeDef hspi;
void SPI3_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <SPI3_IRQHandler+0x10>)
 8001422:	f003 fbc7 	bl	8004bb4 <HAL_SPI_IRQHandler>
  portYIELD_FROM_ISR(pdFALSE);
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200007d8 	.word	0x200007d8

08001430 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001468 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001434:	f7ff ffc8 	bl	80013c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001438:	480c      	ldr	r0, [pc, #48]	; (800146c <LoopForever+0x6>)
  ldr r1, =_edata
 800143a:	490d      	ldr	r1, [pc, #52]	; (8001470 <LoopForever+0xa>)
  ldr r2, =_sidata
 800143c:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <LoopForever+0xe>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001450:	4c0a      	ldr	r4, [pc, #40]	; (800147c <LoopForever+0x16>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145e:	f007 f9c5 	bl	80087ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001462:	f7ff f837 	bl	80004d4 <main>

08001466 <LoopForever>:

LoopForever:
    b LoopForever
 8001466:	e7fe      	b.n	8001466 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001468:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001470:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001474:	08008918 	.word	0x08008918
  ldr r2, =_sbss
 8001478:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800147c:	20002148 	.word	0x20002148

08001480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC1_2_IRQHandler>

08001482 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f001 f909 	bl	80026a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001492:	200f      	movs	r0, #15
 8001494:	f000 f80e 	bl	80014b4 <HAL_InitTick>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d002      	beq.n	80014a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	71fb      	strb	r3, [r7, #7]
 80014a2:	e001      	b.n	80014a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014a4:	f7ff fc6c 	bl	8000d80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014a8:	79fb      	ldrb	r3, [r7, #7]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <HAL_InitTick+0x6c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d023      	beq.n	8001510 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014c8:	4b16      	ldr	r3, [pc, #88]	; (8001524 <HAL_InitTick+0x70>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <HAL_InitTick+0x6c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 f915 	bl	800270e <HAL_SYSTICK_Config>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10f      	bne.n	800150a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b0f      	cmp	r3, #15
 80014ee:	d809      	bhi.n	8001504 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f0:	2200      	movs	r2, #0
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	f001 f8df 	bl	80026ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014fc:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <HAL_InitTick+0x74>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e007      	b.n	8001514 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	e004      	b.n	8001514 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	e001      	b.n	8001514 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001514:	7bfb      	ldrb	r3, [r7, #15]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000008 	.word	0x20000008
 8001524:	20000000 	.word	0x20000000
 8001528:	20000004 	.word	0x20000004

0800152c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_IncTick+0x20>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_IncTick+0x24>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <HAL_IncTick+0x24>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000008 	.word	0x20000008
 8001550:	200007b0 	.word	0x200007b0

08001554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <HAL_GetTick+0x14>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	200007b0 	.word	0x200007b0

0800156c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001574:	f7ff ffee 	bl	8001554 <HAL_GetTick>
 8001578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001584:	d005      	beq.n	8001592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_Delay+0x44>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001592:	bf00      	nop
 8001594:	f7ff ffde 	bl	8001554 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d8f7      	bhi.n	8001594 <HAL_Delay+0x28>
  {
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000008 	.word	0x20000008

080015b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	609a      	str	r2, [r3, #8]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	609a      	str	r2, [r3, #8]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	3360      	adds	r3, #96	; 0x60
 800162e:	461a      	mov	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <LL_ADC_SetOffset+0x44>)
 800163e:	4013      	ands	r3, r2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	4313      	orrs	r3, r2
 800164c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001654:	bf00      	nop
 8001656:	371c      	adds	r7, #28
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	03fff000 	.word	0x03fff000

08001664 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3360      	adds	r3, #96	; 0x60
 8001672:	461a      	mov	r2, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001684:	4618      	mov	r0, r3
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3360      	adds	r3, #96	; 0x60
 80016a0:	461a      	mov	r2, r3
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	431a      	orrs	r2, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016ba:	bf00      	nop
 80016bc:	371c      	adds	r7, #28
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b087      	sub	sp, #28
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	60f8      	str	r0, [r7, #12]
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	3330      	adds	r3, #48	; 0x30
 80016d6:	461a      	mov	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	0a1b      	lsrs	r3, r3, #8
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	4413      	add	r3, r2
 80016e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	f003 031f 	and.w	r3, r3, #31
 80016f0:	211f      	movs	r1, #31
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	401a      	ands	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	0e9b      	lsrs	r3, r3, #26
 80016fe:	f003 011f 	and.w	r1, r3, #31
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	fa01 f303 	lsl.w	r3, r1, r3
 800170c:	431a      	orrs	r2, r3
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001712:	bf00      	nop
 8001714:	371c      	adds	r7, #28
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800171e:	b480      	push	{r7}
 8001720:	b087      	sub	sp, #28
 8001722:	af00      	add	r7, sp, #0
 8001724:	60f8      	str	r0, [r7, #12]
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3314      	adds	r3, #20
 800172e:	461a      	mov	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	0e5b      	lsrs	r3, r3, #25
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	4413      	add	r3, r2
 800173c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	0d1b      	lsrs	r3, r3, #20
 8001746:	f003 031f 	and.w	r3, r3, #31
 800174a:	2107      	movs	r1, #7
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	401a      	ands	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	0d1b      	lsrs	r3, r3, #20
 8001758:	f003 031f 	and.w	r3, r3, #31
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	431a      	orrs	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001768:	bf00      	nop
 800176a:	371c      	adds	r7, #28
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800178c:	43db      	mvns	r3, r3
 800178e:	401a      	ands	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0318 	and.w	r3, r3, #24
 8001796:	4908      	ldr	r1, [pc, #32]	; (80017b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001798:	40d9      	lsrs	r1, r3
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	400b      	ands	r3, r1
 800179e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a2:	431a      	orrs	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	0007ffff 	.word	0x0007ffff

080017bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80017cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6093      	str	r3, [r2, #8]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017f4:	d101      	bne.n	80017fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001818:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800181c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001844:	d101      	bne.n	800184a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <LL_ADC_IsEnabled+0x18>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <LL_ADC_IsEnabled+0x1a>
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	2b04      	cmp	r3, #4
 8001890:	d101      	bne.n	8001896 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d101      	bne.n	80018bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b089      	sub	sp, #36	; 0x24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e136      	b.n	8001b54 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d109      	bne.n	8001908 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff fa6b 	bl	8000dd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff67 	bl	80017e0 <LL_ADC_IsDeepPowerDownEnabled>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d004      	beq.n	8001922 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff4d 	bl	80017bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ff82 	bl	8001830 <LL_ADC_IsInternalRegulatorEnabled>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d115      	bne.n	800195e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ff66 	bl	8001808 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800193c:	4b87      	ldr	r3, [pc, #540]	; (8001b5c <HAL_ADC_Init+0x290>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	099b      	lsrs	r3, r3, #6
 8001942:	4a87      	ldr	r2, [pc, #540]	; (8001b60 <HAL_ADC_Init+0x294>)
 8001944:	fba2 2303 	umull	r2, r3, r2, r3
 8001948:	099b      	lsrs	r3, r3, #6
 800194a:	3301      	adds	r3, #1
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001950:	e002      	b.n	8001958 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	3b01      	subs	r3, #1
 8001956:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f9      	bne.n	8001952 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff64 	bl	8001830 <LL_ADC_IsInternalRegulatorEnabled>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10d      	bne.n	800198a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001972:	f043 0210 	orr.w	r2, r3, #16
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	f043 0201 	orr.w	r2, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff ff75 	bl	800187e <LL_ADC_REG_IsConversionOngoing>
 8001994:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f040 80cf 	bne.w	8001b42 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f040 80cb 	bne.w	8001b42 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019b4:	f043 0202 	orr.w	r2, r3, #2
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff49 	bl	8001858 <LL_ADC_IsEnabled>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d115      	bne.n	80019f8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019cc:	4865      	ldr	r0, [pc, #404]	; (8001b64 <HAL_ADC_Init+0x298>)
 80019ce:	f7ff ff43 	bl	8001858 <LL_ADC_IsEnabled>
 80019d2:	4604      	mov	r4, r0
 80019d4:	4864      	ldr	r0, [pc, #400]	; (8001b68 <HAL_ADC_Init+0x29c>)
 80019d6:	f7ff ff3f 	bl	8001858 <LL_ADC_IsEnabled>
 80019da:	4603      	mov	r3, r0
 80019dc:	431c      	orrs	r4, r3
 80019de:	4863      	ldr	r0, [pc, #396]	; (8001b6c <HAL_ADC_Init+0x2a0>)
 80019e0:	f7ff ff3a 	bl	8001858 <LL_ADC_IsEnabled>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4323      	orrs	r3, r4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d105      	bne.n	80019f8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4619      	mov	r1, r3
 80019f2:	485f      	ldr	r0, [pc, #380]	; (8001b70 <HAL_ADC_Init+0x2a4>)
 80019f4:	f7ff fdde 	bl	80015b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7e5b      	ldrb	r3, [r3, #25]
 80019fc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a02:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001a08:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001a0e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a16:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d106      	bne.n	8001a34 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	045b      	lsls	r3, r3, #17
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d009      	beq.n	8001a50 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a40:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <HAL_ADC_Init+0x2a8>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	69b9      	ldr	r1, [r7, #24]
 8001a60:	430b      	orrs	r3, r1
 8001a62:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff08 	bl	800187e <LL_ADC_REG_IsConversionOngoing>
 8001a6e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff15 	bl	80018a4 <LL_ADC_INJ_IsConversionOngoing>
 8001a7a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d13d      	bne.n	8001afe <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d13a      	bne.n	8001afe <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a8c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a94:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001aa4:	f023 0302 	bic.w	r3, r3, #2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	69b9      	ldr	r1, [r7, #24]
 8001aae:	430b      	orrs	r3, r1
 8001ab0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d118      	bne.n	8001aee <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ac6:	f023 0304 	bic.w	r3, r3, #4
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ad2:	4311      	orrs	r1, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ad8:	4311      	orrs	r1, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	611a      	str	r2, [r3, #16]
 8001aec:	e007      	b.n	8001afe <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0201 	bic.w	r2, r2, #1
 8001afc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d10c      	bne.n	8001b20 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	f023 010f 	bic.w	r1, r3, #15
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	1e5a      	subs	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b1e:	e007      	b.n	8001b30 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 020f 	bic.w	r2, r2, #15
 8001b2e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b34:	f023 0303 	bic.w	r3, r3, #3
 8001b38:	f043 0201 	orr.w	r2, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	655a      	str	r2, [r3, #84]	; 0x54
 8001b40:	e007      	b.n	8001b52 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b46:	f043 0210 	orr.w	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b52:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3724      	adds	r7, #36	; 0x24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd90      	pop	{r4, r7, pc}
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	053e2d63 	.word	0x053e2d63
 8001b64:	50040000 	.word	0x50040000
 8001b68:	50040100 	.word	0x50040100
 8001b6c:	50040200 	.word	0x50040200
 8001b70:	50040300 	.word	0x50040300
 8001b74:	fff0c007 	.word	0xfff0c007

08001b78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b0b6      	sub	sp, #216	; 0xd8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x22>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e3c7      	b.n	800232a <HAL_ADC_ConfigChannel+0x7b2>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fe69 	bl	800187e <LL_ADC_REG_IsConversionOngoing>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 83a8 	bne.w	8002304 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b05      	cmp	r3, #5
 8001bba:	d824      	bhi.n	8001c06 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	3b02      	subs	r3, #2
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d81b      	bhi.n	8001bfe <HAL_ADC_ConfigChannel+0x86>
 8001bc6:	a201      	add	r2, pc, #4	; (adr r2, 8001bcc <HAL_ADC_ConfigChannel+0x54>)
 8001bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bcc:	08001bdd 	.word	0x08001bdd
 8001bd0:	08001be5 	.word	0x08001be5
 8001bd4:	08001bed 	.word	0x08001bed
 8001bd8:	08001bf5 	.word	0x08001bf5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	220c      	movs	r2, #12
 8001be0:	605a      	str	r2, [r3, #4]
          break;
 8001be2:	e011      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2212      	movs	r2, #18
 8001be8:	605a      	str	r2, [r3, #4]
          break;
 8001bea:	e00d      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	2218      	movs	r2, #24
 8001bf0:	605a      	str	r2, [r3, #4]
          break;
 8001bf2:	e009      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bfa:	605a      	str	r2, [r3, #4]
          break;
 8001bfc:	e004      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2206      	movs	r2, #6
 8001c02:	605a      	str	r2, [r3, #4]
          break;
 8001c04:	e000      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001c06:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6818      	ldr	r0, [r3, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	f7ff fd56 	bl	80016c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fe2d 	bl	800187e <LL_ADC_REG_IsConversionOngoing>
 8001c24:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fe39 	bl	80018a4 <LL_ADC_INJ_IsConversionOngoing>
 8001c32:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f040 81a6 	bne.w	8001f8c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f040 81a1 	bne.w	8001f8c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	6819      	ldr	r1, [r3, #0]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	461a      	mov	r2, r3
 8001c58:	f7ff fd61 	bl	800171e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	695a      	ldr	r2, [r3, #20]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	08db      	lsrs	r3, r3, #3
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d00a      	beq.n	8001c94 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	6919      	ldr	r1, [r3, #16]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c8e:	f7ff fcc5 	bl	800161c <LL_ADC_SetOffset>
 8001c92:	e17b      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fce2 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10a      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x148>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fcd7 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	0e9b      	lsrs	r3, r3, #26
 8001cba:	f003 021f 	and.w	r2, r3, #31
 8001cbe:	e01e      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x186>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fccc 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ce2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ce6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001cee:	2320      	movs	r3, #32
 8001cf0:	e004      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d105      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x19e>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	0e9b      	lsrs	r3, r3, #26
 8001d10:	f003 031f 	and.w	r3, r3, #31
 8001d14:	e018      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x1d0>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001d2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001d32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001d3a:	2320      	movs	r3, #32
 8001d3c:	e004      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001d3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d106      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2200      	movs	r2, #0
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fc9b 	bl	8001690 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2101      	movs	r1, #1
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fc7f 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10a      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x20e>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2101      	movs	r1, #1
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fc74 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	0e9b      	lsrs	r3, r3, #26
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	e01e      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x24c>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fc69 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001da4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001da8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001db4:	2320      	movs	r3, #32
 8001db6:	e004      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001db8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dbc:	fab3 f383 	clz	r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d105      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x264>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	0e9b      	lsrs	r3, r3, #26
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	e018      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x296>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001df0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001df4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001e00:	2320      	movs	r3, #32
 8001e02:	e004      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d106      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2200      	movs	r2, #0
 8001e18:	2101      	movs	r1, #1
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fc38 	bl	8001690 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2102      	movs	r1, #2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fc1c 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10a      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x2d4>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2102      	movs	r1, #2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fc11 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8001e42:	4603      	mov	r3, r0
 8001e44:	0e9b      	lsrs	r3, r3, #26
 8001e46:	f003 021f 	and.w	r2, r3, #31
 8001e4a:	e01e      	b.n	8001e8a <HAL_ADC_ConfigChannel+0x312>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2102      	movs	r1, #2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fc06 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001e6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001e7a:	2320      	movs	r3, #32
 8001e7c:	e004      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d105      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x32a>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	0e9b      	lsrs	r3, r3, #26
 8001e9c:	f003 031f 	and.w	r3, r3, #31
 8001ea0:	e016      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x358>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001eb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001eb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001eba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	e004      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d106      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2102      	movs	r1, #2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff fbd7 	bl	8001690 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2103      	movs	r1, #3
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fbbb 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10a      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x396>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2103      	movs	r1, #3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fbb0 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	0e9b      	lsrs	r3, r3, #26
 8001f08:	f003 021f 	and.w	r2, r3, #31
 8001f0c:	e017      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x3c6>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2103      	movs	r1, #3
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fba5 	bl	8001664 <LL_ADC_GetOffsetChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f28:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001f30:	2320      	movs	r3, #32
 8001f32:	e003      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d105      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x3de>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	0e9b      	lsrs	r3, r3, #26
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	e011      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x402>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f66:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001f6e:	2320      	movs	r3, #32
 8001f70:	e003      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d106      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2200      	movs	r2, #0
 8001f84:	2103      	movs	r1, #3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fb82 	bl	8001690 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fc61 	bl	8001858 <LL_ADC_IsEnabled>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f040 813f 	bne.w	800221c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	6819      	ldr	r1, [r3, #0]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	461a      	mov	r2, r3
 8001fac:	f7ff fbe2 	bl	8001774 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	4a8e      	ldr	r2, [pc, #568]	; (80021f0 <HAL_ADC_ConfigChannel+0x678>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	f040 8130 	bne.w	800221c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10b      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x46c>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0e9b      	lsrs	r3, r3, #26
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	2b09      	cmp	r3, #9
 8001fda:	bf94      	ite	ls
 8001fdc:	2301      	movls	r3, #1
 8001fde:	2300      	movhi	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	e019      	b.n	8002018 <HAL_ADC_ConfigChannel+0x4a0>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ff4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001ffc:	2320      	movs	r3, #32
 8001ffe:	e003      	b.n	8002008 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002000:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	3301      	adds	r3, #1
 800200a:	f003 031f 	and.w	r3, r3, #31
 800200e:	2b09      	cmp	r3, #9
 8002010:	bf94      	ite	ls
 8002012:	2301      	movls	r3, #1
 8002014:	2300      	movhi	r3, #0
 8002016:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002018:	2b00      	cmp	r3, #0
 800201a:	d079      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002024:	2b00      	cmp	r3, #0
 8002026:	d107      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x4c0>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	0e9b      	lsrs	r3, r3, #26
 800202e:	3301      	adds	r3, #1
 8002030:	069b      	lsls	r3, r3, #26
 8002032:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002036:	e015      	b.n	8002064 <HAL_ADC_ConfigChannel+0x4ec>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002048:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800204a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002050:	2320      	movs	r3, #32
 8002052:	e003      	b.n	800205c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	3301      	adds	r3, #1
 800205e:	069b      	lsls	r3, r3, #26
 8002060:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206c:	2b00      	cmp	r3, #0
 800206e:	d109      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x50c>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0e9b      	lsrs	r3, r3, #26
 8002076:	3301      	adds	r3, #1
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	2101      	movs	r1, #1
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	e017      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x53c>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800208c:	fa93 f3a3 	rbit	r3, r3
 8002090:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002094:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800209c:	2320      	movs	r3, #32
 800209e:	e003      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80020a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	3301      	adds	r3, #1
 80020aa:	f003 031f 	and.w	r3, r3, #31
 80020ae:	2101      	movs	r1, #1
 80020b0:	fa01 f303 	lsl.w	r3, r1, r3
 80020b4:	ea42 0103 	orr.w	r1, r2, r3
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10a      	bne.n	80020da <HAL_ADC_ConfigChannel+0x562>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	0e9b      	lsrs	r3, r3, #26
 80020ca:	3301      	adds	r3, #1
 80020cc:	f003 021f 	and.w	r2, r3, #31
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	051b      	lsls	r3, r3, #20
 80020d8:	e018      	b.n	800210c <HAL_ADC_ConfigChannel+0x594>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80020e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80020ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80020f2:	2320      	movs	r3, #32
 80020f4:	e003      	b.n	80020fe <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80020f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	3301      	adds	r3, #1
 8002100:	f003 021f 	and.w	r2, r3, #31
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800210c:	430b      	orrs	r3, r1
 800210e:	e080      	b.n	8002212 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002118:	2b00      	cmp	r3, #0
 800211a:	d107      	bne.n	800212c <HAL_ADC_ConfigChannel+0x5b4>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	0e9b      	lsrs	r3, r3, #26
 8002122:	3301      	adds	r3, #1
 8002124:	069b      	lsls	r3, r3, #26
 8002126:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800212a:	e015      	b.n	8002158 <HAL_ADC_ConfigChannel+0x5e0>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800213e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002144:	2320      	movs	r3, #32
 8002146:	e003      	b.n	8002150 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	3301      	adds	r3, #1
 8002152:	069b      	lsls	r3, r3, #26
 8002154:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002160:	2b00      	cmp	r3, #0
 8002162:	d109      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x600>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	0e9b      	lsrs	r3, r3, #26
 800216a:	3301      	adds	r3, #1
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	2101      	movs	r1, #1
 8002172:	fa01 f303 	lsl.w	r3, r1, r3
 8002176:	e017      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x630>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	61fb      	str	r3, [r7, #28]
  return result;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002190:	2320      	movs	r3, #32
 8002192:	e003      	b.n	800219c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	3301      	adds	r3, #1
 800219e:	f003 031f 	and.w	r3, r3, #31
 80021a2:	2101      	movs	r1, #1
 80021a4:	fa01 f303 	lsl.w	r3, r1, r3
 80021a8:	ea42 0103 	orr.w	r1, r2, r3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10d      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x65c>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0e9b      	lsrs	r3, r3, #26
 80021be:	3301      	adds	r3, #1
 80021c0:	f003 021f 	and.w	r2, r3, #31
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	3b1e      	subs	r3, #30
 80021cc:	051b      	lsls	r3, r3, #20
 80021ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021d2:	e01d      	b.n	8002210 <HAL_ADC_ConfigChannel+0x698>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	613b      	str	r3, [r7, #16]
  return result;
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d103      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80021ec:	2320      	movs	r3, #32
 80021ee:	e005      	b.n	80021fc <HAL_ADC_ConfigChannel+0x684>
 80021f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	3301      	adds	r3, #1
 80021fe:	f003 021f 	and.w	r2, r3, #31
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	3b1e      	subs	r3, #30
 800220a:	051b      	lsls	r3, r3, #20
 800220c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002210:	430b      	orrs	r3, r1
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	6892      	ldr	r2, [r2, #8]
 8002216:	4619      	mov	r1, r3
 8002218:	f7ff fa81 	bl	800171e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b44      	ldr	r3, [pc, #272]	; (8002334 <HAL_ADC_ConfigChannel+0x7bc>)
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d07a      	beq.n	800231e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002228:	4843      	ldr	r0, [pc, #268]	; (8002338 <HAL_ADC_ConfigChannel+0x7c0>)
 800222a:	f7ff f9e9 	bl	8001600 <LL_ADC_GetCommonPathInternalCh>
 800222e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a41      	ldr	r2, [pc, #260]	; (800233c <HAL_ADC_ConfigChannel+0x7c4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d12c      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800223c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002240:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d126      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a3c      	ldr	r2, [pc, #240]	; (8002340 <HAL_ADC_ConfigChannel+0x7c8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d004      	beq.n	800225c <HAL_ADC_ConfigChannel+0x6e4>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a3b      	ldr	r2, [pc, #236]	; (8002344 <HAL_ADC_ConfigChannel+0x7cc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d15d      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800225c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002260:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002264:	4619      	mov	r1, r3
 8002266:	4834      	ldr	r0, [pc, #208]	; (8002338 <HAL_ADC_ConfigChannel+0x7c0>)
 8002268:	f7ff f9b7 	bl	80015da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800226c:	4b36      	ldr	r3, [pc, #216]	; (8002348 <HAL_ADC_ConfigChannel+0x7d0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	099b      	lsrs	r3, r3, #6
 8002272:	4a36      	ldr	r2, [pc, #216]	; (800234c <HAL_ADC_ConfigChannel+0x7d4>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	099b      	lsrs	r3, r3, #6
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	4613      	mov	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002286:	e002      	b.n	800228e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3b01      	subs	r3, #1
 800228c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f9      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002294:	e040      	b.n	8002318 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a2d      	ldr	r2, [pc, #180]	; (8002350 <HAL_ADC_ConfigChannel+0x7d8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d118      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x75a>
 80022a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d112      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a23      	ldr	r2, [pc, #140]	; (8002340 <HAL_ADC_ConfigChannel+0x7c8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d004      	beq.n	80022c0 <HAL_ADC_ConfigChannel+0x748>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a22      	ldr	r2, [pc, #136]	; (8002344 <HAL_ADC_ConfigChannel+0x7cc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d12d      	bne.n	800231c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022c8:	4619      	mov	r1, r3
 80022ca:	481b      	ldr	r0, [pc, #108]	; (8002338 <HAL_ADC_ConfigChannel+0x7c0>)
 80022cc:	f7ff f985 	bl	80015da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022d0:	e024      	b.n	800231c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1f      	ldr	r2, [pc, #124]	; (8002354 <HAL_ADC_ConfigChannel+0x7dc>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d120      	bne.n	800231e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d11a      	bne.n	800231e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a14      	ldr	r2, [pc, #80]	; (8002340 <HAL_ADC_ConfigChannel+0x7c8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d115      	bne.n	800231e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022fa:	4619      	mov	r1, r3
 80022fc:	480e      	ldr	r0, [pc, #56]	; (8002338 <HAL_ADC_ConfigChannel+0x7c0>)
 80022fe:	f7ff f96c 	bl	80015da <LL_ADC_SetCommonPathInternalCh>
 8002302:	e00c      	b.n	800231e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002308:	f043 0220 	orr.w	r2, r3, #32
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002316:	e002      	b.n	800231e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002318:	bf00      	nop
 800231a:	e000      	b.n	800231e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800231c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002326:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800232a:	4618      	mov	r0, r3
 800232c:	37d8      	adds	r7, #216	; 0xd8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	80080000 	.word	0x80080000
 8002338:	50040300 	.word	0x50040300
 800233c:	c7520000 	.word	0xc7520000
 8002340:	50040000 	.word	0x50040000
 8002344:	50040200 	.word	0x50040200
 8002348:	20000000 	.word	0x20000000
 800234c:	053e2d63 	.word	0x053e2d63
 8002350:	cb840000 	.word	0xcb840000
 8002354:	80000001 	.word	0x80000001

08002358 <LL_ADC_IsEnabled>:
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <LL_ADC_IsEnabled+0x18>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <LL_ADC_IsEnabled+0x1a>
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <LL_ADC_REG_IsConversionOngoing>:
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b04      	cmp	r3, #4
 8002390:	d101      	bne.n	8002396 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b09f      	sub	sp, #124	; 0x7c
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023be:	2302      	movs	r3, #2
 80023c0:	e093      	b.n	80024ea <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80023ca:	2300      	movs	r3, #0
 80023cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80023ce:	2300      	movs	r3, #0
 80023d0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a47      	ldr	r2, [pc, #284]	; (80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d102      	bne.n	80023e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80023dc:	4b46      	ldr	r3, [pc, #280]	; (80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	e001      	b.n	80023e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10b      	bne.n	8002404 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	f043 0220 	orr.w	r2, r3, #32
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e072      	b.n	80024ea <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ffb9 	bl	800237e <LL_ADC_REG_IsConversionOngoing>
 800240c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ffb3 	bl	800237e <LL_ADC_REG_IsConversionOngoing>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d154      	bne.n	80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800241e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002420:	2b00      	cmp	r3, #0
 8002422:	d151      	bne.n	80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002424:	4b35      	ldr	r3, [pc, #212]	; (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002426:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d02c      	beq.n	800248a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002442:	035b      	lsls	r3, r3, #13
 8002444:	430b      	orrs	r3, r1
 8002446:	431a      	orrs	r2, r3
 8002448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800244a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800244c:	4829      	ldr	r0, [pc, #164]	; (80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800244e:	f7ff ff83 	bl	8002358 <LL_ADC_IsEnabled>
 8002452:	4604      	mov	r4, r0
 8002454:	4828      	ldr	r0, [pc, #160]	; (80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002456:	f7ff ff7f 	bl	8002358 <LL_ADC_IsEnabled>
 800245a:	4603      	mov	r3, r0
 800245c:	431c      	orrs	r4, r3
 800245e:	4828      	ldr	r0, [pc, #160]	; (8002500 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002460:	f7ff ff7a 	bl	8002358 <LL_ADC_IsEnabled>
 8002464:	4603      	mov	r3, r0
 8002466:	4323      	orrs	r3, r4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d137      	bne.n	80024dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800246c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002474:	f023 030f 	bic.w	r3, r3, #15
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	6811      	ldr	r1, [r2, #0]
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	6892      	ldr	r2, [r2, #8]
 8002480:	430a      	orrs	r2, r1
 8002482:	431a      	orrs	r2, r3
 8002484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002486:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002488:	e028      	b.n	80024dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800248a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002494:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002496:	4817      	ldr	r0, [pc, #92]	; (80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002498:	f7ff ff5e 	bl	8002358 <LL_ADC_IsEnabled>
 800249c:	4604      	mov	r4, r0
 800249e:	4816      	ldr	r0, [pc, #88]	; (80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024a0:	f7ff ff5a 	bl	8002358 <LL_ADC_IsEnabled>
 80024a4:	4603      	mov	r3, r0
 80024a6:	431c      	orrs	r4, r3
 80024a8:	4815      	ldr	r0, [pc, #84]	; (8002500 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80024aa:	f7ff ff55 	bl	8002358 <LL_ADC_IsEnabled>
 80024ae:	4603      	mov	r3, r0
 80024b0:	4323      	orrs	r3, r4
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d112      	bne.n	80024dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024be:	f023 030f 	bic.w	r3, r3, #15
 80024c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80024c4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024c6:	e009      	b.n	80024dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024cc:	f043 0220 	orr.w	r2, r3, #32
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80024da:	e000      	b.n	80024de <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024e6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	377c      	adds	r7, #124	; 0x7c
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd90      	pop	{r4, r7, pc}
 80024f2:	bf00      	nop
 80024f4:	50040000 	.word	0x50040000
 80024f8:	50040100 	.word	0x50040100
 80024fc:	50040300 	.word	0x50040300
 8002500:	50040200 	.word	0x50040200

08002504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002514:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002520:	4013      	ands	r3, r2
 8002522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800252c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002536:	4a04      	ldr	r2, [pc, #16]	; (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	60d3      	str	r3, [r2, #12]
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <__NVIC_GetPriorityGrouping+0x18>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	f003 0307 	and.w	r3, r3, #7
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	2b00      	cmp	r3, #0
 8002578:	db0b      	blt.n	8002592 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	f003 021f 	and.w	r2, r3, #31
 8002580:	4907      	ldr	r1, [pc, #28]	; (80025a0 <__NVIC_EnableIRQ+0x38>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2001      	movs	r0, #1
 800258a:	fa00 f202 	lsl.w	r2, r0, r2
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000e100 	.word	0xe000e100

080025a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	db0a      	blt.n	80025ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	490c      	ldr	r1, [pc, #48]	; (80025f0 <__NVIC_SetPriority+0x4c>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	0112      	lsls	r2, r2, #4
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	440b      	add	r3, r1
 80025c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025cc:	e00a      	b.n	80025e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4908      	ldr	r1, [pc, #32]	; (80025f4 <__NVIC_SetPriority+0x50>)
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	3b04      	subs	r3, #4
 80025dc:	0112      	lsls	r2, r2, #4
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	440b      	add	r3, r1
 80025e2:	761a      	strb	r2, [r3, #24]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000e100 	.word	0xe000e100
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	; 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f1c3 0307 	rsb	r3, r3, #7
 8002612:	2b04      	cmp	r3, #4
 8002614:	bf28      	it	cs
 8002616:	2304      	movcs	r3, #4
 8002618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3304      	adds	r3, #4
 800261e:	2b06      	cmp	r3, #6
 8002620:	d902      	bls.n	8002628 <NVIC_EncodePriority+0x30>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3b03      	subs	r3, #3
 8002626:	e000      	b.n	800262a <NVIC_EncodePriority+0x32>
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	f04f 32ff 	mov.w	r2, #4294967295
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	401a      	ands	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002640:	f04f 31ff 	mov.w	r1, #4294967295
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	43d9      	mvns	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	4313      	orrs	r3, r2
         );
}
 8002652:	4618      	mov	r0, r3
 8002654:	3724      	adds	r7, #36	; 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002670:	d301      	bcc.n	8002676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002672:	2301      	movs	r3, #1
 8002674:	e00f      	b.n	8002696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002676:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <SysTick_Config+0x40>)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800267e:	210f      	movs	r1, #15
 8002680:	f04f 30ff 	mov.w	r0, #4294967295
 8002684:	f7ff ff8e 	bl	80025a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <SysTick_Config+0x40>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800268e:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <SysTick_Config+0x40>)
 8002690:	2207      	movs	r2, #7
 8002692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	e000e010 	.word	0xe000e010

080026a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff ff29 	bl	8002504 <__NVIC_SetPriorityGrouping>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026cc:	f7ff ff3e 	bl	800254c <__NVIC_GetPriorityGrouping>
 80026d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	6978      	ldr	r0, [r7, #20]
 80026d8:	f7ff ff8e 	bl	80025f8 <NVIC_EncodePriority>
 80026dc:	4602      	mov	r2, r0
 80026de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff5d 	bl	80025a4 <__NVIC_SetPriority>
}
 80026ea:	bf00      	nop
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4603      	mov	r3, r0
 80026fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff31 	bl	8002568 <__NVIC_EnableIRQ>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ffa2 	bl	8002660 <SysTick_Config>
 800271c:	4603      	mov	r3, r0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e0ac      	b.n	8002894 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f8b2 	bl	80028a8 <DFSDM_GetChannelFromInstance>
 8002744:	4603      	mov	r3, r0
 8002746:	4a55      	ldr	r2, [pc, #340]	; (800289c <HAL_DFSDM_ChannelInit+0x174>)
 8002748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e09f      	b.n	8002894 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7fe fb93 	bl	8000e80 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800275a:	4b51      	ldr	r3, [pc, #324]	; (80028a0 <HAL_DFSDM_ChannelInit+0x178>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	3301      	adds	r3, #1
 8002760:	4a4f      	ldr	r2, [pc, #316]	; (80028a0 <HAL_DFSDM_ChannelInit+0x178>)
 8002762:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002764:	4b4e      	ldr	r3, [pc, #312]	; (80028a0 <HAL_DFSDM_ChannelInit+0x178>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d125      	bne.n	80027b8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800276c:	4b4d      	ldr	r3, [pc, #308]	; (80028a4 <HAL_DFSDM_ChannelInit+0x17c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a4c      	ldr	r2, [pc, #304]	; (80028a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002772:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002776:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002778:	4b4a      	ldr	r3, [pc, #296]	; (80028a4 <HAL_DFSDM_ChannelInit+0x17c>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4948      	ldr	r1, [pc, #288]	; (80028a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002786:	4b47      	ldr	r3, [pc, #284]	; (80028a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a46      	ldr	r2, [pc, #280]	; (80028a4 <HAL_DFSDM_ChannelInit+0x17c>)
 800278c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002790:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	791b      	ldrb	r3, [r3, #4]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d108      	bne.n	80027ac <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800279a:	4b42      	ldr	r3, [pc, #264]	; (80028a4 <HAL_DFSDM_ChannelInit+0x17c>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	041b      	lsls	r3, r3, #16
 80027a6:	493f      	ldr	r1, [pc, #252]	; (80028a4 <HAL_DFSDM_ChannelInit+0x17c>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80027ac:	4b3d      	ldr	r3, [pc, #244]	; (80028a4 <HAL_DFSDM_ChannelInit+0x17c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a3c      	ldr	r2, [pc, #240]	; (80028a4 <HAL_DFSDM_ChannelInit+0x17c>)
 80027b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027b6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80027c6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6819      	ldr	r1, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80027d6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80027dc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 020f 	bic.w	r2, r2, #15
 80027f4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6819      	ldr	r1, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800281c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6899      	ldr	r1, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282c:	3b01      	subs	r3, #1
 800282e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f002 0207 	and.w	r2, r2, #7
 8002848:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6859      	ldr	r1, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002874:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f810 	bl	80028a8 <DFSDM_GetChannelFromInstance>
 8002888:	4602      	mov	r2, r0
 800288a:	4904      	ldr	r1, [pc, #16]	; (800289c <HAL_DFSDM_ChannelInit+0x174>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	200007b8 	.word	0x200007b8
 80028a0:	200007b4 	.word	0x200007b4
 80028a4:	40016000 	.word	0x40016000

080028a8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <DFSDM_GetChannelFromInstance+0x7c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d102      	bne.n	80028be <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	e02b      	b.n	8002916 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a19      	ldr	r2, [pc, #100]	; (8002928 <DFSDM_GetChannelFromInstance+0x80>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d102      	bne.n	80028cc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80028c6:	2301      	movs	r3, #1
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	e024      	b.n	8002916 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a17      	ldr	r2, [pc, #92]	; (800292c <DFSDM_GetChannelFromInstance+0x84>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d102      	bne.n	80028da <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80028d4:	2302      	movs	r3, #2
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	e01d      	b.n	8002916 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a14      	ldr	r2, [pc, #80]	; (8002930 <DFSDM_GetChannelFromInstance+0x88>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d102      	bne.n	80028e8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80028e2:	2304      	movs	r3, #4
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	e016      	b.n	8002916 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a12      	ldr	r2, [pc, #72]	; (8002934 <DFSDM_GetChannelFromInstance+0x8c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d102      	bne.n	80028f6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80028f0:	2305      	movs	r3, #5
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	e00f      	b.n	8002916 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a0f      	ldr	r2, [pc, #60]	; (8002938 <DFSDM_GetChannelFromInstance+0x90>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d102      	bne.n	8002904 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80028fe:	2306      	movs	r3, #6
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	e008      	b.n	8002916 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a0d      	ldr	r2, [pc, #52]	; (800293c <DFSDM_GetChannelFromInstance+0x94>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d102      	bne.n	8002912 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800290c:	2307      	movs	r3, #7
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	e001      	b.n	8002916 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002912:	2303      	movs	r3, #3
 8002914:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002916:	68fb      	ldr	r3, [r7, #12]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	40016000 	.word	0x40016000
 8002928:	40016020 	.word	0x40016020
 800292c:	40016040 	.word	0x40016040
 8002930:	40016080 	.word	0x40016080
 8002934:	400160a0 	.word	0x400160a0
 8002938:	400160c0 	.word	0x400160c0
 800293c:	400160e0 	.word	0x400160e0

08002940 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d005      	beq.n	8002964 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2204      	movs	r2, #4
 800295c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
 8002962:	e029      	b.n	80029b8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 020e 	bic.w	r2, r2, #14
 8002972:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0201 	bic.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002988:	f003 021c 	and.w	r2, r3, #28
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	2101      	movs	r1, #1
 8002992:	fa01 f202 	lsl.w	r2, r1, r2
 8002996:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	4798      	blx	r3
    }
  }
  return status;
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029d2:	e17f      	b.n	8002cd4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	2101      	movs	r1, #1
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	4013      	ands	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8171 	beq.w	8002cce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d005      	beq.n	8002a04 <HAL_GPIO_Init+0x40>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d130      	bne.n	8002a66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	f003 0201 	and.w	r2, r3, #1
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d118      	bne.n	8002aa4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a78:	2201      	movs	r2, #1
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	08db      	lsrs	r3, r3, #3
 8002a8e:	f003 0201 	and.w	r2, r3, #1
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d017      	beq.n	8002ae0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	2203      	movs	r2, #3
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d123      	bne.n	8002b34 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	08da      	lsrs	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3208      	adds	r2, #8
 8002af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	220f      	movs	r2, #15
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	08da      	lsrs	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3208      	adds	r2, #8
 8002b2e:	6939      	ldr	r1, [r7, #16]
 8002b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0203 	and.w	r2, r3, #3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80ac 	beq.w	8002cce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b76:	4b5f      	ldr	r3, [pc, #380]	; (8002cf4 <HAL_GPIO_Init+0x330>)
 8002b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7a:	4a5e      	ldr	r2, [pc, #376]	; (8002cf4 <HAL_GPIO_Init+0x330>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6613      	str	r3, [r2, #96]	; 0x60
 8002b82:	4b5c      	ldr	r3, [pc, #368]	; (8002cf4 <HAL_GPIO_Init+0x330>)
 8002b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b8e:	4a5a      	ldr	r2, [pc, #360]	; (8002cf8 <HAL_GPIO_Init+0x334>)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	089b      	lsrs	r3, r3, #2
 8002b94:	3302      	adds	r3, #2
 8002b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	220f      	movs	r2, #15
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bb8:	d025      	beq.n	8002c06 <HAL_GPIO_Init+0x242>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4f      	ldr	r2, [pc, #316]	; (8002cfc <HAL_GPIO_Init+0x338>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d01f      	beq.n	8002c02 <HAL_GPIO_Init+0x23e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4e      	ldr	r2, [pc, #312]	; (8002d00 <HAL_GPIO_Init+0x33c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d019      	beq.n	8002bfe <HAL_GPIO_Init+0x23a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4d      	ldr	r2, [pc, #308]	; (8002d04 <HAL_GPIO_Init+0x340>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d013      	beq.n	8002bfa <HAL_GPIO_Init+0x236>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a4c      	ldr	r2, [pc, #304]	; (8002d08 <HAL_GPIO_Init+0x344>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00d      	beq.n	8002bf6 <HAL_GPIO_Init+0x232>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a4b      	ldr	r2, [pc, #300]	; (8002d0c <HAL_GPIO_Init+0x348>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d007      	beq.n	8002bf2 <HAL_GPIO_Init+0x22e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a4a      	ldr	r2, [pc, #296]	; (8002d10 <HAL_GPIO_Init+0x34c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <HAL_GPIO_Init+0x22a>
 8002bea:	2306      	movs	r3, #6
 8002bec:	e00c      	b.n	8002c08 <HAL_GPIO_Init+0x244>
 8002bee:	2307      	movs	r3, #7
 8002bf0:	e00a      	b.n	8002c08 <HAL_GPIO_Init+0x244>
 8002bf2:	2305      	movs	r3, #5
 8002bf4:	e008      	b.n	8002c08 <HAL_GPIO_Init+0x244>
 8002bf6:	2304      	movs	r3, #4
 8002bf8:	e006      	b.n	8002c08 <HAL_GPIO_Init+0x244>
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e004      	b.n	8002c08 <HAL_GPIO_Init+0x244>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e002      	b.n	8002c08 <HAL_GPIO_Init+0x244>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_GPIO_Init+0x244>
 8002c06:	2300      	movs	r3, #0
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	f002 0203 	and.w	r2, r2, #3
 8002c0e:	0092      	lsls	r2, r2, #2
 8002c10:	4093      	lsls	r3, r2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c18:	4937      	ldr	r1, [pc, #220]	; (8002cf8 <HAL_GPIO_Init+0x334>)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	089b      	lsrs	r3, r3, #2
 8002c1e:	3302      	adds	r3, #2
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c26:	4b3b      	ldr	r3, [pc, #236]	; (8002d14 <HAL_GPIO_Init+0x350>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4013      	ands	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c4a:	4a32      	ldr	r2, [pc, #200]	; (8002d14 <HAL_GPIO_Init+0x350>)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c50:	4b30      	ldr	r3, [pc, #192]	; (8002d14 <HAL_GPIO_Init+0x350>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c74:	4a27      	ldr	r2, [pc, #156]	; (8002d14 <HAL_GPIO_Init+0x350>)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c7a:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <HAL_GPIO_Init+0x350>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c9e:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <HAL_GPIO_Init+0x350>)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <HAL_GPIO_Init+0x350>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cc8:	4a12      	ldr	r2, [pc, #72]	; (8002d14 <HAL_GPIO_Init+0x350>)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	fa22 f303 	lsr.w	r3, r2, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f47f ae78 	bne.w	80029d4 <HAL_GPIO_Init+0x10>
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	48000400 	.word	0x48000400
 8002d00:	48000800 	.word	0x48000800
 8002d04:	48000c00 	.word	0x48000c00
 8002d08:	48001000 	.word	0x48001000
 8002d0c:	48001400 	.word	0x48001400
 8002d10:	48001800 	.word	0x48001800
 8002d14:	40010400 	.word	0x40010400

08002d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	807b      	strh	r3, [r7, #2]
 8002d24:	4613      	mov	r3, r2
 8002d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d28:	787b      	ldrb	r3, [r7, #1]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d2e:	887a      	ldrh	r2, [r7, #2]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d34:	e002      	b.n	8002d3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d36:	887a      	ldrh	r2, [r7, #2]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d52:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	88fb      	ldrh	r3, [r7, #6]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d006      	beq.n	8002d6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d5e:	4a05      	ldr	r2, [pc, #20]	; (8002d74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d60:	88fb      	ldrh	r3, [r7, #6]
 8002d62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe fb47 	bl	80013fa <HAL_GPIO_EXTI_Callback>
  }
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40010400 	.word	0x40010400

08002d78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e081      	b.n	8002e8e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fe f8d2 	bl	8000f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2224      	movs	r2, #36	; 0x24
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d107      	bne.n	8002df2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	e006      	b.n	8002e00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002dfe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d104      	bne.n	8002e12 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691a      	ldr	r2, [r3, #16]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69d9      	ldr	r1, [r3, #28]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1a      	ldr	r2, [r3, #32]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d138      	bne.n	8002f1e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e032      	b.n	8002f20 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2224      	movs	r2, #36	; 0x24
 8002ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0201 	bic.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ee8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6819      	ldr	r1, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f042 0201 	orr.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e000      	b.n	8002f20 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f1e:	2302      	movs	r3, #2
  }
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	d139      	bne.n	8002fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e033      	b.n	8002fb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2224      	movs	r2, #36	; 0x24
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0201 	bic.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0201 	orr.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e000      	b.n	8002fb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fb6:	2302      	movs	r3, #2
  }
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fc6:	b08f      	sub	sp, #60	; 0x3c
 8002fc8:	af0a      	add	r7, sp, #40	; 0x28
 8002fca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e116      	b.n	8003204 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d106      	bne.n	8002ff6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7fe f931 	bl	8001258 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d102      	bne.n	8003010 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f002 fbce 	bl	80057b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	687e      	ldr	r6, [r7, #4]
 8003022:	466d      	mov	r5, sp
 8003024:	f106 0410 	add.w	r4, r6, #16
 8003028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800302a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800302c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800302e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003030:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003034:	e885 0003 	stmia.w	r5, {r0, r1}
 8003038:	1d33      	adds	r3, r6, #4
 800303a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800303c:	6838      	ldr	r0, [r7, #0]
 800303e:	f002 fb8e 	bl	800575e <USB_CoreInit>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0d7      	b.n	8003204 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2100      	movs	r1, #0
 800305a:	4618      	mov	r0, r3
 800305c:	f002 fbbc 	bl	80057d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003060:	2300      	movs	r3, #0
 8003062:	73fb      	strb	r3, [r7, #15]
 8003064:	e04a      	b.n	80030fc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003066:	7bfa      	ldrb	r2, [r7, #15]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	333d      	adds	r3, #61	; 0x3d
 8003076:	2201      	movs	r2, #1
 8003078:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800307a:	7bfa      	ldrb	r2, [r7, #15]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	333c      	adds	r3, #60	; 0x3c
 800308a:	7bfa      	ldrb	r2, [r7, #15]
 800308c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	b298      	uxth	r0, r3
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	3344      	adds	r3, #68	; 0x44
 80030a2:	4602      	mov	r2, r0
 80030a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	3340      	adds	r3, #64	; 0x40
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	3348      	adds	r3, #72	; 0x48
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030ce:	7bfa      	ldrb	r2, [r7, #15]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	334c      	adds	r3, #76	; 0x4c
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030e2:	7bfa      	ldrb	r2, [r7, #15]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	3354      	adds	r3, #84	; 0x54
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	3301      	adds	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
 80030fc:	7bfa      	ldrb	r2, [r7, #15]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	429a      	cmp	r2, r3
 8003104:	d3af      	bcc.n	8003066 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003106:	2300      	movs	r3, #0
 8003108:	73fb      	strb	r3, [r7, #15]
 800310a:	e044      	b.n	8003196 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800310c:	7bfa      	ldrb	r2, [r7, #15]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	3301      	adds	r3, #1
 8003194:	73fb      	strb	r3, [r7, #15]
 8003196:	7bfa      	ldrb	r2, [r7, #15]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	429a      	cmp	r2, r3
 800319e:	d3b5      	bcc.n	800310c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	603b      	str	r3, [r7, #0]
 80031a6:	687e      	ldr	r6, [r7, #4]
 80031a8:	466d      	mov	r5, sp
 80031aa:	f106 0410 	add.w	r4, r6, #16
 80031ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80031be:	1d33      	adds	r3, r6, #4
 80031c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031c2:	6838      	ldr	r0, [r7, #0]
 80031c4:	f002 fb54 	bl	8005870 <USB_DevInit>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e014      	b.n	8003204 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d102      	bne.n	80031f8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f80a 	bl	800320c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f002 fd00 	bl	8005c02 <USB_DevDisconnect>

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800320c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323e:	f043 0303 	orr.w	r3, r3, #3
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a04      	ldr	r2, [pc, #16]	; (8003270 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800325e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003262:	6013      	str	r3, [r2, #0]
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40007000 	.word	0x40007000

08003274 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003278:	4b04      	ldr	r3, [pc, #16]	; (800328c <HAL_PWREx_GetVoltageRange+0x18>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003280:	4618      	mov	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40007000 	.word	0x40007000

08003290 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800329e:	d130      	bne.n	8003302 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032a0:	4b23      	ldr	r3, [pc, #140]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ac:	d038      	beq.n	8003320 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032ae:	4b20      	ldr	r3, [pc, #128]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032b6:	4a1e      	ldr	r2, [pc, #120]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032be:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2232      	movs	r2, #50	; 0x32
 80032c4:	fb02 f303 	mul.w	r3, r2, r3
 80032c8:	4a1b      	ldr	r2, [pc, #108]	; (8003338 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	0c9b      	lsrs	r3, r3, #18
 80032d0:	3301      	adds	r3, #1
 80032d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032d4:	e002      	b.n	80032dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	3b01      	subs	r3, #1
 80032da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032dc:	4b14      	ldr	r3, [pc, #80]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e8:	d102      	bne.n	80032f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f2      	bne.n	80032d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032f0:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fc:	d110      	bne.n	8003320 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e00f      	b.n	8003322 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003302:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800330a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330e:	d007      	beq.n	8003320 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003310:	4b07      	ldr	r3, [pc, #28]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003318:	4a05      	ldr	r2, [pc, #20]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800331a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800331e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40007000 	.word	0x40007000
 8003334:	20000000 	.word	0x20000000
 8003338:	431bde83 	.word	0x431bde83

0800333c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4a04      	ldr	r2, [pc, #16]	; (8003358 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800334a:	6053      	str	r3, [r2, #4]
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40007000 	.word	0x40007000

0800335c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af02      	add	r7, sp, #8
 8003362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003364:	f7fe f8f6 	bl	8001554 <HAL_GetTick>
 8003368:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e063      	b.n	800343c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10b      	bne.n	8003398 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7fd fe7f 	bl	800108c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800338e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f858 	bl	8003448 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	021a      	lsls	r2, r3, #8
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	2120      	movs	r1, #32
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f850 	bl	8003464 <QSPI_WaitFlagStateUntilTimeout>
 80033c4:	4603      	mov	r3, r0
 80033c6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80033c8:	7afb      	ldrb	r3, [r7, #11]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d131      	bne.n	8003432 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033d8:	f023 0310 	bic.w	r3, r3, #16
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6852      	ldr	r2, [r2, #4]
 80033e0:	0611      	lsls	r1, r2, #24
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68d2      	ldr	r2, [r2, #12]
 80033e6:	4311      	orrs	r1, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6812      	ldr	r2, [r2, #0]
 80033ec:	430b      	orrs	r3, r1
 80033ee:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	4b13      	ldr	r3, [pc, #76]	; (8003444 <HAL_QSPI_Init+0xe8>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6912      	ldr	r2, [r2, #16]
 80033fe:	0411      	lsls	r1, r2, #16
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6952      	ldr	r2, [r2, #20]
 8003404:	4311      	orrs	r1, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6992      	ldr	r2, [r2, #24]
 800340a:	4311      	orrs	r1, r2
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	430b      	orrs	r3, r1
 8003412:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800343a:	7afb      	ldrb	r3, [r7, #11]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	ffe0f8fe 	.word	0xffe0f8fe

08003448 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	4613      	mov	r3, r2
 8003472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003474:	e01a      	b.n	80034ac <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d016      	beq.n	80034ac <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347e:	f7fe f869 	bl	8001554 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	429a      	cmp	r2, r3
 800348c:	d302      	bcc.n	8003494 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10b      	bne.n	80034ac <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2204      	movs	r2, #4
 8003498:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a0:	f043 0201 	orr.w	r2, r3, #1
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e00e      	b.n	80034ca <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4013      	ands	r3, r2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	bf14      	ite	ne
 80034ba:	2301      	movne	r3, #1
 80034bc:	2300      	moveq	r3, #0
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	79fb      	ldrb	r3, [r7, #7]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d1d6      	bne.n	8003476 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e3ca      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034e6:	4b97      	ldr	r3, [pc, #604]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034f0:	4b94      	ldr	r3, [pc, #592]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80e4 	beq.w	80036d0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <HAL_RCC_OscConfig+0x4a>
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	2b0c      	cmp	r3, #12
 8003512:	f040 808b 	bne.w	800362c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b01      	cmp	r3, #1
 800351a:	f040 8087 	bne.w	800362c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800351e:	4b89      	ldr	r3, [pc, #548]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <HAL_RCC_OscConfig+0x62>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e3a2      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1a      	ldr	r2, [r3, #32]
 800353a:	4b82      	ldr	r3, [pc, #520]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d004      	beq.n	8003550 <HAL_RCC_OscConfig+0x7c>
 8003546:	4b7f      	ldr	r3, [pc, #508]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800354e:	e005      	b.n	800355c <HAL_RCC_OscConfig+0x88>
 8003550:	4b7c      	ldr	r3, [pc, #496]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 8003552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003556:	091b      	lsrs	r3, r3, #4
 8003558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800355c:	4293      	cmp	r3, r2
 800355e:	d223      	bcs.n	80035a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	4618      	mov	r0, r3
 8003566:	f000 fd55 	bl	8004014 <RCC_SetFlashLatencyFromMSIRange>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e383      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003574:	4b73      	ldr	r3, [pc, #460]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a72      	ldr	r2, [pc, #456]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 800357a:	f043 0308 	orr.w	r3, r3, #8
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	4b70      	ldr	r3, [pc, #448]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	496d      	ldr	r1, [pc, #436]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003592:	4b6c      	ldr	r3, [pc, #432]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	021b      	lsls	r3, r3, #8
 80035a0:	4968      	ldr	r1, [pc, #416]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	604b      	str	r3, [r1, #4]
 80035a6:	e025      	b.n	80035f4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035a8:	4b66      	ldr	r3, [pc, #408]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a65      	ldr	r2, [pc, #404]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 80035ae:	f043 0308 	orr.w	r3, r3, #8
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4b63      	ldr	r3, [pc, #396]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	4960      	ldr	r1, [pc, #384]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035c6:	4b5f      	ldr	r3, [pc, #380]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	495b      	ldr	r1, [pc, #364]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d109      	bne.n	80035f4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 fd15 	bl	8004014 <RCC_SetFlashLatencyFromMSIRange>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e343      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035f4:	f000 fc4a 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b52      	ldr	r3, [pc, #328]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	091b      	lsrs	r3, r3, #4
 8003600:	f003 030f 	and.w	r3, r3, #15
 8003604:	4950      	ldr	r1, [pc, #320]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 8003606:	5ccb      	ldrb	r3, [r1, r3]
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
 8003610:	4a4e      	ldr	r2, [pc, #312]	; (800374c <HAL_RCC_OscConfig+0x278>)
 8003612:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003614:	4b4e      	ldr	r3, [pc, #312]	; (8003750 <HAL_RCC_OscConfig+0x27c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f7fd ff4b 	bl	80014b4 <HAL_InitTick>
 800361e:	4603      	mov	r3, r0
 8003620:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d052      	beq.n	80036ce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	e327      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d032      	beq.n	800369a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003634:	4b43      	ldr	r3, [pc, #268]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a42      	ldr	r2, [pc, #264]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003640:	f7fd ff88 	bl	8001554 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003648:	f7fd ff84 	bl	8001554 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e310      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800365a:	4b3a      	ldr	r3, [pc, #232]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003666:	4b37      	ldr	r3, [pc, #220]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a36      	ldr	r2, [pc, #216]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 800366c:	f043 0308 	orr.w	r3, r3, #8
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b34      	ldr	r3, [pc, #208]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	4931      	ldr	r1, [pc, #196]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 8003680:	4313      	orrs	r3, r2
 8003682:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003684:	4b2f      	ldr	r3, [pc, #188]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	021b      	lsls	r3, r3, #8
 8003692:	492c      	ldr	r1, [pc, #176]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 8003694:	4313      	orrs	r3, r2
 8003696:	604b      	str	r3, [r1, #4]
 8003698:	e01a      	b.n	80036d0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800369a:	4b2a      	ldr	r3, [pc, #168]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a29      	ldr	r2, [pc, #164]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036a6:	f7fd ff55 	bl	8001554 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036ae:	f7fd ff51 	bl	8001554 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e2dd      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036c0:	4b20      	ldr	r3, [pc, #128]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1f0      	bne.n	80036ae <HAL_RCC_OscConfig+0x1da>
 80036cc:	e000      	b.n	80036d0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d074      	beq.n	80037c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d005      	beq.n	80036ee <HAL_RCC_OscConfig+0x21a>
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	2b0c      	cmp	r3, #12
 80036e6:	d10e      	bne.n	8003706 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	d10b      	bne.n	8003706 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ee:	4b15      	ldr	r3, [pc, #84]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d064      	beq.n	80037c4 <HAL_RCC_OscConfig+0x2f0>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d160      	bne.n	80037c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e2ba      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370e:	d106      	bne.n	800371e <HAL_RCC_OscConfig+0x24a>
 8003710:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0b      	ldr	r2, [pc, #44]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 8003716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	e026      	b.n	800376c <HAL_RCC_OscConfig+0x298>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003726:	d115      	bne.n	8003754 <HAL_RCC_OscConfig+0x280>
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a05      	ldr	r2, [pc, #20]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 800372e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	4b03      	ldr	r3, [pc, #12]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a02      	ldr	r2, [pc, #8]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 800373a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	e014      	b.n	800376c <HAL_RCC_OscConfig+0x298>
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000
 8003748:	080088c0 	.word	0x080088c0
 800374c:	20000000 	.word	0x20000000
 8003750:	20000004 	.word	0x20000004
 8003754:	4ba0      	ldr	r3, [pc, #640]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a9f      	ldr	r2, [pc, #636]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 800375a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	4b9d      	ldr	r3, [pc, #628]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a9c      	ldr	r2, [pc, #624]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 8003766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800376a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d013      	beq.n	800379c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003774:	f7fd feee 	bl	8001554 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800377c:	f7fd feea 	bl	8001554 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b64      	cmp	r3, #100	; 0x64
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e276      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800378e:	4b92      	ldr	r3, [pc, #584]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x2a8>
 800379a:	e014      	b.n	80037c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7fd feda 	bl	8001554 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a4:	f7fd fed6 	bl	8001554 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b64      	cmp	r3, #100	; 0x64
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e262      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037b6:	4b88      	ldr	r3, [pc, #544]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x2d0>
 80037c2:	e000      	b.n	80037c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d060      	beq.n	8003894 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d005      	beq.n	80037e4 <HAL_RCC_OscConfig+0x310>
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	2b0c      	cmp	r3, #12
 80037dc:	d119      	bne.n	8003812 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d116      	bne.n	8003812 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037e4:	4b7c      	ldr	r3, [pc, #496]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_OscConfig+0x328>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e23f      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fc:	4b76      	ldr	r3, [pc, #472]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	061b      	lsls	r3, r3, #24
 800380a:	4973      	ldr	r1, [pc, #460]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 800380c:	4313      	orrs	r3, r2
 800380e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003810:	e040      	b.n	8003894 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d023      	beq.n	8003862 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800381a:	4b6f      	ldr	r3, [pc, #444]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a6e      	ldr	r2, [pc, #440]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 8003820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003826:	f7fd fe95 	bl	8001554 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800382e:	f7fd fe91 	bl	8001554 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e21d      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003840:	4b65      	ldr	r3, [pc, #404]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0f0      	beq.n	800382e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384c:	4b62      	ldr	r3, [pc, #392]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	061b      	lsls	r3, r3, #24
 800385a:	495f      	ldr	r1, [pc, #380]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
 8003860:	e018      	b.n	8003894 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003862:	4b5d      	ldr	r3, [pc, #372]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a5c      	ldr	r2, [pc, #368]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 8003868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800386c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386e:	f7fd fe71 	bl	8001554 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003876:	f7fd fe6d 	bl	8001554 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e1f9      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003888:	4b53      	ldr	r3, [pc, #332]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f0      	bne.n	8003876 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d03c      	beq.n	800391a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01c      	beq.n	80038e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a8:	4b4b      	ldr	r3, [pc, #300]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 80038aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ae:	4a4a      	ldr	r2, [pc, #296]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b8:	f7fd fe4c 	bl	8001554 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038c0:	f7fd fe48 	bl	8001554 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e1d4      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038d2:	4b41      	ldr	r3, [pc, #260]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 80038d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0ef      	beq.n	80038c0 <HAL_RCC_OscConfig+0x3ec>
 80038e0:	e01b      	b.n	800391a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e2:	4b3d      	ldr	r3, [pc, #244]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 80038e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e8:	4a3b      	ldr	r2, [pc, #236]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 80038ea:	f023 0301 	bic.w	r3, r3, #1
 80038ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f2:	f7fd fe2f 	bl	8001554 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038fa:	f7fd fe2b 	bl	8001554 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e1b7      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800390c:	4b32      	ldr	r3, [pc, #200]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 800390e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1ef      	bne.n	80038fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 80a6 	beq.w	8003a74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003928:	2300      	movs	r3, #0
 800392a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800392c:	4b2a      	ldr	r3, [pc, #168]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 800392e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10d      	bne.n	8003954 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003938:	4b27      	ldr	r3, [pc, #156]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 800393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393c:	4a26      	ldr	r2, [pc, #152]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 800393e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003942:	6593      	str	r3, [r2, #88]	; 0x58
 8003944:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 8003946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003950:	2301      	movs	r3, #1
 8003952:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003954:	4b21      	ldr	r3, [pc, #132]	; (80039dc <HAL_RCC_OscConfig+0x508>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d118      	bne.n	8003992 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003960:	4b1e      	ldr	r3, [pc, #120]	; (80039dc <HAL_RCC_OscConfig+0x508>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a1d      	ldr	r2, [pc, #116]	; (80039dc <HAL_RCC_OscConfig+0x508>)
 8003966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396c:	f7fd fdf2 	bl	8001554 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003974:	f7fd fdee 	bl	8001554 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e17a      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003986:	4b15      	ldr	r3, [pc, #84]	; (80039dc <HAL_RCC_OscConfig+0x508>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d108      	bne.n	80039ac <HAL_RCC_OscConfig+0x4d8>
 800399a:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 800399c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a0:	4a0d      	ldr	r2, [pc, #52]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039aa:	e029      	b.n	8003a00 <HAL_RCC_OscConfig+0x52c>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b05      	cmp	r3, #5
 80039b2:	d115      	bne.n	80039e0 <HAL_RCC_OscConfig+0x50c>
 80039b4:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ba:	4a07      	ldr	r2, [pc, #28]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 80039bc:	f043 0304 	orr.w	r3, r3, #4
 80039c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 80039c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ca:	4a03      	ldr	r2, [pc, #12]	; (80039d8 <HAL_RCC_OscConfig+0x504>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039d4:	e014      	b.n	8003a00 <HAL_RCC_OscConfig+0x52c>
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40007000 	.word	0x40007000
 80039e0:	4b9c      	ldr	r3, [pc, #624]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 80039e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e6:	4a9b      	ldr	r2, [pc, #620]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039f0:	4b98      	ldr	r3, [pc, #608]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	4a97      	ldr	r2, [pc, #604]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 80039f8:	f023 0304 	bic.w	r3, r3, #4
 80039fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d016      	beq.n	8003a36 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a08:	f7fd fda4 	bl	8001554 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a10:	f7fd fda0 	bl	8001554 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e12a      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a26:	4b8b      	ldr	r3, [pc, #556]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0ed      	beq.n	8003a10 <HAL_RCC_OscConfig+0x53c>
 8003a34:	e015      	b.n	8003a62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a36:	f7fd fd8d 	bl	8001554 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a3c:	e00a      	b.n	8003a54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a3e:	f7fd fd89 	bl	8001554 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e113      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a54:	4b7f      	ldr	r3, [pc, #508]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1ed      	bne.n	8003a3e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a62:	7ffb      	ldrb	r3, [r7, #31]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d105      	bne.n	8003a74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a68:	4b7a      	ldr	r3, [pc, #488]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6c:	4a79      	ldr	r2, [pc, #484]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a72:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 80fe 	beq.w	8003c7a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	f040 80d0 	bne.w	8003c28 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a88:	4b72      	ldr	r3, [pc, #456]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f003 0203 	and.w	r2, r3, #3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d130      	bne.n	8003afe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d127      	bne.n	8003afe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d11f      	bne.n	8003afe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ac8:	2a07      	cmp	r2, #7
 8003aca:	bf14      	ite	ne
 8003acc:	2201      	movne	r2, #1
 8003ace:	2200      	moveq	r2, #0
 8003ad0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d113      	bne.n	8003afe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae0:	085b      	lsrs	r3, r3, #1
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d109      	bne.n	8003afe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	085b      	lsrs	r3, r3, #1
 8003af6:	3b01      	subs	r3, #1
 8003af8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d06e      	beq.n	8003bdc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b0c      	cmp	r3, #12
 8003b02:	d069      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b04:	4b53      	ldr	r3, [pc, #332]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d105      	bne.n	8003b1c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b10:	4b50      	ldr	r3, [pc, #320]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0ad      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b20:	4b4c      	ldr	r3, [pc, #304]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a4b      	ldr	r2, [pc, #300]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b2a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b2c:	f7fd fd12 	bl	8001554 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fd fd0e 	bl	8001554 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e09a      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b46:	4b43      	ldr	r3, [pc, #268]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b52:	4b40      	ldr	r3, [pc, #256]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	4b40      	ldr	r3, [pc, #256]	; (8003c58 <HAL_RCC_OscConfig+0x784>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b62:	3a01      	subs	r2, #1
 8003b64:	0112      	lsls	r2, r2, #4
 8003b66:	4311      	orrs	r1, r2
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b6c:	0212      	lsls	r2, r2, #8
 8003b6e:	4311      	orrs	r1, r2
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b74:	0852      	lsrs	r2, r2, #1
 8003b76:	3a01      	subs	r2, #1
 8003b78:	0552      	lsls	r2, r2, #21
 8003b7a:	4311      	orrs	r1, r2
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b80:	0852      	lsrs	r2, r2, #1
 8003b82:	3a01      	subs	r2, #1
 8003b84:	0652      	lsls	r2, r2, #25
 8003b86:	4311      	orrs	r1, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b8c:	0912      	lsrs	r2, r2, #4
 8003b8e:	0452      	lsls	r2, r2, #17
 8003b90:	430a      	orrs	r2, r1
 8003b92:	4930      	ldr	r1, [pc, #192]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b98:	4b2e      	ldr	r3, [pc, #184]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a2d      	ldr	r2, [pc, #180]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ba2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ba4:	4b2b      	ldr	r3, [pc, #172]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	4a2a      	ldr	r2, [pc, #168]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bb0:	f7fd fcd0 	bl	8001554 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7fd fccc 	bl	8001554 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e058      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bca:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bd6:	e050      	b.n	8003c7a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e04f      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bdc:	4b1d      	ldr	r3, [pc, #116]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d148      	bne.n	8003c7a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003be8:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a19      	ldr	r2, [pc, #100]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bf2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bf4:	4b17      	ldr	r3, [pc, #92]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4a16      	ldr	r2, [pc, #88]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bfe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c00:	f7fd fca8 	bl	8001554 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fd fca4 	bl	8001554 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e030      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1a:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x734>
 8003c26:	e028      	b.n	8003c7a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	2b0c      	cmp	r3, #12
 8003c2c:	d023      	beq.n	8003c76 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2e:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a08      	ldr	r2, [pc, #32]	; (8003c54 <HAL_RCC_OscConfig+0x780>)
 8003c34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3a:	f7fd fc8b 	bl	8001554 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c40:	e00c      	b.n	8003c5c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c42:	f7fd fc87 	bl	8001554 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d905      	bls.n	8003c5c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e013      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
 8003c54:	40021000 	.word	0x40021000
 8003c58:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c5c:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <HAL_RCC_OscConfig+0x7b0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1ec      	bne.n	8003c42 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c68:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <HAL_RCC_OscConfig+0x7b0>)
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	4905      	ldr	r1, [pc, #20]	; (8003c84 <HAL_RCC_OscConfig+0x7b0>)
 8003c6e:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <HAL_RCC_OscConfig+0x7b4>)
 8003c70:	4013      	ands	r3, r2
 8003c72:	60cb      	str	r3, [r1, #12]
 8003c74:	e001      	b.n	8003c7a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3720      	adds	r7, #32
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40021000 	.word	0x40021000
 8003c88:	feeefffc 	.word	0xfeeefffc

08003c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0e7      	b.n	8003e70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca0:	4b75      	ldr	r3, [pc, #468]	; (8003e78 <HAL_RCC_ClockConfig+0x1ec>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d910      	bls.n	8003cd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cae:	4b72      	ldr	r3, [pc, #456]	; (8003e78 <HAL_RCC_ClockConfig+0x1ec>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 0207 	bic.w	r2, r3, #7
 8003cb6:	4970      	ldr	r1, [pc, #448]	; (8003e78 <HAL_RCC_ClockConfig+0x1ec>)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b6e      	ldr	r3, [pc, #440]	; (8003e78 <HAL_RCC_ClockConfig+0x1ec>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e0cf      	b.n	8003e70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d010      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	4b66      	ldr	r3, [pc, #408]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d908      	bls.n	8003cfe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cec:	4b63      	ldr	r3, [pc, #396]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4960      	ldr	r1, [pc, #384]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d04c      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d107      	bne.n	8003d22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d12:	4b5a      	ldr	r3, [pc, #360]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d121      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e0a6      	b.n	8003e70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d107      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d2a:	4b54      	ldr	r3, [pc, #336]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d115      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e09a      	b.n	8003e70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d107      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d42:	4b4e      	ldr	r3, [pc, #312]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d109      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e08e      	b.n	8003e70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d52:	4b4a      	ldr	r3, [pc, #296]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e086      	b.n	8003e70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d62:	4b46      	ldr	r3, [pc, #280]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f023 0203 	bic.w	r2, r3, #3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	4943      	ldr	r1, [pc, #268]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d74:	f7fd fbee 	bl	8001554 <HAL_GetTick>
 8003d78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7a:	e00a      	b.n	8003d92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d7c:	f7fd fbea 	bl	8001554 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e06e      	b.n	8003e70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d92:	4b3a      	ldr	r3, [pc, #232]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 020c 	and.w	r2, r3, #12
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d1eb      	bne.n	8003d7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d010      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	4b31      	ldr	r3, [pc, #196]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d208      	bcs.n	8003dd2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc0:	4b2e      	ldr	r3, [pc, #184]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	492b      	ldr	r1, [pc, #172]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd2:	4b29      	ldr	r3, [pc, #164]	; (8003e78 <HAL_RCC_ClockConfig+0x1ec>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d210      	bcs.n	8003e02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de0:	4b25      	ldr	r3, [pc, #148]	; (8003e78 <HAL_RCC_ClockConfig+0x1ec>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f023 0207 	bic.w	r2, r3, #7
 8003de8:	4923      	ldr	r1, [pc, #140]	; (8003e78 <HAL_RCC_ClockConfig+0x1ec>)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df0:	4b21      	ldr	r3, [pc, #132]	; (8003e78 <HAL_RCC_ClockConfig+0x1ec>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d001      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e036      	b.n	8003e70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e0e:	4b1b      	ldr	r3, [pc, #108]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	4918      	ldr	r1, [pc, #96]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d009      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e2c:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4910      	ldr	r1, [pc, #64]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e40:	f000 f824 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8003e44:	4602      	mov	r2, r0
 8003e46:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	091b      	lsrs	r3, r3, #4
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	490b      	ldr	r1, [pc, #44]	; (8003e80 <HAL_RCC_ClockConfig+0x1f4>)
 8003e52:	5ccb      	ldrb	r3, [r1, r3]
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	fa22 f303 	lsr.w	r3, r2, r3
 8003e5c:	4a09      	ldr	r2, [pc, #36]	; (8003e84 <HAL_RCC_ClockConfig+0x1f8>)
 8003e5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e60:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <HAL_RCC_ClockConfig+0x1fc>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fd fb25 	bl	80014b4 <HAL_InitTick>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e6e:	7afb      	ldrb	r3, [r7, #11]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40022000 	.word	0x40022000
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	080088c0 	.word	0x080088c0
 8003e84:	20000000 	.word	0x20000000
 8003e88:	20000004 	.word	0x20000004

08003e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b089      	sub	sp, #36	; 0x24
 8003e90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
 8003e96:	2300      	movs	r3, #0
 8003e98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e9a:	4b3e      	ldr	r3, [pc, #248]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 030c 	and.w	r3, r3, #12
 8003ea2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ea4:	4b3b      	ldr	r3, [pc, #236]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2b0c      	cmp	r3, #12
 8003eb8:	d121      	bne.n	8003efe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d11e      	bne.n	8003efe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ec0:	4b34      	ldr	r3, [pc, #208]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d107      	bne.n	8003edc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ecc:	4b31      	ldr	r3, [pc, #196]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	e005      	b.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003edc:	4b2d      	ldr	r3, [pc, #180]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ee8:	4a2b      	ldr	r2, [pc, #172]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ef0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10d      	bne.n	8003f14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003efc:	e00a      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d102      	bne.n	8003f0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f04:	4b25      	ldr	r3, [pc, #148]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003f06:	61bb      	str	r3, [r7, #24]
 8003f08:	e004      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f10:	4b23      	ldr	r3, [pc, #140]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	2b0c      	cmp	r3, #12
 8003f18:	d134      	bne.n	8003f84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f1a:	4b1e      	ldr	r3, [pc, #120]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d003      	beq.n	8003f32 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b03      	cmp	r3, #3
 8003f2e:	d003      	beq.n	8003f38 <HAL_RCC_GetSysClockFreq+0xac>
 8003f30:	e005      	b.n	8003f3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f32:	4b1a      	ldr	r3, [pc, #104]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003f34:	617b      	str	r3, [r7, #20]
      break;
 8003f36:	e005      	b.n	8003f44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f38:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f3a:	617b      	str	r3, [r7, #20]
      break;
 8003f3c:	e002      	b.n	8003f44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	617b      	str	r3, [r7, #20]
      break;
 8003f42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f44:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	3301      	adds	r3, #1
 8003f50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f52:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	0a1b      	lsrs	r3, r3, #8
 8003f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	fb03 f202 	mul.w	r2, r3, r2
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	0e5b      	lsrs	r3, r3, #25
 8003f70:	f003 0303 	and.w	r3, r3, #3
 8003f74:	3301      	adds	r3, #1
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f84:	69bb      	ldr	r3, [r7, #24]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3724      	adds	r7, #36	; 0x24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40021000 	.word	0x40021000
 8003f98:	080088d8 	.word	0x080088d8
 8003f9c:	00f42400 	.word	0x00f42400
 8003fa0:	007a1200 	.word	0x007a1200

08003fa4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa8:	4b03      	ldr	r3, [pc, #12]	; (8003fb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003faa:	681b      	ldr	r3, [r3, #0]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	20000000 	.word	0x20000000

08003fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fc0:	f7ff fff0 	bl	8003fa4 <HAL_RCC_GetHCLKFreq>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	0a1b      	lsrs	r3, r3, #8
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	4904      	ldr	r1, [pc, #16]	; (8003fe4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fd2:	5ccb      	ldrb	r3, [r1, r3]
 8003fd4:	f003 031f 	and.w	r3, r3, #31
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	080088d0 	.word	0x080088d0

08003fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003fec:	f7ff ffda 	bl	8003fa4 <HAL_RCC_GetHCLKFreq>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4b06      	ldr	r3, [pc, #24]	; (800400c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	0adb      	lsrs	r3, r3, #11
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	4904      	ldr	r1, [pc, #16]	; (8004010 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ffe:	5ccb      	ldrb	r3, [r1, r3]
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004008:	4618      	mov	r0, r3
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40021000 	.word	0x40021000
 8004010:	080088d0 	.word	0x080088d0

08004014 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800401c:	2300      	movs	r3, #0
 800401e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004020:	4b2a      	ldr	r3, [pc, #168]	; (80040cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800402c:	f7ff f922 	bl	8003274 <HAL_PWREx_GetVoltageRange>
 8004030:	6178      	str	r0, [r7, #20]
 8004032:	e014      	b.n	800405e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004034:	4b25      	ldr	r3, [pc, #148]	; (80040cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004038:	4a24      	ldr	r2, [pc, #144]	; (80040cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800403a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403e:	6593      	str	r3, [r2, #88]	; 0x58
 8004040:	4b22      	ldr	r3, [pc, #136]	; (80040cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800404c:	f7ff f912 	bl	8003274 <HAL_PWREx_GetVoltageRange>
 8004050:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004052:	4b1e      	ldr	r3, [pc, #120]	; (80040cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004056:	4a1d      	ldr	r2, [pc, #116]	; (80040cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800405c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004064:	d10b      	bne.n	800407e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b80      	cmp	r3, #128	; 0x80
 800406a:	d919      	bls.n	80040a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2ba0      	cmp	r3, #160	; 0xa0
 8004070:	d902      	bls.n	8004078 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004072:	2302      	movs	r3, #2
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	e013      	b.n	80040a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004078:	2301      	movs	r3, #1
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	e010      	b.n	80040a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b80      	cmp	r3, #128	; 0x80
 8004082:	d902      	bls.n	800408a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004084:	2303      	movs	r3, #3
 8004086:	613b      	str	r3, [r7, #16]
 8004088:	e00a      	b.n	80040a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b80      	cmp	r3, #128	; 0x80
 800408e:	d102      	bne.n	8004096 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004090:	2302      	movs	r3, #2
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	e004      	b.n	80040a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b70      	cmp	r3, #112	; 0x70
 800409a:	d101      	bne.n	80040a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800409c:	2301      	movs	r3, #1
 800409e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f023 0207 	bic.w	r2, r3, #7
 80040a8:	4909      	ldr	r1, [pc, #36]	; (80040d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040b0:	4b07      	ldr	r3, [pc, #28]	; (80040d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d001      	beq.n	80040c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000
 80040d0:	40022000 	.word	0x40022000

080040d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040dc:	2300      	movs	r3, #0
 80040de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040e0:	2300      	movs	r3, #0
 80040e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d041      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040f8:	d02a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040fe:	d824      	bhi.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004100:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004104:	d008      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004106:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800410a:	d81e      	bhi.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004114:	d010      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004116:	e018      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004118:	4b86      	ldr	r3, [pc, #536]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4a85      	ldr	r2, [pc, #532]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800411e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004122:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004124:	e015      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3304      	adds	r3, #4
 800412a:	2100      	movs	r1, #0
 800412c:	4618      	mov	r0, r3
 800412e:	f000 facb 	bl	80046c8 <RCCEx_PLLSAI1_Config>
 8004132:	4603      	mov	r3, r0
 8004134:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004136:	e00c      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3320      	adds	r3, #32
 800413c:	2100      	movs	r1, #0
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fbb6 	bl	80048b0 <RCCEx_PLLSAI2_Config>
 8004144:	4603      	mov	r3, r0
 8004146:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004148:	e003      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	74fb      	strb	r3, [r7, #19]
      break;
 800414e:	e000      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004152:	7cfb      	ldrb	r3, [r7, #19]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004158:	4b76      	ldr	r3, [pc, #472]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004166:	4973      	ldr	r1, [pc, #460]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800416e:	e001      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d041      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004184:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004188:	d02a      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800418a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800418e:	d824      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004190:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004194:	d008      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004196:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800419a:	d81e      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80041a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041a4:	d010      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041a6:	e018      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041a8:	4b62      	ldr	r3, [pc, #392]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4a61      	ldr	r2, [pc, #388]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041b4:	e015      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3304      	adds	r3, #4
 80041ba:	2100      	movs	r1, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fa83 	bl	80046c8 <RCCEx_PLLSAI1_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041c6:	e00c      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3320      	adds	r3, #32
 80041cc:	2100      	movs	r1, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fb6e 	bl	80048b0 <RCCEx_PLLSAI2_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041d8:	e003      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	74fb      	strb	r3, [r7, #19]
      break;
 80041de:	e000      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80041e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041e2:	7cfb      	ldrb	r3, [r7, #19]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10b      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041e8:	4b52      	ldr	r3, [pc, #328]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041f6:	494f      	ldr	r1, [pc, #316]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041fe:	e001      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004200:	7cfb      	ldrb	r3, [r7, #19]
 8004202:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 80a0 	beq.w	8004352 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004212:	2300      	movs	r3, #0
 8004214:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004216:	4b47      	ldr	r3, [pc, #284]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00d      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422c:	4b41      	ldr	r3, [pc, #260]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800422e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004230:	4a40      	ldr	r2, [pc, #256]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004236:	6593      	str	r3, [r2, #88]	; 0x58
 8004238:	4b3e      	ldr	r3, [pc, #248]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004244:	2301      	movs	r3, #1
 8004246:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004248:	4b3b      	ldr	r3, [pc, #236]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a3a      	ldr	r2, [pc, #232]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800424e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004252:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004254:	f7fd f97e 	bl	8001554 <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800425a:	e009      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800425c:	f7fd f97a 	bl	8001554 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d902      	bls.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	74fb      	strb	r3, [r7, #19]
        break;
 800426e:	e005      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004270:	4b31      	ldr	r3, [pc, #196]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0ef      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800427c:	7cfb      	ldrb	r3, [r7, #19]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d15c      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004282:	4b2c      	ldr	r3, [pc, #176]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01f      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	429a      	cmp	r2, r3
 800429e:	d019      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042a0:	4b24      	ldr	r3, [pc, #144]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042ac:	4b21      	ldr	r3, [pc, #132]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	4a20      	ldr	r2, [pc, #128]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042bc:	4b1d      	ldr	r3, [pc, #116]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042cc:	4a19      	ldr	r2, [pc, #100]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d016      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042de:	f7fd f939 	bl	8001554 <HAL_GetTick>
 80042e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e4:	e00b      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e6:	f7fd f935 	bl	8001554 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d902      	bls.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	74fb      	strb	r3, [r7, #19]
            break;
 80042fc:	e006      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042fe:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0ec      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800430c:	7cfb      	ldrb	r3, [r7, #19]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10c      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004322:	4904      	ldr	r1, [pc, #16]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800432a:	e009      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800432c:	7cfb      	ldrb	r3, [r7, #19]
 800432e:	74bb      	strb	r3, [r7, #18]
 8004330:	e006      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004332:	bf00      	nop
 8004334:	40021000 	.word	0x40021000
 8004338:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433c:	7cfb      	ldrb	r3, [r7, #19]
 800433e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004340:	7c7b      	ldrb	r3, [r7, #17]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d105      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004346:	4b9e      	ldr	r3, [pc, #632]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434a:	4a9d      	ldr	r2, [pc, #628]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004350:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800435e:	4b98      	ldr	r3, [pc, #608]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f023 0203 	bic.w	r2, r3, #3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	4994      	ldr	r1, [pc, #592]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004380:	4b8f      	ldr	r3, [pc, #572]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004386:	f023 020c 	bic.w	r2, r3, #12
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438e:	498c      	ldr	r1, [pc, #560]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043a2:	4b87      	ldr	r3, [pc, #540]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	4983      	ldr	r1, [pc, #524]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00a      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043c4:	4b7e      	ldr	r3, [pc, #504]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	497b      	ldr	r1, [pc, #492]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043e6:	4b76      	ldr	r3, [pc, #472]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f4:	4972      	ldr	r1, [pc, #456]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00a      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004408:	4b6d      	ldr	r3, [pc, #436]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004416:	496a      	ldr	r1, [pc, #424]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800442a:	4b65      	ldr	r3, [pc, #404]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004430:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004438:	4961      	ldr	r1, [pc, #388]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00a      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800444c:	4b5c      	ldr	r3, [pc, #368]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004452:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445a:	4959      	ldr	r1, [pc, #356]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800446e:	4b54      	ldr	r3, [pc, #336]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004474:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447c:	4950      	ldr	r1, [pc, #320]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004490:	4b4b      	ldr	r3, [pc, #300]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004496:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	4948      	ldr	r1, [pc, #288]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044b2:	4b43      	ldr	r3, [pc, #268]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c0:	493f      	ldr	r1, [pc, #252]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d028      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044d4:	4b3a      	ldr	r3, [pc, #232]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044e2:	4937      	ldr	r1, [pc, #220]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044f2:	d106      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044f4:	4b32      	ldr	r3, [pc, #200]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4a31      	ldr	r2, [pc, #196]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044fe:	60d3      	str	r3, [r2, #12]
 8004500:	e011      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004506:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800450a:	d10c      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3304      	adds	r3, #4
 8004510:	2101      	movs	r1, #1
 8004512:	4618      	mov	r0, r3
 8004514:	f000 f8d8 	bl	80046c8 <RCCEx_PLLSAI1_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800451c:	7cfb      	ldrb	r3, [r7, #19]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004522:	7cfb      	ldrb	r3, [r7, #19]
 8004524:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d028      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004532:	4b23      	ldr	r3, [pc, #140]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004538:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004540:	491f      	ldr	r1, [pc, #124]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004550:	d106      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004552:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	4a1a      	ldr	r2, [pc, #104]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800455c:	60d3      	str	r3, [r2, #12]
 800455e:	e011      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004564:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004568:	d10c      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3304      	adds	r3, #4
 800456e:	2101      	movs	r1, #1
 8004570:	4618      	mov	r0, r3
 8004572:	f000 f8a9 	bl	80046c8 <RCCEx_PLLSAI1_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800457a:	7cfb      	ldrb	r3, [r7, #19]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004580:	7cfb      	ldrb	r3, [r7, #19]
 8004582:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d02b      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004590:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004596:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459e:	4908      	ldr	r1, [pc, #32]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045ae:	d109      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045b0:	4b03      	ldr	r3, [pc, #12]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4a02      	ldr	r2, [pc, #8]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ba:	60d3      	str	r3, [r2, #12]
 80045bc:	e014      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3304      	adds	r3, #4
 80045d2:	2101      	movs	r1, #1
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 f877 	bl	80046c8 <RCCEx_PLLSAI1_Config>
 80045da:	4603      	mov	r3, r0
 80045dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045de:	7cfb      	ldrb	r3, [r7, #19]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80045e4:	7cfb      	ldrb	r3, [r7, #19]
 80045e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d02f      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045f4:	4b2b      	ldr	r3, [pc, #172]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004602:	4928      	ldr	r1, [pc, #160]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800460e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004612:	d10d      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3304      	adds	r3, #4
 8004618:	2102      	movs	r1, #2
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f854 	bl	80046c8 <RCCEx_PLLSAI1_Config>
 8004620:	4603      	mov	r3, r0
 8004622:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004624:	7cfb      	ldrb	r3, [r7, #19]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d014      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800462a:	7cfb      	ldrb	r3, [r7, #19]
 800462c:	74bb      	strb	r3, [r7, #18]
 800462e:	e011      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004638:	d10c      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3320      	adds	r3, #32
 800463e:	2102      	movs	r1, #2
 8004640:	4618      	mov	r0, r3
 8004642:	f000 f935 	bl	80048b0 <RCCEx_PLLSAI2_Config>
 8004646:	4603      	mov	r3, r0
 8004648:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800464a:	7cfb      	ldrb	r3, [r7, #19]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004650:	7cfb      	ldrb	r3, [r7, #19]
 8004652:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004660:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004666:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800466e:	490d      	ldr	r1, [pc, #52]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004682:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004688:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004692:	4904      	ldr	r1, [pc, #16]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800469a:	7cbb      	ldrb	r3, [r7, #18]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40021000 	.word	0x40021000

080046a8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a04      	ldr	r2, [pc, #16]	; (80046c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80046b2:	f043 0304 	orr.w	r3, r3, #4
 80046b6:	6013      	str	r3, [r2, #0]
}
 80046b8:	bf00      	nop
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40021000 	.word	0x40021000

080046c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046d6:	4b75      	ldr	r3, [pc, #468]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d018      	beq.n	8004714 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046e2:	4b72      	ldr	r3, [pc, #456]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f003 0203 	and.w	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d10d      	bne.n	800470e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
       ||
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80046fa:	4b6c      	ldr	r3, [pc, #432]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	091b      	lsrs	r3, r3, #4
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
       ||
 800470a:	429a      	cmp	r2, r3
 800470c:	d047      	beq.n	800479e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	73fb      	strb	r3, [r7, #15]
 8004712:	e044      	b.n	800479e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b03      	cmp	r3, #3
 800471a:	d018      	beq.n	800474e <RCCEx_PLLSAI1_Config+0x86>
 800471c:	2b03      	cmp	r3, #3
 800471e:	d825      	bhi.n	800476c <RCCEx_PLLSAI1_Config+0xa4>
 8004720:	2b01      	cmp	r3, #1
 8004722:	d002      	beq.n	800472a <RCCEx_PLLSAI1_Config+0x62>
 8004724:	2b02      	cmp	r3, #2
 8004726:	d009      	beq.n	800473c <RCCEx_PLLSAI1_Config+0x74>
 8004728:	e020      	b.n	800476c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800472a:	4b60      	ldr	r3, [pc, #384]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d11d      	bne.n	8004772 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800473a:	e01a      	b.n	8004772 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800473c:	4b5b      	ldr	r3, [pc, #364]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004744:	2b00      	cmp	r3, #0
 8004746:	d116      	bne.n	8004776 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800474c:	e013      	b.n	8004776 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800474e:	4b57      	ldr	r3, [pc, #348]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10f      	bne.n	800477a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800475a:	4b54      	ldr	r3, [pc, #336]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800476a:	e006      	b.n	800477a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
      break;
 8004770:	e004      	b.n	800477c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004772:	bf00      	nop
 8004774:	e002      	b.n	800477c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004776:	bf00      	nop
 8004778:	e000      	b.n	800477c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800477a:	bf00      	nop
    }

    if(status == HAL_OK)
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10d      	bne.n	800479e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004782:	4b4a      	ldr	r3, [pc, #296]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6819      	ldr	r1, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	3b01      	subs	r3, #1
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	430b      	orrs	r3, r1
 8004798:	4944      	ldr	r1, [pc, #272]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800479a:	4313      	orrs	r3, r2
 800479c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d17d      	bne.n	80048a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047a4:	4b41      	ldr	r3, [pc, #260]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a40      	ldr	r2, [pc, #256]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80047aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b0:	f7fc fed0 	bl	8001554 <HAL_GetTick>
 80047b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047b6:	e009      	b.n	80047cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047b8:	f7fc fecc 	bl	8001554 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d902      	bls.n	80047cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	73fb      	strb	r3, [r7, #15]
        break;
 80047ca:	e005      	b.n	80047d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047cc:	4b37      	ldr	r3, [pc, #220]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1ef      	bne.n	80047b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d160      	bne.n	80048a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d111      	bne.n	8004808 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047e4:	4b31      	ldr	r3, [pc, #196]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6892      	ldr	r2, [r2, #8]
 80047f4:	0211      	lsls	r1, r2, #8
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	68d2      	ldr	r2, [r2, #12]
 80047fa:	0912      	lsrs	r2, r2, #4
 80047fc:	0452      	lsls	r2, r2, #17
 80047fe:	430a      	orrs	r2, r1
 8004800:	492a      	ldr	r1, [pc, #168]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004802:	4313      	orrs	r3, r2
 8004804:	610b      	str	r3, [r1, #16]
 8004806:	e027      	b.n	8004858 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d112      	bne.n	8004834 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800480e:	4b27      	ldr	r3, [pc, #156]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004816:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6892      	ldr	r2, [r2, #8]
 800481e:	0211      	lsls	r1, r2, #8
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6912      	ldr	r2, [r2, #16]
 8004824:	0852      	lsrs	r2, r2, #1
 8004826:	3a01      	subs	r2, #1
 8004828:	0552      	lsls	r2, r2, #21
 800482a:	430a      	orrs	r2, r1
 800482c:	491f      	ldr	r1, [pc, #124]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800482e:	4313      	orrs	r3, r2
 8004830:	610b      	str	r3, [r1, #16]
 8004832:	e011      	b.n	8004858 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004834:	4b1d      	ldr	r3, [pc, #116]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800483c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6892      	ldr	r2, [r2, #8]
 8004844:	0211      	lsls	r1, r2, #8
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6952      	ldr	r2, [r2, #20]
 800484a:	0852      	lsrs	r2, r2, #1
 800484c:	3a01      	subs	r2, #1
 800484e:	0652      	lsls	r2, r2, #25
 8004850:	430a      	orrs	r2, r1
 8004852:	4916      	ldr	r1, [pc, #88]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004854:	4313      	orrs	r3, r2
 8004856:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004858:	4b14      	ldr	r3, [pc, #80]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a13      	ldr	r2, [pc, #76]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800485e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004862:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fc fe76 	bl	8001554 <HAL_GetTick>
 8004868:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800486a:	e009      	b.n	8004880 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800486c:	f7fc fe72 	bl	8001554 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d902      	bls.n	8004880 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	73fb      	strb	r3, [r7, #15]
          break;
 800487e:	e005      	b.n	800488c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004880:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0ef      	beq.n	800486c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800488c:	7bfb      	ldrb	r3, [r7, #15]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004892:	4b06      	ldr	r3, [pc, #24]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004894:	691a      	ldr	r2, [r3, #16]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	4904      	ldr	r1, [pc, #16]	; (80048ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800489c:	4313      	orrs	r3, r2
 800489e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40021000 	.word	0x40021000

080048b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048be:	4b6a      	ldr	r3, [pc, #424]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d018      	beq.n	80048fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80048ca:	4b67      	ldr	r3, [pc, #412]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f003 0203 	and.w	r2, r3, #3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d10d      	bne.n	80048f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
       ||
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d009      	beq.n	80048f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80048e2:	4b61      	ldr	r3, [pc, #388]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
       ||
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d047      	beq.n	8004986 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	73fb      	strb	r3, [r7, #15]
 80048fa:	e044      	b.n	8004986 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b03      	cmp	r3, #3
 8004902:	d018      	beq.n	8004936 <RCCEx_PLLSAI2_Config+0x86>
 8004904:	2b03      	cmp	r3, #3
 8004906:	d825      	bhi.n	8004954 <RCCEx_PLLSAI2_Config+0xa4>
 8004908:	2b01      	cmp	r3, #1
 800490a:	d002      	beq.n	8004912 <RCCEx_PLLSAI2_Config+0x62>
 800490c:	2b02      	cmp	r3, #2
 800490e:	d009      	beq.n	8004924 <RCCEx_PLLSAI2_Config+0x74>
 8004910:	e020      	b.n	8004954 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004912:	4b55      	ldr	r3, [pc, #340]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d11d      	bne.n	800495a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004922:	e01a      	b.n	800495a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004924:	4b50      	ldr	r3, [pc, #320]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800492c:	2b00      	cmp	r3, #0
 800492e:	d116      	bne.n	800495e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004934:	e013      	b.n	800495e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004936:	4b4c      	ldr	r3, [pc, #304]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10f      	bne.n	8004962 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004942:	4b49      	ldr	r3, [pc, #292]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004952:	e006      	b.n	8004962 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	73fb      	strb	r3, [r7, #15]
      break;
 8004958:	e004      	b.n	8004964 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800495a:	bf00      	nop
 800495c:	e002      	b.n	8004964 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800495e:	bf00      	nop
 8004960:	e000      	b.n	8004964 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004962:	bf00      	nop
    }

    if(status == HAL_OK)
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10d      	bne.n	8004986 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800496a:	4b3f      	ldr	r3, [pc, #252]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6819      	ldr	r1, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	3b01      	subs	r3, #1
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	430b      	orrs	r3, r1
 8004980:	4939      	ldr	r1, [pc, #228]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004982:	4313      	orrs	r3, r2
 8004984:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d167      	bne.n	8004a5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800498c:	4b36      	ldr	r3, [pc, #216]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a35      	ldr	r2, [pc, #212]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004998:	f7fc fddc 	bl	8001554 <HAL_GetTick>
 800499c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800499e:	e009      	b.n	80049b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049a0:	f7fc fdd8 	bl	8001554 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d902      	bls.n	80049b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	73fb      	strb	r3, [r7, #15]
        break;
 80049b2:	e005      	b.n	80049c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049b4:	4b2c      	ldr	r3, [pc, #176]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1ef      	bne.n	80049a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d14a      	bne.n	8004a5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d111      	bne.n	80049f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049cc:	4b26      	ldr	r3, [pc, #152]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80049d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6892      	ldr	r2, [r2, #8]
 80049dc:	0211      	lsls	r1, r2, #8
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	68d2      	ldr	r2, [r2, #12]
 80049e2:	0912      	lsrs	r2, r2, #4
 80049e4:	0452      	lsls	r2, r2, #17
 80049e6:	430a      	orrs	r2, r1
 80049e8:	491f      	ldr	r1, [pc, #124]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	614b      	str	r3, [r1, #20]
 80049ee:	e011      	b.n	8004a14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049f0:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6892      	ldr	r2, [r2, #8]
 8004a00:	0211      	lsls	r1, r2, #8
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6912      	ldr	r2, [r2, #16]
 8004a06:	0852      	lsrs	r2, r2, #1
 8004a08:	3a01      	subs	r2, #1
 8004a0a:	0652      	lsls	r2, r2, #25
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	4916      	ldr	r1, [pc, #88]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a14:	4b14      	ldr	r3, [pc, #80]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a13      	ldr	r2, [pc, #76]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a20:	f7fc fd98 	bl	8001554 <HAL_GetTick>
 8004a24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a26:	e009      	b.n	8004a3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a28:	f7fc fd94 	bl	8001554 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d902      	bls.n	8004a3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	73fb      	strb	r3, [r7, #15]
          break;
 8004a3a:	e005      	b.n	8004a48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0ef      	beq.n	8004a28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a4e:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a50:	695a      	ldr	r2, [r3, #20]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	4904      	ldr	r1, [pc, #16]	; (8004a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	40021000 	.word	0x40021000

08004a6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e095      	b.n	8004baa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d108      	bne.n	8004a98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a8e:	d009      	beq.n	8004aa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	61da      	str	r2, [r3, #28]
 8004a96:	e005      	b.n	8004aa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fc fb28 	bl	8001114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ada:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ae4:	d902      	bls.n	8004aec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	e002      	b.n	8004af2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004af0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004afa:	d007      	beq.n	8004b0c <HAL_SPI_Init+0xa0>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b04:	d002      	beq.n	8004b0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4e:	ea42 0103 	orr.w	r1, r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	0c1b      	lsrs	r3, r3, #16
 8004b68:	f003 0204 	and.w	r2, r3, #4
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	f003 0310 	and.w	r3, r3, #16
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b88:	ea42 0103 	orr.w	r1, r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	099b      	lsrs	r3, r3, #6
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10f      	bne.n	8004bf8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	099b      	lsrs	r3, r3, #6
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d004      	beq.n	8004bf8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	4798      	blx	r3
    return;
 8004bf6:	e0d7      	b.n	8004da8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	085b      	lsrs	r3, r3, #1
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <HAL_SPI_IRQHandler+0x66>
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	09db      	lsrs	r3, r3, #7
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d004      	beq.n	8004c1a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	4798      	blx	r3
    return;
 8004c18:	e0c6      	b.n	8004da8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	095b      	lsrs	r3, r3, #5
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10c      	bne.n	8004c40 <HAL_SPI_IRQHandler+0x8c>
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	099b      	lsrs	r3, r3, #6
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d106      	bne.n	8004c40 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	0a1b      	lsrs	r3, r3, #8
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 80b4 	beq.w	8004da8 <HAL_SPI_IRQHandler+0x1f4>
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 80ad 	beq.w	8004da8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	099b      	lsrs	r3, r3, #6
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d023      	beq.n	8004ca2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d011      	beq.n	8004c8a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c6a:	f043 0204 	orr.w	r2, r3, #4
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c72:	2300      	movs	r3, #0
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	e00b      	b.n	8004ca2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	613b      	str	r3, [r7, #16]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	693b      	ldr	r3, [r7, #16]
        return;
 8004ca0:	e082      	b.n	8004da8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	095b      	lsrs	r3, r3, #5
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d014      	beq.n	8004cd8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb2:	f043 0201 	orr.w	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	0a1b      	lsrs	r3, r3, #8
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00c      	beq.n	8004cfe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce8:	f043 0208 	orr.w	r2, r3, #8
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60bb      	str	r3, [r7, #8]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	60bb      	str	r3, [r7, #8]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d04f      	beq.n	8004da6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d14:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d104      	bne.n	8004d32 <HAL_SPI_IRQHandler+0x17e>
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d034      	beq.n	8004d9c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0203 	bic.w	r2, r2, #3
 8004d40:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d011      	beq.n	8004d6e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4e:	4a18      	ldr	r2, [pc, #96]	; (8004db0 <HAL_SPI_IRQHandler+0x1fc>)
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fd fdf2 	bl	8002940 <HAL_DMA_Abort_IT>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d016      	beq.n	8004da4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7a:	4a0d      	ldr	r2, [pc, #52]	; (8004db0 <HAL_SPI_IRQHandler+0x1fc>)
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fd fddc 	bl	8002940 <HAL_DMA_Abort_IT>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004d9a:	e003      	b.n	8004da4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f809 	bl	8004db4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004da2:	e000      	b.n	8004da6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004da4:	bf00      	nop
    return;
 8004da6:	bf00      	nop
  }
}
 8004da8:	3720      	adds	r7, #32
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	08004dc9 	.word	0x08004dc9

08004db4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f7ff ffe5 	bl	8004db4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004dea:	bf00      	nop
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e040      	b.n	8004e86 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d106      	bne.n	8004e1a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7fc f9c1 	bl	800119c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2224      	movs	r2, #36	; 0x24
 8004e1e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0201 	bic.w	r2, r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f82d 	bl	8004e90 <UART_SetConfig>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e022      	b.n	8004e86 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fad9 	bl	8005400 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e5c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e6c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0201 	orr.w	r2, r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fb60 	bl	8005544 <UART_CheckIdleState>
 8004e84:	4603      	mov	r3, r0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e94:	b08a      	sub	sp, #40	; 0x28
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4ba4      	ldr	r3, [pc, #656]	; (8005150 <UART_SetConfig+0x2c0>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a99      	ldr	r2, [pc, #612]	; (8005154 <UART_SetConfig+0x2c4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a90      	ldr	r2, [pc, #576]	; (8005158 <UART_SetConfig+0x2c8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d126      	bne.n	8004f68 <UART_SetConfig+0xd8>
 8004f1a:	4b90      	ldr	r3, [pc, #576]	; (800515c <UART_SetConfig+0x2cc>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d81b      	bhi.n	8004f60 <UART_SetConfig+0xd0>
 8004f28:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <UART_SetConfig+0xa0>)
 8004f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2e:	bf00      	nop
 8004f30:	08004f41 	.word	0x08004f41
 8004f34:	08004f51 	.word	0x08004f51
 8004f38:	08004f49 	.word	0x08004f49
 8004f3c:	08004f59 	.word	0x08004f59
 8004f40:	2301      	movs	r3, #1
 8004f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f46:	e116      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f4e:	e112      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004f50:	2304      	movs	r3, #4
 8004f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f56:	e10e      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004f58:	2308      	movs	r3, #8
 8004f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5e:	e10a      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004f60:	2310      	movs	r3, #16
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f66:	e106      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a7c      	ldr	r2, [pc, #496]	; (8005160 <UART_SetConfig+0x2d0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d138      	bne.n	8004fe4 <UART_SetConfig+0x154>
 8004f72:	4b7a      	ldr	r3, [pc, #488]	; (800515c <UART_SetConfig+0x2cc>)
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f78:	f003 030c 	and.w	r3, r3, #12
 8004f7c:	2b0c      	cmp	r3, #12
 8004f7e:	d82d      	bhi.n	8004fdc <UART_SetConfig+0x14c>
 8004f80:	a201      	add	r2, pc, #4	; (adr r2, 8004f88 <UART_SetConfig+0xf8>)
 8004f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f86:	bf00      	nop
 8004f88:	08004fbd 	.word	0x08004fbd
 8004f8c:	08004fdd 	.word	0x08004fdd
 8004f90:	08004fdd 	.word	0x08004fdd
 8004f94:	08004fdd 	.word	0x08004fdd
 8004f98:	08004fcd 	.word	0x08004fcd
 8004f9c:	08004fdd 	.word	0x08004fdd
 8004fa0:	08004fdd 	.word	0x08004fdd
 8004fa4:	08004fdd 	.word	0x08004fdd
 8004fa8:	08004fc5 	.word	0x08004fc5
 8004fac:	08004fdd 	.word	0x08004fdd
 8004fb0:	08004fdd 	.word	0x08004fdd
 8004fb4:	08004fdd 	.word	0x08004fdd
 8004fb8:	08004fd5 	.word	0x08004fd5
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc2:	e0d8      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fca:	e0d4      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004fcc:	2304      	movs	r3, #4
 8004fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd2:	e0d0      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004fd4:	2308      	movs	r3, #8
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fda:	e0cc      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004fdc:	2310      	movs	r3, #16
 8004fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe2:	e0c8      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a5e      	ldr	r2, [pc, #376]	; (8005164 <UART_SetConfig+0x2d4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d125      	bne.n	800503a <UART_SetConfig+0x1aa>
 8004fee:	4b5b      	ldr	r3, [pc, #364]	; (800515c <UART_SetConfig+0x2cc>)
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ff8:	2b30      	cmp	r3, #48	; 0x30
 8004ffa:	d016      	beq.n	800502a <UART_SetConfig+0x19a>
 8004ffc:	2b30      	cmp	r3, #48	; 0x30
 8004ffe:	d818      	bhi.n	8005032 <UART_SetConfig+0x1a2>
 8005000:	2b20      	cmp	r3, #32
 8005002:	d00a      	beq.n	800501a <UART_SetConfig+0x18a>
 8005004:	2b20      	cmp	r3, #32
 8005006:	d814      	bhi.n	8005032 <UART_SetConfig+0x1a2>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <UART_SetConfig+0x182>
 800500c:	2b10      	cmp	r3, #16
 800500e:	d008      	beq.n	8005022 <UART_SetConfig+0x192>
 8005010:	e00f      	b.n	8005032 <UART_SetConfig+0x1a2>
 8005012:	2300      	movs	r3, #0
 8005014:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005018:	e0ad      	b.n	8005176 <UART_SetConfig+0x2e6>
 800501a:	2302      	movs	r3, #2
 800501c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005020:	e0a9      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005022:	2304      	movs	r3, #4
 8005024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005028:	e0a5      	b.n	8005176 <UART_SetConfig+0x2e6>
 800502a:	2308      	movs	r3, #8
 800502c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005030:	e0a1      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005032:	2310      	movs	r3, #16
 8005034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005038:	e09d      	b.n	8005176 <UART_SetConfig+0x2e6>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a4a      	ldr	r2, [pc, #296]	; (8005168 <UART_SetConfig+0x2d8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d125      	bne.n	8005090 <UART_SetConfig+0x200>
 8005044:	4b45      	ldr	r3, [pc, #276]	; (800515c <UART_SetConfig+0x2cc>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800504e:	2bc0      	cmp	r3, #192	; 0xc0
 8005050:	d016      	beq.n	8005080 <UART_SetConfig+0x1f0>
 8005052:	2bc0      	cmp	r3, #192	; 0xc0
 8005054:	d818      	bhi.n	8005088 <UART_SetConfig+0x1f8>
 8005056:	2b80      	cmp	r3, #128	; 0x80
 8005058:	d00a      	beq.n	8005070 <UART_SetConfig+0x1e0>
 800505a:	2b80      	cmp	r3, #128	; 0x80
 800505c:	d814      	bhi.n	8005088 <UART_SetConfig+0x1f8>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <UART_SetConfig+0x1d8>
 8005062:	2b40      	cmp	r3, #64	; 0x40
 8005064:	d008      	beq.n	8005078 <UART_SetConfig+0x1e8>
 8005066:	e00f      	b.n	8005088 <UART_SetConfig+0x1f8>
 8005068:	2300      	movs	r3, #0
 800506a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800506e:	e082      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005070:	2302      	movs	r3, #2
 8005072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005076:	e07e      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005078:	2304      	movs	r3, #4
 800507a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800507e:	e07a      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005080:	2308      	movs	r3, #8
 8005082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005086:	e076      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005088:	2310      	movs	r3, #16
 800508a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508e:	e072      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a35      	ldr	r2, [pc, #212]	; (800516c <UART_SetConfig+0x2dc>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d12a      	bne.n	80050f0 <UART_SetConfig+0x260>
 800509a:	4b30      	ldr	r3, [pc, #192]	; (800515c <UART_SetConfig+0x2cc>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050a8:	d01a      	beq.n	80050e0 <UART_SetConfig+0x250>
 80050aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ae:	d81b      	bhi.n	80050e8 <UART_SetConfig+0x258>
 80050b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050b4:	d00c      	beq.n	80050d0 <UART_SetConfig+0x240>
 80050b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ba:	d815      	bhi.n	80050e8 <UART_SetConfig+0x258>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <UART_SetConfig+0x238>
 80050c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c4:	d008      	beq.n	80050d8 <UART_SetConfig+0x248>
 80050c6:	e00f      	b.n	80050e8 <UART_SetConfig+0x258>
 80050c8:	2300      	movs	r3, #0
 80050ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ce:	e052      	b.n	8005176 <UART_SetConfig+0x2e6>
 80050d0:	2302      	movs	r3, #2
 80050d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d6:	e04e      	b.n	8005176 <UART_SetConfig+0x2e6>
 80050d8:	2304      	movs	r3, #4
 80050da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050de:	e04a      	b.n	8005176 <UART_SetConfig+0x2e6>
 80050e0:	2308      	movs	r3, #8
 80050e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e6:	e046      	b.n	8005176 <UART_SetConfig+0x2e6>
 80050e8:	2310      	movs	r3, #16
 80050ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ee:	e042      	b.n	8005176 <UART_SetConfig+0x2e6>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a17      	ldr	r2, [pc, #92]	; (8005154 <UART_SetConfig+0x2c4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d13a      	bne.n	8005170 <UART_SetConfig+0x2e0>
 80050fa:	4b18      	ldr	r3, [pc, #96]	; (800515c <UART_SetConfig+0x2cc>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005100:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005104:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005108:	d01a      	beq.n	8005140 <UART_SetConfig+0x2b0>
 800510a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800510e:	d81b      	bhi.n	8005148 <UART_SetConfig+0x2b8>
 8005110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005114:	d00c      	beq.n	8005130 <UART_SetConfig+0x2a0>
 8005116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800511a:	d815      	bhi.n	8005148 <UART_SetConfig+0x2b8>
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <UART_SetConfig+0x298>
 8005120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005124:	d008      	beq.n	8005138 <UART_SetConfig+0x2a8>
 8005126:	e00f      	b.n	8005148 <UART_SetConfig+0x2b8>
 8005128:	2300      	movs	r3, #0
 800512a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512e:	e022      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005130:	2302      	movs	r3, #2
 8005132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005136:	e01e      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005138:	2304      	movs	r3, #4
 800513a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513e:	e01a      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005140:	2308      	movs	r3, #8
 8005142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005146:	e016      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005148:	2310      	movs	r3, #16
 800514a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514e:	e012      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005150:	efff69f3 	.word	0xefff69f3
 8005154:	40008000 	.word	0x40008000
 8005158:	40013800 	.word	0x40013800
 800515c:	40021000 	.word	0x40021000
 8005160:	40004400 	.word	0x40004400
 8005164:	40004800 	.word	0x40004800
 8005168:	40004c00 	.word	0x40004c00
 800516c:	40005000 	.word	0x40005000
 8005170:	2310      	movs	r3, #16
 8005172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a9f      	ldr	r2, [pc, #636]	; (80053f8 <UART_SetConfig+0x568>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d17a      	bne.n	8005276 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005180:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005184:	2b08      	cmp	r3, #8
 8005186:	d824      	bhi.n	80051d2 <UART_SetConfig+0x342>
 8005188:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <UART_SetConfig+0x300>)
 800518a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518e:	bf00      	nop
 8005190:	080051b5 	.word	0x080051b5
 8005194:	080051d3 	.word	0x080051d3
 8005198:	080051bd 	.word	0x080051bd
 800519c:	080051d3 	.word	0x080051d3
 80051a0:	080051c3 	.word	0x080051c3
 80051a4:	080051d3 	.word	0x080051d3
 80051a8:	080051d3 	.word	0x080051d3
 80051ac:	080051d3 	.word	0x080051d3
 80051b0:	080051cb 	.word	0x080051cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051b4:	f7fe ff02 	bl	8003fbc <HAL_RCC_GetPCLK1Freq>
 80051b8:	61f8      	str	r0, [r7, #28]
        break;
 80051ba:	e010      	b.n	80051de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051bc:	4b8f      	ldr	r3, [pc, #572]	; (80053fc <UART_SetConfig+0x56c>)
 80051be:	61fb      	str	r3, [r7, #28]
        break;
 80051c0:	e00d      	b.n	80051de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051c2:	f7fe fe63 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 80051c6:	61f8      	str	r0, [r7, #28]
        break;
 80051c8:	e009      	b.n	80051de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ce:	61fb      	str	r3, [r7, #28]
        break;
 80051d0:	e005      	b.n	80051de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 80fb 	beq.w	80053dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	4413      	add	r3, r2
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d305      	bcc.n	8005202 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d903      	bls.n	800520a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005208:	e0e8      	b.n	80053dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	2200      	movs	r2, #0
 800520e:	461c      	mov	r4, r3
 8005210:	4615      	mov	r5, r2
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	f04f 0300 	mov.w	r3, #0
 800521a:	022b      	lsls	r3, r5, #8
 800521c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005220:	0222      	lsls	r2, r4, #8
 8005222:	68f9      	ldr	r1, [r7, #12]
 8005224:	6849      	ldr	r1, [r1, #4]
 8005226:	0849      	lsrs	r1, r1, #1
 8005228:	2000      	movs	r0, #0
 800522a:	4688      	mov	r8, r1
 800522c:	4681      	mov	r9, r0
 800522e:	eb12 0a08 	adds.w	sl, r2, r8
 8005232:	eb43 0b09 	adc.w	fp, r3, r9
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	603b      	str	r3, [r7, #0]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005244:	4650      	mov	r0, sl
 8005246:	4659      	mov	r1, fp
 8005248:	f7fa ffc2 	bl	80001d0 <__aeabi_uldivmod>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4613      	mov	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800525a:	d308      	bcc.n	800526e <UART_SetConfig+0x3de>
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005262:	d204      	bcs.n	800526e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	60da      	str	r2, [r3, #12]
 800526c:	e0b6      	b.n	80053dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005274:	e0b2      	b.n	80053dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800527e:	d15e      	bne.n	800533e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005284:	2b08      	cmp	r3, #8
 8005286:	d828      	bhi.n	80052da <UART_SetConfig+0x44a>
 8005288:	a201      	add	r2, pc, #4	; (adr r2, 8005290 <UART_SetConfig+0x400>)
 800528a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528e:	bf00      	nop
 8005290:	080052b5 	.word	0x080052b5
 8005294:	080052bd 	.word	0x080052bd
 8005298:	080052c5 	.word	0x080052c5
 800529c:	080052db 	.word	0x080052db
 80052a0:	080052cb 	.word	0x080052cb
 80052a4:	080052db 	.word	0x080052db
 80052a8:	080052db 	.word	0x080052db
 80052ac:	080052db 	.word	0x080052db
 80052b0:	080052d3 	.word	0x080052d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b4:	f7fe fe82 	bl	8003fbc <HAL_RCC_GetPCLK1Freq>
 80052b8:	61f8      	str	r0, [r7, #28]
        break;
 80052ba:	e014      	b.n	80052e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052bc:	f7fe fe94 	bl	8003fe8 <HAL_RCC_GetPCLK2Freq>
 80052c0:	61f8      	str	r0, [r7, #28]
        break;
 80052c2:	e010      	b.n	80052e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c4:	4b4d      	ldr	r3, [pc, #308]	; (80053fc <UART_SetConfig+0x56c>)
 80052c6:	61fb      	str	r3, [r7, #28]
        break;
 80052c8:	e00d      	b.n	80052e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ca:	f7fe fddf 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 80052ce:	61f8      	str	r0, [r7, #28]
        break;
 80052d0:	e009      	b.n	80052e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052d6:	61fb      	str	r3, [r7, #28]
        break;
 80052d8:	e005      	b.n	80052e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d077      	beq.n	80053dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	005a      	lsls	r2, r3, #1
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	085b      	lsrs	r3, r3, #1
 80052f6:	441a      	add	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005300:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b0f      	cmp	r3, #15
 8005306:	d916      	bls.n	8005336 <UART_SetConfig+0x4a6>
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800530e:	d212      	bcs.n	8005336 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	b29b      	uxth	r3, r3
 8005314:	f023 030f 	bic.w	r3, r3, #15
 8005318:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	085b      	lsrs	r3, r3, #1
 800531e:	b29b      	uxth	r3, r3
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	b29a      	uxth	r2, r3
 8005326:	8afb      	ldrh	r3, [r7, #22]
 8005328:	4313      	orrs	r3, r2
 800532a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	8afa      	ldrh	r2, [r7, #22]
 8005332:	60da      	str	r2, [r3, #12]
 8005334:	e052      	b.n	80053dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800533c:	e04e      	b.n	80053dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800533e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005342:	2b08      	cmp	r3, #8
 8005344:	d827      	bhi.n	8005396 <UART_SetConfig+0x506>
 8005346:	a201      	add	r2, pc, #4	; (adr r2, 800534c <UART_SetConfig+0x4bc>)
 8005348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534c:	08005371 	.word	0x08005371
 8005350:	08005379 	.word	0x08005379
 8005354:	08005381 	.word	0x08005381
 8005358:	08005397 	.word	0x08005397
 800535c:	08005387 	.word	0x08005387
 8005360:	08005397 	.word	0x08005397
 8005364:	08005397 	.word	0x08005397
 8005368:	08005397 	.word	0x08005397
 800536c:	0800538f 	.word	0x0800538f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005370:	f7fe fe24 	bl	8003fbc <HAL_RCC_GetPCLK1Freq>
 8005374:	61f8      	str	r0, [r7, #28]
        break;
 8005376:	e014      	b.n	80053a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005378:	f7fe fe36 	bl	8003fe8 <HAL_RCC_GetPCLK2Freq>
 800537c:	61f8      	str	r0, [r7, #28]
        break;
 800537e:	e010      	b.n	80053a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005380:	4b1e      	ldr	r3, [pc, #120]	; (80053fc <UART_SetConfig+0x56c>)
 8005382:	61fb      	str	r3, [r7, #28]
        break;
 8005384:	e00d      	b.n	80053a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005386:	f7fe fd81 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 800538a:	61f8      	str	r0, [r7, #28]
        break;
 800538c:	e009      	b.n	80053a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800538e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005392:	61fb      	str	r3, [r7, #28]
        break;
 8005394:	e005      	b.n	80053a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053a0:	bf00      	nop
    }

    if (pclk != 0U)
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d019      	beq.n	80053dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	085a      	lsrs	r2, r3, #1
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	441a      	add	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	2b0f      	cmp	r3, #15
 80053c0:	d909      	bls.n	80053d6 <UART_SetConfig+0x546>
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c8:	d205      	bcs.n	80053d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60da      	str	r2, [r3, #12]
 80053d4:	e002      	b.n	80053dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3728      	adds	r7, #40	; 0x28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053f6:	bf00      	nop
 80053f8:	40008000 	.word	0x40008000
 80053fc:	00f42400 	.word	0x00f42400

08005400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00a      	beq.n	80054b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01a      	beq.n	8005516 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054fe:	d10a      	bne.n	8005516 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	605a      	str	r2, [r3, #4]
  }
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af02      	add	r7, sp, #8
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005554:	f7fb fffe 	bl	8001554 <HAL_GetTick>
 8005558:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b08      	cmp	r3, #8
 8005566:	d10e      	bne.n	8005586 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f82d 	bl	80055d6 <UART_WaitOnFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e023      	b.n	80055ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b04      	cmp	r3, #4
 8005592:	d10e      	bne.n	80055b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f817 	bl	80055d6 <UART_WaitOnFlagUntilTimeout>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e00d      	b.n	80055ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b09c      	sub	sp, #112	; 0x70
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	603b      	str	r3, [r7, #0]
 80055e2:	4613      	mov	r3, r2
 80055e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e6:	e0a5      	b.n	8005734 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ee:	f000 80a1 	beq.w	8005734 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f2:	f7fb ffaf 	bl	8001554 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055fe:	429a      	cmp	r2, r3
 8005600:	d302      	bcc.n	8005608 <UART_WaitOnFlagUntilTimeout+0x32>
 8005602:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005604:	2b00      	cmp	r3, #0
 8005606:	d13e      	bne.n	8005686 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005618:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800561c:	667b      	str	r3, [r7, #100]	; 0x64
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005626:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005628:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800562c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e6      	bne.n	8005608 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3308      	adds	r3, #8
 8005640:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005644:	e853 3f00 	ldrex	r3, [r3]
 8005648:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800564a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564c:	f023 0301 	bic.w	r3, r3, #1
 8005650:	663b      	str	r3, [r7, #96]	; 0x60
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3308      	adds	r3, #8
 8005658:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800565a:	64ba      	str	r2, [r7, #72]	; 0x48
 800565c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005662:	e841 2300 	strex	r3, r2, [r1]
 8005666:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1e5      	bne.n	800563a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2220      	movs	r2, #32
 8005672:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2220      	movs	r2, #32
 8005678:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e067      	b.n	8005756 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d04f      	beq.n	8005734 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800569e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056a2:	d147      	bne.n	8005734 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056ac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	461a      	mov	r2, r3
 80056ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056cc:	637b      	str	r3, [r7, #52]	; 0x34
 80056ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056d4:	e841 2300 	strex	r3, r2, [r1]
 80056d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e6      	bne.n	80056ae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3308      	adds	r3, #8
 80056e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	e853 3f00 	ldrex	r3, [r3]
 80056ee:	613b      	str	r3, [r7, #16]
   return(result);
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f023 0301 	bic.w	r3, r3, #1
 80056f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3308      	adds	r3, #8
 80056fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005700:	623a      	str	r2, [r7, #32]
 8005702:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005704:	69f9      	ldr	r1, [r7, #28]
 8005706:	6a3a      	ldr	r2, [r7, #32]
 8005708:	e841 2300 	strex	r3, r2, [r1]
 800570c:	61bb      	str	r3, [r7, #24]
   return(result);
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e5      	bne.n	80056e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2220      	movs	r2, #32
 8005718:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2220      	movs	r2, #32
 800571e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2220      	movs	r2, #32
 8005724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e010      	b.n	8005756 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	69da      	ldr	r2, [r3, #28]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	4013      	ands	r3, r2
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	429a      	cmp	r2, r3
 8005742:	bf0c      	ite	eq
 8005744:	2301      	moveq	r3, #1
 8005746:	2300      	movne	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	461a      	mov	r2, r3
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	429a      	cmp	r2, r3
 8005750:	f43f af4a 	beq.w	80055e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3770      	adds	r7, #112	; 0x70
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800575e:	b084      	sub	sp, #16
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	f107 001c 	add.w	r0, r7, #28
 800576c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fa6f 	bl	8005c60 <USB_CoreReset>
 8005782:	4603      	mov	r3, r0
 8005784:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005788:	2b00      	cmp	r3, #0
 800578a:	d106      	bne.n	800579a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005790:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	639a      	str	r2, [r3, #56]	; 0x38
 8005798:	e005      	b.n	80057a6 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057b2:	b004      	add	sp, #16
 80057b4:	4770      	bx	lr

080057b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f023 0201 	bic.w	r2, r3, #1
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057f4:	78fb      	ldrb	r3, [r7, #3]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d115      	bne.n	8005826 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005806:	2001      	movs	r0, #1
 8005808:	f7fb feb0 	bl	800156c <HAL_Delay>
      ms++;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	3301      	adds	r3, #1
 8005810:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fa16 	bl	8005c44 <USB_GetMode>
 8005818:	4603      	mov	r3, r0
 800581a:	2b01      	cmp	r3, #1
 800581c:	d01e      	beq.n	800585c <USB_SetCurrentMode+0x84>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b31      	cmp	r3, #49	; 0x31
 8005822:	d9f0      	bls.n	8005806 <USB_SetCurrentMode+0x2e>
 8005824:	e01a      	b.n	800585c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005826:	78fb      	ldrb	r3, [r7, #3]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d115      	bne.n	8005858 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005838:	2001      	movs	r0, #1
 800583a:	f7fb fe97 	bl	800156c <HAL_Delay>
      ms++;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3301      	adds	r3, #1
 8005842:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f9fd 	bl	8005c44 <USB_GetMode>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d005      	beq.n	800585c <USB_SetCurrentMode+0x84>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b31      	cmp	r3, #49	; 0x31
 8005854:	d9f0      	bls.n	8005838 <USB_SetCurrentMode+0x60>
 8005856:	e001      	b.n	800585c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e005      	b.n	8005868 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b32      	cmp	r3, #50	; 0x32
 8005860:	d101      	bne.n	8005866 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005870:	b084      	sub	sp, #16
 8005872:	b580      	push	{r7, lr}
 8005874:	b086      	sub	sp, #24
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800587e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800588a:	2300      	movs	r3, #0
 800588c:	613b      	str	r3, [r7, #16]
 800588e:	e009      	b.n	80058a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	3340      	adds	r3, #64	; 0x40
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	2200      	movs	r2, #0
 800589c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	3301      	adds	r3, #1
 80058a2:	613b      	str	r3, [r7, #16]
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2b0e      	cmp	r3, #14
 80058a8:	d9f2      	bls.n	8005890 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d11c      	bne.n	80058ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058be:	f043 0302 	orr.w	r3, r3, #2
 80058c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	e005      	b.n	80058f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058fc:	461a      	mov	r2, r3
 80058fe:	2300      	movs	r3, #0
 8005900:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005908:	4619      	mov	r1, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005910:	461a      	mov	r2, r3
 8005912:	680b      	ldr	r3, [r1, #0]
 8005914:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005916:	2103      	movs	r1, #3
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f959 	bl	8005bd0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800591e:	2110      	movs	r1, #16
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f8f1 	bl	8005b08 <USB_FlushTxFifo>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f91d 	bl	8005b70 <USB_FlushRxFifo>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005946:	461a      	mov	r2, r3
 8005948:	2300      	movs	r3, #0
 800594a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005952:	461a      	mov	r2, r3
 8005954:	2300      	movs	r3, #0
 8005956:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595e:	461a      	mov	r2, r3
 8005960:	2300      	movs	r3, #0
 8005962:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005964:	2300      	movs	r3, #0
 8005966:	613b      	str	r3, [r7, #16]
 8005968:	e043      	b.n	80059f2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800597c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005980:	d118      	bne.n	80059b4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005994:	461a      	mov	r2, r3
 8005996:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	e013      	b.n	80059c6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059aa:	461a      	mov	r2, r3
 80059ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	e008      	b.n	80059c6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	461a      	mov	r2, r3
 80059c2:	2300      	movs	r3, #0
 80059c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d2:	461a      	mov	r2, r3
 80059d4:	2300      	movs	r3, #0
 80059d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e4:	461a      	mov	r2, r3
 80059e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	3301      	adds	r3, #1
 80059f0:	613b      	str	r3, [r7, #16]
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d3b7      	bcc.n	800596a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059fa:	2300      	movs	r3, #0
 80059fc:	613b      	str	r3, [r7, #16]
 80059fe:	e043      	b.n	8005a88 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a16:	d118      	bne.n	8005a4a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	e013      	b.n	8005a5c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a40:	461a      	mov	r2, r3
 8005a42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	e008      	b.n	8005a5c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a56:	461a      	mov	r2, r3
 8005a58:	2300      	movs	r3, #0
 8005a5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a68:	461a      	mov	r2, r3
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	3301      	adds	r3, #1
 8005a86:	613b      	str	r3, [r7, #16]
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d3b7      	bcc.n	8005a00 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aa2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ab0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	f043 0210 	orr.w	r2, r3, #16
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	4b10      	ldr	r3, [pc, #64]	; (8005b04 <USB_DevInit+0x294>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d005      	beq.n	8005adc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	f043 0208 	orr.w	r2, r3, #8
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d107      	bne.n	8005af2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005aea:	f043 0304 	orr.w	r3, r3, #4
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005afe:	b004      	add	sp, #16
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	803c3800 	.word	0x803c3800

08005b08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4a13      	ldr	r2, [pc, #76]	; (8005b6c <USB_FlushTxFifo+0x64>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d901      	bls.n	8005b28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e01b      	b.n	8005b60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	daf2      	bge.n	8005b16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	019b      	lsls	r3, r3, #6
 8005b38:	f043 0220 	orr.w	r2, r3, #32
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3301      	adds	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4a08      	ldr	r2, [pc, #32]	; (8005b6c <USB_FlushTxFifo+0x64>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d901      	bls.n	8005b52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e006      	b.n	8005b60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d0f0      	beq.n	8005b40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	00030d40 	.word	0x00030d40

08005b70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4a11      	ldr	r2, [pc, #68]	; (8005bcc <USB_FlushRxFifo+0x5c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d901      	bls.n	8005b8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e018      	b.n	8005bc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	daf2      	bge.n	8005b7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2210      	movs	r2, #16
 8005b9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4a08      	ldr	r2, [pc, #32]	; (8005bcc <USB_FlushRxFifo+0x5c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d901      	bls.n	8005bb2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e006      	b.n	8005bc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f003 0310 	and.w	r3, r3, #16
 8005bba:	2b10      	cmp	r3, #16
 8005bbc:	d0f0      	beq.n	8005ba0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	00030d40 	.word	0x00030d40

08005bd0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	68f9      	ldr	r1, [r7, #12]
 8005bec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b085      	sub	sp, #20
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c1c:	f023 0303 	bic.w	r3, r3, #3
 8005c20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c30:	f043 0302 	orr.w	r3, r3, #2
 8005c34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	f003 0301 	and.w	r3, r3, #1
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4a13      	ldr	r2, [pc, #76]	; (8005cc4 <USB_CoreReset+0x64>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d901      	bls.n	8005c7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e01b      	b.n	8005cb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	daf2      	bge.n	8005c6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f043 0201 	orr.w	r2, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4a09      	ldr	r2, [pc, #36]	; (8005cc4 <USB_CoreReset+0x64>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d901      	bls.n	8005ca8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e006      	b.n	8005cb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d0f0      	beq.n	8005c96 <USB_CoreReset+0x36>

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	00030d40 	.word	0x00030d40

08005cc8 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8005ccc:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <SPI_WIFI_ISR+0x1c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d102      	bne.n	8005cda <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8005cd4:	4b03      	ldr	r3, [pc, #12]	; (8005ce4 <SPI_WIFI_ISR+0x1c>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
   }
}
 8005cda:	bf00      	nop
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	2000083c 	.word	0x2000083c

08005ce8 <__NVIC_SetPriority>:
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	4603      	mov	r3, r0
 8005cf0:	6039      	str	r1, [r7, #0]
 8005cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	db0a      	blt.n	8005d12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	490c      	ldr	r1, [pc, #48]	; (8005d34 <__NVIC_SetPriority+0x4c>)
 8005d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d06:	0112      	lsls	r2, r2, #4
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	440b      	add	r3, r1
 8005d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005d10:	e00a      	b.n	8005d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	4908      	ldr	r1, [pc, #32]	; (8005d38 <__NVIC_SetPriority+0x50>)
 8005d18:	79fb      	ldrb	r3, [r7, #7]
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	3b04      	subs	r3, #4
 8005d20:	0112      	lsls	r2, r2, #4
 8005d22:	b2d2      	uxtb	r2, r2
 8005d24:	440b      	add	r3, r1
 8005d26:	761a      	strb	r2, [r3, #24]
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	e000e100 	.word	0xe000e100
 8005d38:	e000ed00 	.word	0xe000ed00

08005d3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005d40:	2100      	movs	r1, #0
 8005d42:	f06f 0004 	mvn.w	r0, #4
 8005d46:	f7ff ffcf 	bl	8005ce8 <__NVIC_SetPriority>
#endif
}
 8005d4a:	bf00      	nop
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d56:	f3ef 8305 	mrs	r3, IPSR
 8005d5a:	603b      	str	r3, [r7, #0]
  return(result);
 8005d5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005d62:	f06f 0305 	mvn.w	r3, #5
 8005d66:	607b      	str	r3, [r7, #4]
 8005d68:	e00c      	b.n	8005d84 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d6a:	4b0a      	ldr	r3, [pc, #40]	; (8005d94 <osKernelInitialize+0x44>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d105      	bne.n	8005d7e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d72:	4b08      	ldr	r3, [pc, #32]	; (8005d94 <osKernelInitialize+0x44>)
 8005d74:	2201      	movs	r2, #1
 8005d76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	607b      	str	r3, [r7, #4]
 8005d7c:	e002      	b.n	8005d84 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d84:	687b      	ldr	r3, [r7, #4]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	20000840 	.word	0x20000840

08005d98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d9e:	f3ef 8305 	mrs	r3, IPSR
 8005da2:	603b      	str	r3, [r7, #0]
  return(result);
 8005da4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005daa:	f06f 0305 	mvn.w	r3, #5
 8005dae:	607b      	str	r3, [r7, #4]
 8005db0:	e010      	b.n	8005dd4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005db2:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <osKernelStart+0x48>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d109      	bne.n	8005dce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005dba:	f7ff ffbf 	bl	8005d3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005dbe:	4b08      	ldr	r3, [pc, #32]	; (8005de0 <osKernelStart+0x48>)
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005dc4:	f001 f866 	bl	8006e94 <vTaskStartScheduler>
      stat = osOK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	607b      	str	r3, [r7, #4]
 8005dcc:	e002      	b.n	8005dd4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005dce:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005dd4:	687b      	ldr	r3, [r7, #4]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20000840 	.word	0x20000840

08005de4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08e      	sub	sp, #56	; 0x38
 8005de8:	af04      	add	r7, sp, #16
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005df0:	2300      	movs	r3, #0
 8005df2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005df4:	f3ef 8305 	mrs	r3, IPSR
 8005df8:	617b      	str	r3, [r7, #20]
  return(result);
 8005dfa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d17e      	bne.n	8005efe <osThreadNew+0x11a>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d07b      	beq.n	8005efe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005e06:	2380      	movs	r3, #128	; 0x80
 8005e08:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e0a:	2318      	movs	r3, #24
 8005e0c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005e12:	f04f 33ff 	mov.w	r3, #4294967295
 8005e16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d045      	beq.n	8005eaa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <osThreadNew+0x48>
        name = attr->name;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d008      	beq.n	8005e52 <osThreadNew+0x6e>
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	2b38      	cmp	r3, #56	; 0x38
 8005e44:	d805      	bhi.n	8005e52 <osThreadNew+0x6e>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <osThreadNew+0x72>
        return (NULL);
 8005e52:	2300      	movs	r3, #0
 8005e54:	e054      	b.n	8005f00 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	089b      	lsrs	r3, r3, #2
 8005e64:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00e      	beq.n	8005e8c <osThreadNew+0xa8>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	2b5b      	cmp	r3, #91	; 0x5b
 8005e74:	d90a      	bls.n	8005e8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d006      	beq.n	8005e8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <osThreadNew+0xa8>
        mem = 1;
 8005e86:	2301      	movs	r3, #1
 8005e88:	61bb      	str	r3, [r7, #24]
 8005e8a:	e010      	b.n	8005eae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10c      	bne.n	8005eae <osThreadNew+0xca>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d108      	bne.n	8005eae <osThreadNew+0xca>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d104      	bne.n	8005eae <osThreadNew+0xca>
          mem = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	61bb      	str	r3, [r7, #24]
 8005ea8:	e001      	b.n	8005eae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d110      	bne.n	8005ed6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ebc:	9202      	str	r2, [sp, #8]
 8005ebe:	9301      	str	r3, [sp, #4]
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	6a3a      	ldr	r2, [r7, #32]
 8005ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 fe0c 	bl	8006ae8 <xTaskCreateStatic>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	613b      	str	r3, [r7, #16]
 8005ed4:	e013      	b.n	8005efe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d110      	bne.n	8005efe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	f107 0310 	add.w	r3, r7, #16
 8005ee4:	9301      	str	r3, [sp, #4]
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 fe57 	bl	8006ba2 <xTaskCreate>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d001      	beq.n	8005efe <osThreadNew+0x11a>
            hTask = NULL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005efe:	693b      	ldr	r3, [r7, #16]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3728      	adds	r7, #40	; 0x28
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f10:	f3ef 8305 	mrs	r3, IPSR
 8005f14:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f16:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <osDelay+0x1c>
    stat = osErrorISR;
 8005f1c:	f06f 0305 	mvn.w	r3, #5
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	e007      	b.n	8005f34 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 ff7c 	bl	8006e2c <vTaskDelay>
    }
  }

  return (stat);
 8005f34:	68fb      	ldr	r3, [r7, #12]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4a07      	ldr	r2, [pc, #28]	; (8005f6c <vApplicationGetIdleTaskMemory+0x2c>)
 8005f50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	4a06      	ldr	r2, [pc, #24]	; (8005f70 <vApplicationGetIdleTaskMemory+0x30>)
 8005f56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2280      	movs	r2, #128	; 0x80
 8005f5c:	601a      	str	r2, [r3, #0]
}
 8005f5e:	bf00      	nop
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	20000844 	.word	0x20000844
 8005f70:	200008a0 	.word	0x200008a0

08005f74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4a07      	ldr	r2, [pc, #28]	; (8005fa0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005f84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	4a06      	ldr	r2, [pc, #24]	; (8005fa4 <vApplicationGetTimerTaskMemory+0x30>)
 8005f8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f92:	601a      	str	r2, [r3, #0]
}
 8005f94:	bf00      	nop
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	20000aa0 	.word	0x20000aa0
 8005fa4:	20000afc 	.word	0x20000afc

08005fa8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f103 0208 	add.w	r2, r3, #8
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f103 0208 	add.w	r2, r3, #8
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f103 0208 	add.w	r2, r3, #8
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006002:	b480      	push	{r7}
 8006004:	b085      	sub	sp, #20
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	601a      	str	r2, [r3, #0]
}
 800603e:	bf00      	nop
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800604a:	b480      	push	{r7}
 800604c:	b085      	sub	sp, #20
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006060:	d103      	bne.n	800606a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	e00c      	b.n	8006084 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3308      	adds	r3, #8
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	e002      	b.n	8006078 <vListInsert+0x2e>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	60fb      	str	r3, [r7, #12]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	429a      	cmp	r2, r3
 8006082:	d2f6      	bcs.n	8006072 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	601a      	str	r2, [r3, #0]
}
 80060b0:	bf00      	nop
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6892      	ldr	r2, [r2, #8]
 80060d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6852      	ldr	r2, [r2, #4]
 80060dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d103      	bne.n	80060f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	1e5a      	subs	r2, r3, #1
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006136:	bf00      	nop
 8006138:	e7fe      	b.n	8006138 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800613a:	f002 f84b 	bl	80081d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006146:	68f9      	ldr	r1, [r7, #12]
 8006148:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800614a:	fb01 f303 	mul.w	r3, r1, r3
 800614e:	441a      	add	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616a:	3b01      	subs	r3, #1
 800616c:	68f9      	ldr	r1, [r7, #12]
 800616e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006170:	fb01 f303 	mul.w	r3, r1, r3
 8006174:	441a      	add	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	22ff      	movs	r2, #255	; 0xff
 800617e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	22ff      	movs	r2, #255	; 0xff
 8006186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d114      	bne.n	80061ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01a      	beq.n	80061ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	3310      	adds	r3, #16
 800619c:	4618      	mov	r0, r3
 800619e:	f001 f903 	bl	80073a8 <xTaskRemoveFromEventList>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d012      	beq.n	80061ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80061a8:	4b0c      	ldr	r3, [pc, #48]	; (80061dc <xQueueGenericReset+0xcc>)
 80061aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	e009      	b.n	80061ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	3310      	adds	r3, #16
 80061be:	4618      	mov	r0, r3
 80061c0:	f7ff fef2 	bl	8005fa8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3324      	adds	r3, #36	; 0x24
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7ff feed 	bl	8005fa8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80061ce:	f002 f831 	bl	8008234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80061d2:	2301      	movs	r3, #1
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	e000ed04 	.word	0xe000ed04

080061e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08e      	sub	sp, #56	; 0x38
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10a      	bne.n	800620a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006206:	bf00      	nop
 8006208:	e7fe      	b.n	8006208 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10a      	bne.n	8006226 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006222:	bf00      	nop
 8006224:	e7fe      	b.n	8006224 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <xQueueGenericCreateStatic+0x52>
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <xQueueGenericCreateStatic+0x56>
 8006232:	2301      	movs	r3, #1
 8006234:	e000      	b.n	8006238 <xQueueGenericCreateStatic+0x58>
 8006236:	2300      	movs	r3, #0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10a      	bne.n	8006252 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	623b      	str	r3, [r7, #32]
}
 800624e:	bf00      	nop
 8006250:	e7fe      	b.n	8006250 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d102      	bne.n	800625e <xQueueGenericCreateStatic+0x7e>
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <xQueueGenericCreateStatic+0x82>
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <xQueueGenericCreateStatic+0x84>
 8006262:	2300      	movs	r3, #0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10a      	bne.n	800627e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	61fb      	str	r3, [r7, #28]
}
 800627a:	bf00      	nop
 800627c:	e7fe      	b.n	800627c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800627e:	2350      	movs	r3, #80	; 0x50
 8006280:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b50      	cmp	r3, #80	; 0x50
 8006286:	d00a      	beq.n	800629e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	61bb      	str	r3, [r7, #24]
}
 800629a:	bf00      	nop
 800629c:	e7fe      	b.n	800629c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800629e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00d      	beq.n	80062c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80062b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	4613      	mov	r3, r2
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	68b9      	ldr	r1, [r7, #8]
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f805 	bl	80062d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3730      	adds	r7, #48	; 0x30
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d103      	bne.n	80062ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	e002      	b.n	80062f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062fe:	2101      	movs	r1, #1
 8006300:	69b8      	ldr	r0, [r7, #24]
 8006302:	f7ff ff05 	bl	8006110 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	78fa      	ldrb	r2, [r7, #3]
 800630a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800630e:	bf00      	nop
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b08e      	sub	sp, #56	; 0x38
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
 8006324:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006326:	2300      	movs	r3, #0
 8006328:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <xQueueGenericSend+0x32>
	__asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006346:	bf00      	nop
 8006348:	e7fe      	b.n	8006348 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d103      	bne.n	8006358 <xQueueGenericSend+0x40>
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <xQueueGenericSend+0x44>
 8006358:	2301      	movs	r3, #1
 800635a:	e000      	b.n	800635e <xQueueGenericSend+0x46>
 800635c:	2300      	movs	r3, #0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10a      	bne.n	8006378 <xQueueGenericSend+0x60>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006374:	bf00      	nop
 8006376:	e7fe      	b.n	8006376 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2b02      	cmp	r3, #2
 800637c:	d103      	bne.n	8006386 <xQueueGenericSend+0x6e>
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006382:	2b01      	cmp	r3, #1
 8006384:	d101      	bne.n	800638a <xQueueGenericSend+0x72>
 8006386:	2301      	movs	r3, #1
 8006388:	e000      	b.n	800638c <xQueueGenericSend+0x74>
 800638a:	2300      	movs	r3, #0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10a      	bne.n	80063a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	623b      	str	r3, [r7, #32]
}
 80063a2:	bf00      	nop
 80063a4:	e7fe      	b.n	80063a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063a6:	f001 f9bd 	bl	8007724 <xTaskGetSchedulerState>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d102      	bne.n	80063b6 <xQueueGenericSend+0x9e>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <xQueueGenericSend+0xa2>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e000      	b.n	80063bc <xQueueGenericSend+0xa4>
 80063ba:	2300      	movs	r3, #0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10a      	bne.n	80063d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	61fb      	str	r3, [r7, #28]
}
 80063d2:	bf00      	nop
 80063d4:	e7fe      	b.n	80063d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063d6:	f001 fefd 	bl	80081d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d302      	bcc.n	80063ec <xQueueGenericSend+0xd4>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d129      	bne.n	8006440 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	68b9      	ldr	r1, [r7, #8]
 80063f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063f2:	f000 fa0b 	bl	800680c <prvCopyDataToQueue>
 80063f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d010      	beq.n	8006422 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006402:	3324      	adds	r3, #36	; 0x24
 8006404:	4618      	mov	r0, r3
 8006406:	f000 ffcf 	bl	80073a8 <xTaskRemoveFromEventList>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d013      	beq.n	8006438 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006410:	4b3f      	ldr	r3, [pc, #252]	; (8006510 <xQueueGenericSend+0x1f8>)
 8006412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	e00a      	b.n	8006438 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	2b00      	cmp	r3, #0
 8006426:	d007      	beq.n	8006438 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006428:	4b39      	ldr	r3, [pc, #228]	; (8006510 <xQueueGenericSend+0x1f8>)
 800642a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006438:	f001 fefc 	bl	8008234 <vPortExitCritical>
				return pdPASS;
 800643c:	2301      	movs	r3, #1
 800643e:	e063      	b.n	8006508 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d103      	bne.n	800644e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006446:	f001 fef5 	bl	8008234 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800644a:	2300      	movs	r3, #0
 800644c:	e05c      	b.n	8006508 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800644e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006450:	2b00      	cmp	r3, #0
 8006452:	d106      	bne.n	8006462 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006454:	f107 0314 	add.w	r3, r7, #20
 8006458:	4618      	mov	r0, r3
 800645a:	f001 f809 	bl	8007470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800645e:	2301      	movs	r3, #1
 8006460:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006462:	f001 fee7 	bl	8008234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006466:	f000 fd7b 	bl	8006f60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800646a:	f001 feb3 	bl	80081d4 <vPortEnterCritical>
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006474:	b25b      	sxtb	r3, r3
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	d103      	bne.n	8006484 <xQueueGenericSend+0x16c>
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800648a:	b25b      	sxtb	r3, r3
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d103      	bne.n	800649a <xQueueGenericSend+0x182>
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800649a:	f001 fecb 	bl	8008234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800649e:	1d3a      	adds	r2, r7, #4
 80064a0:	f107 0314 	add.w	r3, r7, #20
 80064a4:	4611      	mov	r1, r2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 fff8 	bl	800749c <xTaskCheckForTimeOut>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d124      	bne.n	80064fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064b4:	f000 faa2 	bl	80069fc <prvIsQueueFull>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d018      	beq.n	80064f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	3310      	adds	r3, #16
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	4611      	mov	r1, r2
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 ff1e 	bl	8007308 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064ce:	f000 fa2d 	bl	800692c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064d2:	f000 fd53 	bl	8006f7c <xTaskResumeAll>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f47f af7c 	bne.w	80063d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80064de:	4b0c      	ldr	r3, [pc, #48]	; (8006510 <xQueueGenericSend+0x1f8>)
 80064e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	e772      	b.n	80063d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80064f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064f2:	f000 fa1b 	bl	800692c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064f6:	f000 fd41 	bl	8006f7c <xTaskResumeAll>
 80064fa:	e76c      	b.n	80063d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80064fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064fe:	f000 fa15 	bl	800692c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006502:	f000 fd3b 	bl	8006f7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006506:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006508:	4618      	mov	r0, r3
 800650a:	3738      	adds	r7, #56	; 0x38
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	e000ed04 	.word	0xe000ed04

08006514 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b090      	sub	sp, #64	; 0x40
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10a      	bne.n	8006542 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800653e:	bf00      	nop
 8006540:	e7fe      	b.n	8006540 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d103      	bne.n	8006550 <xQueueGenericSendFromISR+0x3c>
 8006548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <xQueueGenericSendFromISR+0x40>
 8006550:	2301      	movs	r3, #1
 8006552:	e000      	b.n	8006556 <xQueueGenericSendFromISR+0x42>
 8006554:	2300      	movs	r3, #0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800656c:	bf00      	nop
 800656e:	e7fe      	b.n	800656e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2b02      	cmp	r3, #2
 8006574:	d103      	bne.n	800657e <xQueueGenericSendFromISR+0x6a>
 8006576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657a:	2b01      	cmp	r3, #1
 800657c:	d101      	bne.n	8006582 <xQueueGenericSendFromISR+0x6e>
 800657e:	2301      	movs	r3, #1
 8006580:	e000      	b.n	8006584 <xQueueGenericSendFromISR+0x70>
 8006582:	2300      	movs	r3, #0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10a      	bne.n	800659e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	623b      	str	r3, [r7, #32]
}
 800659a:	bf00      	nop
 800659c:	e7fe      	b.n	800659c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800659e:	f001 fefb 	bl	8008398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065a2:	f3ef 8211 	mrs	r2, BASEPRI
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	61fa      	str	r2, [r7, #28]
 80065b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d302      	bcc.n	80065d0 <xQueueGenericSendFromISR+0xbc>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d12f      	bne.n	8006630 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	68b9      	ldr	r1, [r7, #8]
 80065e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065e6:	f000 f911 	bl	800680c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80065ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f2:	d112      	bne.n	800661a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d016      	beq.n	800662a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fe:	3324      	adds	r3, #36	; 0x24
 8006600:	4618      	mov	r0, r3
 8006602:	f000 fed1 	bl	80073a8 <xTaskRemoveFromEventList>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00e      	beq.n	800662a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00b      	beq.n	800662a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	e007      	b.n	800662a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800661a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800661e:	3301      	adds	r3, #1
 8006620:	b2db      	uxtb	r3, r3
 8006622:	b25a      	sxtb	r2, r3
 8006624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800662a:	2301      	movs	r3, #1
 800662c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800662e:	e001      	b.n	8006634 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006630:	2300      	movs	r3, #0
 8006632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006636:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800663e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006642:	4618      	mov	r0, r3
 8006644:	3740      	adds	r7, #64	; 0x40
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08c      	sub	sp, #48	; 0x30
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006658:	2300      	movs	r3, #0
 800665a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10a      	bne.n	800667c <xQueueReceive+0x30>
	__asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	623b      	str	r3, [r7, #32]
}
 8006678:	bf00      	nop
 800667a:	e7fe      	b.n	800667a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d103      	bne.n	800668a <xQueueReceive+0x3e>
 8006682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <xQueueReceive+0x42>
 800668a:	2301      	movs	r3, #1
 800668c:	e000      	b.n	8006690 <xQueueReceive+0x44>
 800668e:	2300      	movs	r3, #0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10a      	bne.n	80066aa <xQueueReceive+0x5e>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	61fb      	str	r3, [r7, #28]
}
 80066a6:	bf00      	nop
 80066a8:	e7fe      	b.n	80066a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066aa:	f001 f83b 	bl	8007724 <xTaskGetSchedulerState>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d102      	bne.n	80066ba <xQueueReceive+0x6e>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <xQueueReceive+0x72>
 80066ba:	2301      	movs	r3, #1
 80066bc:	e000      	b.n	80066c0 <xQueueReceive+0x74>
 80066be:	2300      	movs	r3, #0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <xQueueReceive+0x8e>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	61bb      	str	r3, [r7, #24]
}
 80066d6:	bf00      	nop
 80066d8:	e7fe      	b.n	80066d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066da:	f001 fd7b 	bl	80081d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d01f      	beq.n	800672a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066ea:	68b9      	ldr	r1, [r7, #8]
 80066ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ee:	f000 f8f7 	bl	80068e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	1e5a      	subs	r2, r3, #1
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00f      	beq.n	8006722 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006704:	3310      	adds	r3, #16
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fe4e 	bl	80073a8 <xTaskRemoveFromEventList>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d007      	beq.n	8006722 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006712:	4b3d      	ldr	r3, [pc, #244]	; (8006808 <xQueueReceive+0x1bc>)
 8006714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006722:	f001 fd87 	bl	8008234 <vPortExitCritical>
				return pdPASS;
 8006726:	2301      	movs	r3, #1
 8006728:	e069      	b.n	80067fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d103      	bne.n	8006738 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006730:	f001 fd80 	bl	8008234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006734:	2300      	movs	r3, #0
 8006736:	e062      	b.n	80067fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673a:	2b00      	cmp	r3, #0
 800673c:	d106      	bne.n	800674c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800673e:	f107 0310 	add.w	r3, r7, #16
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fe94 	bl	8007470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006748:	2301      	movs	r3, #1
 800674a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800674c:	f001 fd72 	bl	8008234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006750:	f000 fc06 	bl	8006f60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006754:	f001 fd3e 	bl	80081d4 <vPortEnterCritical>
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800675e:	b25b      	sxtb	r3, r3
 8006760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006764:	d103      	bne.n	800676e <xQueueReceive+0x122>
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006770:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006774:	b25b      	sxtb	r3, r3
 8006776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677a:	d103      	bne.n	8006784 <xQueueReceive+0x138>
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006784:	f001 fd56 	bl	8008234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006788:	1d3a      	adds	r2, r7, #4
 800678a:	f107 0310 	add.w	r3, r7, #16
 800678e:	4611      	mov	r1, r2
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fe83 	bl	800749c <xTaskCheckForTimeOut>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d123      	bne.n	80067e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800679c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800679e:	f000 f917 	bl	80069d0 <prvIsQueueEmpty>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d017      	beq.n	80067d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	3324      	adds	r3, #36	; 0x24
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	4611      	mov	r1, r2
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 fda9 	bl	8007308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067b8:	f000 f8b8 	bl	800692c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067bc:	f000 fbde 	bl	8006f7c <xTaskResumeAll>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d189      	bne.n	80066da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80067c6:	4b10      	ldr	r3, [pc, #64]	; (8006808 <xQueueReceive+0x1bc>)
 80067c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	e780      	b.n	80066da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80067d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067da:	f000 f8a7 	bl	800692c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067de:	f000 fbcd 	bl	8006f7c <xTaskResumeAll>
 80067e2:	e77a      	b.n	80066da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80067e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067e6:	f000 f8a1 	bl	800692c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067ea:	f000 fbc7 	bl	8006f7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067f0:	f000 f8ee 	bl	80069d0 <prvIsQueueEmpty>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f43f af6f 	beq.w	80066da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3730      	adds	r7, #48	; 0x30
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	e000ed04 	.word	0xe000ed04

0800680c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006818:	2300      	movs	r3, #0
 800681a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006820:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10d      	bne.n	8006846 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d14d      	bne.n	80068ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	4618      	mov	r0, r3
 8006838:	f000 ff92 	bl	8007760 <xTaskPriorityDisinherit>
 800683c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	609a      	str	r2, [r3, #8]
 8006844:	e043      	b.n	80068ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d119      	bne.n	8006880 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6858      	ldr	r0, [r3, #4]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006854:	461a      	mov	r2, r3
 8006856:	68b9      	ldr	r1, [r7, #8]
 8006858:	f001 ffec 	bl	8008834 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006864:	441a      	add	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	429a      	cmp	r2, r3
 8006874:	d32b      	bcc.n	80068ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	605a      	str	r2, [r3, #4]
 800687e:	e026      	b.n	80068ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	68d8      	ldr	r0, [r3, #12]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006888:	461a      	mov	r2, r3
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	f001 ffd2 	bl	8008834 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006898:	425b      	negs	r3, r3
 800689a:	441a      	add	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d207      	bcs.n	80068bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b4:	425b      	negs	r3, r3
 80068b6:	441a      	add	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d105      	bne.n	80068ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d002      	beq.n	80068ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1c5a      	adds	r2, r3, #1
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80068d6:	697b      	ldr	r3, [r7, #20]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3718      	adds	r7, #24
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d018      	beq.n	8006924 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	441a      	add	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68da      	ldr	r2, [r3, #12]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	429a      	cmp	r2, r3
 800690a:	d303      	bcc.n	8006914 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68d9      	ldr	r1, [r3, #12]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691c:	461a      	mov	r2, r3
 800691e:	6838      	ldr	r0, [r7, #0]
 8006920:	f001 ff88 	bl	8008834 <memcpy>
	}
}
 8006924:	bf00      	nop
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006934:	f001 fc4e 	bl	80081d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800693e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006940:	e011      	b.n	8006966 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	2b00      	cmp	r3, #0
 8006948:	d012      	beq.n	8006970 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	3324      	adds	r3, #36	; 0x24
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fd2a 	bl	80073a8 <xTaskRemoveFromEventList>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800695a:	f000 fe01 	bl	8007560 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	3b01      	subs	r3, #1
 8006962:	b2db      	uxtb	r3, r3
 8006964:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800696a:	2b00      	cmp	r3, #0
 800696c:	dce9      	bgt.n	8006942 <prvUnlockQueue+0x16>
 800696e:	e000      	b.n	8006972 <prvUnlockQueue+0x46>
					break;
 8006970:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	22ff      	movs	r2, #255	; 0xff
 8006976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800697a:	f001 fc5b 	bl	8008234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800697e:	f001 fc29 	bl	80081d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006988:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800698a:	e011      	b.n	80069b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d012      	beq.n	80069ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3310      	adds	r3, #16
 8006998:	4618      	mov	r0, r3
 800699a:	f000 fd05 	bl	80073a8 <xTaskRemoveFromEventList>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069a4:	f000 fddc 	bl	8007560 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069a8:	7bbb      	ldrb	r3, [r7, #14]
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	dce9      	bgt.n	800698c <prvUnlockQueue+0x60>
 80069b8:	e000      	b.n	80069bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	22ff      	movs	r2, #255	; 0xff
 80069c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80069c4:	f001 fc36 	bl	8008234 <vPortExitCritical>
}
 80069c8:	bf00      	nop
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069d8:	f001 fbfc 	bl	80081d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d102      	bne.n	80069ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80069e4:	2301      	movs	r3, #1
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	e001      	b.n	80069ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069ee:	f001 fc21 	bl	8008234 <vPortExitCritical>

	return xReturn;
 80069f2:	68fb      	ldr	r3, [r7, #12]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a04:	f001 fbe6 	bl	80081d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d102      	bne.n	8006a1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a14:	2301      	movs	r3, #1
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	e001      	b.n	8006a1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a1e:	f001 fc09 	bl	8008234 <vPortExitCritical>

	return xReturn;
 8006a22:	68fb      	ldr	r3, [r7, #12]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a36:	2300      	movs	r3, #0
 8006a38:	60fb      	str	r3, [r7, #12]
 8006a3a:	e014      	b.n	8006a66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a3c:	4a0f      	ldr	r2, [pc, #60]	; (8006a7c <vQueueAddToRegistry+0x50>)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10b      	bne.n	8006a60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a48:	490c      	ldr	r1, [pc, #48]	; (8006a7c <vQueueAddToRegistry+0x50>)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a52:	4a0a      	ldr	r2, [pc, #40]	; (8006a7c <vQueueAddToRegistry+0x50>)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	4413      	add	r3, r2
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a5e:	e006      	b.n	8006a6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3301      	adds	r3, #1
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2b07      	cmp	r3, #7
 8006a6a:	d9e7      	bls.n	8006a3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a6c:	bf00      	nop
 8006a6e:	bf00      	nop
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	20000efc 	.word	0x20000efc

08006a80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006a90:	f001 fba0 	bl	80081d4 <vPortEnterCritical>
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a9a:	b25b      	sxtb	r3, r3
 8006a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa0:	d103      	bne.n	8006aaa <vQueueWaitForMessageRestricted+0x2a>
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ab0:	b25b      	sxtb	r3, r3
 8006ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab6:	d103      	bne.n	8006ac0 <vQueueWaitForMessageRestricted+0x40>
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ac0:	f001 fbb8 	bl	8008234 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d106      	bne.n	8006ada <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	3324      	adds	r3, #36	; 0x24
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	68b9      	ldr	r1, [r7, #8]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 fc3b 	bl	8007350 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006ada:	6978      	ldr	r0, [r7, #20]
 8006adc:	f7ff ff26 	bl	800692c <prvUnlockQueue>
	}
 8006ae0:	bf00      	nop
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08e      	sub	sp, #56	; 0x38
 8006aec:	af04      	add	r7, sp, #16
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	623b      	str	r3, [r7, #32]
}
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10a      	bne.n	8006b2e <xTaskCreateStatic+0x46>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	61fb      	str	r3, [r7, #28]
}
 8006b2a:	bf00      	nop
 8006b2c:	e7fe      	b.n	8006b2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b2e:	235c      	movs	r3, #92	; 0x5c
 8006b30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b5c      	cmp	r3, #92	; 0x5c
 8006b36:	d00a      	beq.n	8006b4e <xTaskCreateStatic+0x66>
	__asm volatile
 8006b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	61bb      	str	r3, [r7, #24]
}
 8006b4a:	bf00      	nop
 8006b4c:	e7fe      	b.n	8006b4c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d01e      	beq.n	8006b94 <xTaskCreateStatic+0xac>
 8006b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01b      	beq.n	8006b94 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	2202      	movs	r2, #2
 8006b6a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9303      	str	r3, [sp, #12]
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	9302      	str	r3, [sp, #8]
 8006b76:	f107 0314 	add.w	r3, r7, #20
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	68b9      	ldr	r1, [r7, #8]
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 f850 	bl	8006c2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b8e:	f000 f8dd 	bl	8006d4c <prvAddNewTaskToReadyList>
 8006b92:	e001      	b.n	8006b98 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006b94:	2300      	movs	r3, #0
 8006b96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b98:	697b      	ldr	r3, [r7, #20]
	}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3728      	adds	r7, #40	; 0x28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b08c      	sub	sp, #48	; 0x30
 8006ba6:	af04      	add	r7, sp, #16
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	603b      	str	r3, [r7, #0]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bb2:	88fb      	ldrh	r3, [r7, #6]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f001 fc2e 	bl	8008418 <pvPortMalloc>
 8006bbc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00e      	beq.n	8006be2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bc4:	205c      	movs	r0, #92	; 0x5c
 8006bc6:	f001 fc27 	bl	8008418 <pvPortMalloc>
 8006bca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8006bd8:	e005      	b.n	8006be6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bda:	6978      	ldr	r0, [r7, #20]
 8006bdc:	f001 fce8 	bl	80085b0 <vPortFree>
 8006be0:	e001      	b.n	8006be6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006be2:	2300      	movs	r3, #0
 8006be4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d017      	beq.n	8006c1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006bf4:	88fa      	ldrh	r2, [r7, #6]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	9303      	str	r3, [sp, #12]
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	9302      	str	r3, [sp, #8]
 8006bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 f80e 	bl	8006c2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c10:	69f8      	ldr	r0, [r7, #28]
 8006c12:	f000 f89b 	bl	8006d4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c16:	2301      	movs	r3, #1
 8006c18:	61bb      	str	r3, [r7, #24]
 8006c1a:	e002      	b.n	8006c22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c22:	69bb      	ldr	r3, [r7, #24]
	}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3720      	adds	r7, #32
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	461a      	mov	r2, r3
 8006c44:	21a5      	movs	r1, #165	; 0xa5
 8006c46:	f001 fe03 	bl	8008850 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c54:	3b01      	subs	r3, #1
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	f023 0307 	bic.w	r3, r3, #7
 8006c62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	617b      	str	r3, [r7, #20]
}
 8006c80:	bf00      	nop
 8006c82:	e7fe      	b.n	8006c82 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d01f      	beq.n	8006cca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61fb      	str	r3, [r7, #28]
 8006c8e:	e012      	b.n	8006cb6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	4413      	add	r3, r2
 8006c96:	7819      	ldrb	r1, [r3, #0]
 8006c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	3334      	adds	r3, #52	; 0x34
 8006ca0:	460a      	mov	r2, r1
 8006ca2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	4413      	add	r3, r2
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d006      	beq.n	8006cbe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	61fb      	str	r3, [r7, #28]
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	2b0f      	cmp	r3, #15
 8006cba:	d9e9      	bls.n	8006c90 <prvInitialiseNewTask+0x64>
 8006cbc:	e000      	b.n	8006cc0 <prvInitialiseNewTask+0x94>
			{
				break;
 8006cbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cc8:	e003      	b.n	8006cd2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	2b37      	cmp	r3, #55	; 0x37
 8006cd6:	d901      	bls.n	8006cdc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006cd8:	2337      	movs	r3, #55	; 0x37
 8006cda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ce0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ce6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cea:	2200      	movs	r2, #0
 8006cec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff f978 	bl	8005fe8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfa:	3318      	adds	r3, #24
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff f973 	bl	8005fe8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	68f9      	ldr	r1, [r7, #12]
 8006d2a:	69b8      	ldr	r0, [r7, #24]
 8006d2c:	f001 f928 	bl	8007f80 <pxPortInitialiseStack>
 8006d30:	4602      	mov	r2, r0
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d002      	beq.n	8006d42 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d42:	bf00      	nop
 8006d44:	3720      	adds	r7, #32
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d54:	f001 fa3e 	bl	80081d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d58:	4b2d      	ldr	r3, [pc, #180]	; (8006e10 <prvAddNewTaskToReadyList+0xc4>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	4a2c      	ldr	r2, [pc, #176]	; (8006e10 <prvAddNewTaskToReadyList+0xc4>)
 8006d60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d62:	4b2c      	ldr	r3, [pc, #176]	; (8006e14 <prvAddNewTaskToReadyList+0xc8>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d109      	bne.n	8006d7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d6a:	4a2a      	ldr	r2, [pc, #168]	; (8006e14 <prvAddNewTaskToReadyList+0xc8>)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d70:	4b27      	ldr	r3, [pc, #156]	; (8006e10 <prvAddNewTaskToReadyList+0xc4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d110      	bne.n	8006d9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d78:	f000 fc16 	bl	80075a8 <prvInitialiseTaskLists>
 8006d7c:	e00d      	b.n	8006d9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d7e:	4b26      	ldr	r3, [pc, #152]	; (8006e18 <prvAddNewTaskToReadyList+0xcc>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d109      	bne.n	8006d9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d86:	4b23      	ldr	r3, [pc, #140]	; (8006e14 <prvAddNewTaskToReadyList+0xc8>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d802      	bhi.n	8006d9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d94:	4a1f      	ldr	r2, [pc, #124]	; (8006e14 <prvAddNewTaskToReadyList+0xc8>)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d9a:	4b20      	ldr	r3, [pc, #128]	; (8006e1c <prvAddNewTaskToReadyList+0xd0>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	4a1e      	ldr	r2, [pc, #120]	; (8006e1c <prvAddNewTaskToReadyList+0xd0>)
 8006da2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006da4:	4b1d      	ldr	r3, [pc, #116]	; (8006e1c <prvAddNewTaskToReadyList+0xd0>)
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db0:	4b1b      	ldr	r3, [pc, #108]	; (8006e20 <prvAddNewTaskToReadyList+0xd4>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d903      	bls.n	8006dc0 <prvAddNewTaskToReadyList+0x74>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbc:	4a18      	ldr	r2, [pc, #96]	; (8006e20 <prvAddNewTaskToReadyList+0xd4>)
 8006dbe:	6013      	str	r3, [r2, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4a15      	ldr	r2, [pc, #84]	; (8006e24 <prvAddNewTaskToReadyList+0xd8>)
 8006dce:	441a      	add	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4610      	mov	r0, r2
 8006dd8:	f7ff f913 	bl	8006002 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ddc:	f001 fa2a 	bl	8008234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006de0:	4b0d      	ldr	r3, [pc, #52]	; (8006e18 <prvAddNewTaskToReadyList+0xcc>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00e      	beq.n	8006e06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006de8:	4b0a      	ldr	r3, [pc, #40]	; (8006e14 <prvAddNewTaskToReadyList+0xc8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d207      	bcs.n	8006e06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006df6:	4b0c      	ldr	r3, [pc, #48]	; (8006e28 <prvAddNewTaskToReadyList+0xdc>)
 8006df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e06:	bf00      	nop
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20001410 	.word	0x20001410
 8006e14:	20000f3c 	.word	0x20000f3c
 8006e18:	2000141c 	.word	0x2000141c
 8006e1c:	2000142c 	.word	0x2000142c
 8006e20:	20001418 	.word	0x20001418
 8006e24:	20000f40 	.word	0x20000f40
 8006e28:	e000ed04 	.word	0xe000ed04

08006e2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e34:	2300      	movs	r3, #0
 8006e36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d017      	beq.n	8006e6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e3e:	4b13      	ldr	r3, [pc, #76]	; (8006e8c <vTaskDelay+0x60>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00a      	beq.n	8006e5c <vTaskDelay+0x30>
	__asm volatile
 8006e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4a:	f383 8811 	msr	BASEPRI, r3
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	60bb      	str	r3, [r7, #8]
}
 8006e58:	bf00      	nop
 8006e5a:	e7fe      	b.n	8006e5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e5c:	f000 f880 	bl	8006f60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e60:	2100      	movs	r1, #0
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fcea 	bl	800783c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e68:	f000 f888 	bl	8006f7c <xTaskResumeAll>
 8006e6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d107      	bne.n	8006e84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006e74:	4b06      	ldr	r3, [pc, #24]	; (8006e90 <vTaskDelay+0x64>)
 8006e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e84:	bf00      	nop
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	20001438 	.word	0x20001438
 8006e90:	e000ed04 	.word	0xe000ed04

08006e94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08a      	sub	sp, #40	; 0x28
 8006e98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ea2:	463a      	mov	r2, r7
 8006ea4:	1d39      	adds	r1, r7, #4
 8006ea6:	f107 0308 	add.w	r3, r7, #8
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7ff f848 	bl	8005f40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	9202      	str	r2, [sp, #8]
 8006eb8:	9301      	str	r3, [sp, #4]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	460a      	mov	r2, r1
 8006ec2:	4921      	ldr	r1, [pc, #132]	; (8006f48 <vTaskStartScheduler+0xb4>)
 8006ec4:	4821      	ldr	r0, [pc, #132]	; (8006f4c <vTaskStartScheduler+0xb8>)
 8006ec6:	f7ff fe0f 	bl	8006ae8 <xTaskCreateStatic>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	4a20      	ldr	r2, [pc, #128]	; (8006f50 <vTaskStartScheduler+0xbc>)
 8006ece:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ed0:	4b1f      	ldr	r3, [pc, #124]	; (8006f50 <vTaskStartScheduler+0xbc>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	617b      	str	r3, [r7, #20]
 8006edc:	e001      	b.n	8006ee2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d102      	bne.n	8006eee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ee8:	f000 fcfc 	bl	80078e4 <xTimerCreateTimerTask>
 8006eec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d116      	bne.n	8006f22 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	613b      	str	r3, [r7, #16]
}
 8006f06:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f08:	4b12      	ldr	r3, [pc, #72]	; (8006f54 <vTaskStartScheduler+0xc0>)
 8006f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f10:	4b11      	ldr	r3, [pc, #68]	; (8006f58 <vTaskStartScheduler+0xc4>)
 8006f12:	2201      	movs	r2, #1
 8006f14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f16:	4b11      	ldr	r3, [pc, #68]	; (8006f5c <vTaskStartScheduler+0xc8>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f1c:	f001 f8b8 	bl	8008090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f20:	e00e      	b.n	8006f40 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f28:	d10a      	bne.n	8006f40 <vTaskStartScheduler+0xac>
	__asm volatile
 8006f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	60fb      	str	r3, [r7, #12]
}
 8006f3c:	bf00      	nop
 8006f3e:	e7fe      	b.n	8006f3e <vTaskStartScheduler+0xaa>
}
 8006f40:	bf00      	nop
 8006f42:	3718      	adds	r7, #24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	08008884 	.word	0x08008884
 8006f4c:	08007579 	.word	0x08007579
 8006f50:	20001434 	.word	0x20001434
 8006f54:	20001430 	.word	0x20001430
 8006f58:	2000141c 	.word	0x2000141c
 8006f5c:	20001414 	.word	0x20001414

08006f60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f60:	b480      	push	{r7}
 8006f62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f64:	4b04      	ldr	r3, [pc, #16]	; (8006f78 <vTaskSuspendAll+0x18>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	4a03      	ldr	r2, [pc, #12]	; (8006f78 <vTaskSuspendAll+0x18>)
 8006f6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f6e:	bf00      	nop
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	20001438 	.word	0x20001438

08006f7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f86:	2300      	movs	r3, #0
 8006f88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f8a:	4b42      	ldr	r3, [pc, #264]	; (8007094 <xTaskResumeAll+0x118>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10a      	bne.n	8006fa8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	603b      	str	r3, [r7, #0]
}
 8006fa4:	bf00      	nop
 8006fa6:	e7fe      	b.n	8006fa6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fa8:	f001 f914 	bl	80081d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fac:	4b39      	ldr	r3, [pc, #228]	; (8007094 <xTaskResumeAll+0x118>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	4a38      	ldr	r2, [pc, #224]	; (8007094 <xTaskResumeAll+0x118>)
 8006fb4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fb6:	4b37      	ldr	r3, [pc, #220]	; (8007094 <xTaskResumeAll+0x118>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d162      	bne.n	8007084 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006fbe:	4b36      	ldr	r3, [pc, #216]	; (8007098 <xTaskResumeAll+0x11c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d05e      	beq.n	8007084 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fc6:	e02f      	b.n	8007028 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fc8:	4b34      	ldr	r3, [pc, #208]	; (800709c <xTaskResumeAll+0x120>)
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3318      	adds	r3, #24
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7ff f871 	bl	80060bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3304      	adds	r3, #4
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7ff f86c 	bl	80060bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe8:	4b2d      	ldr	r3, [pc, #180]	; (80070a0 <xTaskResumeAll+0x124>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d903      	bls.n	8006ff8 <xTaskResumeAll+0x7c>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff4:	4a2a      	ldr	r2, [pc, #168]	; (80070a0 <xTaskResumeAll+0x124>)
 8006ff6:	6013      	str	r3, [r2, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4a27      	ldr	r2, [pc, #156]	; (80070a4 <xTaskResumeAll+0x128>)
 8007006:	441a      	add	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	3304      	adds	r3, #4
 800700c:	4619      	mov	r1, r3
 800700e:	4610      	mov	r0, r2
 8007010:	f7fe fff7 	bl	8006002 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007018:	4b23      	ldr	r3, [pc, #140]	; (80070a8 <xTaskResumeAll+0x12c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701e:	429a      	cmp	r2, r3
 8007020:	d302      	bcc.n	8007028 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007022:	4b22      	ldr	r3, [pc, #136]	; (80070ac <xTaskResumeAll+0x130>)
 8007024:	2201      	movs	r2, #1
 8007026:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007028:	4b1c      	ldr	r3, [pc, #112]	; (800709c <xTaskResumeAll+0x120>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1cb      	bne.n	8006fc8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007036:	f000 fb55 	bl	80076e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800703a:	4b1d      	ldr	r3, [pc, #116]	; (80070b0 <xTaskResumeAll+0x134>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d010      	beq.n	8007068 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007046:	f000 f847 	bl	80070d8 <xTaskIncrementTick>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007050:	4b16      	ldr	r3, [pc, #88]	; (80070ac <xTaskResumeAll+0x130>)
 8007052:	2201      	movs	r2, #1
 8007054:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	3b01      	subs	r3, #1
 800705a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1f1      	bne.n	8007046 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007062:	4b13      	ldr	r3, [pc, #76]	; (80070b0 <xTaskResumeAll+0x134>)
 8007064:	2200      	movs	r2, #0
 8007066:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007068:	4b10      	ldr	r3, [pc, #64]	; (80070ac <xTaskResumeAll+0x130>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d009      	beq.n	8007084 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007070:	2301      	movs	r3, #1
 8007072:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007074:	4b0f      	ldr	r3, [pc, #60]	; (80070b4 <xTaskResumeAll+0x138>)
 8007076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800707a:	601a      	str	r2, [r3, #0]
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007084:	f001 f8d6 	bl	8008234 <vPortExitCritical>

	return xAlreadyYielded;
 8007088:	68bb      	ldr	r3, [r7, #8]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	20001438 	.word	0x20001438
 8007098:	20001410 	.word	0x20001410
 800709c:	200013d0 	.word	0x200013d0
 80070a0:	20001418 	.word	0x20001418
 80070a4:	20000f40 	.word	0x20000f40
 80070a8:	20000f3c 	.word	0x20000f3c
 80070ac:	20001424 	.word	0x20001424
 80070b0:	20001420 	.word	0x20001420
 80070b4:	e000ed04 	.word	0xe000ed04

080070b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070be:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <xTaskGetTickCount+0x1c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070c4:	687b      	ldr	r3, [r7, #4]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	20001414 	.word	0x20001414

080070d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070de:	2300      	movs	r3, #0
 80070e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070e2:	4b4f      	ldr	r3, [pc, #316]	; (8007220 <xTaskIncrementTick+0x148>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f040 808f 	bne.w	800720a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070ec:	4b4d      	ldr	r3, [pc, #308]	; (8007224 <xTaskIncrementTick+0x14c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3301      	adds	r3, #1
 80070f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070f4:	4a4b      	ldr	r2, [pc, #300]	; (8007224 <xTaskIncrementTick+0x14c>)
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d120      	bne.n	8007142 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007100:	4b49      	ldr	r3, [pc, #292]	; (8007228 <xTaskIncrementTick+0x150>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00a      	beq.n	8007120 <xTaskIncrementTick+0x48>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	603b      	str	r3, [r7, #0]
}
 800711c:	bf00      	nop
 800711e:	e7fe      	b.n	800711e <xTaskIncrementTick+0x46>
 8007120:	4b41      	ldr	r3, [pc, #260]	; (8007228 <xTaskIncrementTick+0x150>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	4b41      	ldr	r3, [pc, #260]	; (800722c <xTaskIncrementTick+0x154>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a3f      	ldr	r2, [pc, #252]	; (8007228 <xTaskIncrementTick+0x150>)
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	4a3f      	ldr	r2, [pc, #252]	; (800722c <xTaskIncrementTick+0x154>)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6013      	str	r3, [r2, #0]
 8007134:	4b3e      	ldr	r3, [pc, #248]	; (8007230 <xTaskIncrementTick+0x158>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3301      	adds	r3, #1
 800713a:	4a3d      	ldr	r2, [pc, #244]	; (8007230 <xTaskIncrementTick+0x158>)
 800713c:	6013      	str	r3, [r2, #0]
 800713e:	f000 fad1 	bl	80076e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007142:	4b3c      	ldr	r3, [pc, #240]	; (8007234 <xTaskIncrementTick+0x15c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	429a      	cmp	r2, r3
 800714a:	d349      	bcc.n	80071e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800714c:	4b36      	ldr	r3, [pc, #216]	; (8007228 <xTaskIncrementTick+0x150>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d104      	bne.n	8007160 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007156:	4b37      	ldr	r3, [pc, #220]	; (8007234 <xTaskIncrementTick+0x15c>)
 8007158:	f04f 32ff 	mov.w	r2, #4294967295
 800715c:	601a      	str	r2, [r3, #0]
					break;
 800715e:	e03f      	b.n	80071e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007160:	4b31      	ldr	r3, [pc, #196]	; (8007228 <xTaskIncrementTick+0x150>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	429a      	cmp	r2, r3
 8007176:	d203      	bcs.n	8007180 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007178:	4a2e      	ldr	r2, [pc, #184]	; (8007234 <xTaskIncrementTick+0x15c>)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800717e:	e02f      	b.n	80071e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	3304      	adds	r3, #4
 8007184:	4618      	mov	r0, r3
 8007186:	f7fe ff99 	bl	80060bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718e:	2b00      	cmp	r3, #0
 8007190:	d004      	beq.n	800719c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	3318      	adds	r3, #24
 8007196:	4618      	mov	r0, r3
 8007198:	f7fe ff90 	bl	80060bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a0:	4b25      	ldr	r3, [pc, #148]	; (8007238 <xTaskIncrementTick+0x160>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d903      	bls.n	80071b0 <xTaskIncrementTick+0xd8>
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ac:	4a22      	ldr	r2, [pc, #136]	; (8007238 <xTaskIncrementTick+0x160>)
 80071ae:	6013      	str	r3, [r2, #0]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b4:	4613      	mov	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4a1f      	ldr	r2, [pc, #124]	; (800723c <xTaskIncrementTick+0x164>)
 80071be:	441a      	add	r2, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	3304      	adds	r3, #4
 80071c4:	4619      	mov	r1, r3
 80071c6:	4610      	mov	r0, r2
 80071c8:	f7fe ff1b 	bl	8006002 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d0:	4b1b      	ldr	r3, [pc, #108]	; (8007240 <xTaskIncrementTick+0x168>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d3b8      	bcc.n	800714c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80071da:	2301      	movs	r3, #1
 80071dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071de:	e7b5      	b.n	800714c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071e0:	4b17      	ldr	r3, [pc, #92]	; (8007240 <xTaskIncrementTick+0x168>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e6:	4915      	ldr	r1, [pc, #84]	; (800723c <xTaskIncrementTick+0x164>)
 80071e8:	4613      	mov	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	440b      	add	r3, r1
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d901      	bls.n	80071fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80071f8:	2301      	movs	r3, #1
 80071fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80071fc:	4b11      	ldr	r3, [pc, #68]	; (8007244 <xTaskIncrementTick+0x16c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d007      	beq.n	8007214 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007204:	2301      	movs	r3, #1
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	e004      	b.n	8007214 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800720a:	4b0f      	ldr	r3, [pc, #60]	; (8007248 <xTaskIncrementTick+0x170>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3301      	adds	r3, #1
 8007210:	4a0d      	ldr	r2, [pc, #52]	; (8007248 <xTaskIncrementTick+0x170>)
 8007212:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007214:	697b      	ldr	r3, [r7, #20]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	20001438 	.word	0x20001438
 8007224:	20001414 	.word	0x20001414
 8007228:	200013c8 	.word	0x200013c8
 800722c:	200013cc 	.word	0x200013cc
 8007230:	20001428 	.word	0x20001428
 8007234:	20001430 	.word	0x20001430
 8007238:	20001418 	.word	0x20001418
 800723c:	20000f40 	.word	0x20000f40
 8007240:	20000f3c 	.word	0x20000f3c
 8007244:	20001424 	.word	0x20001424
 8007248:	20001420 	.word	0x20001420

0800724c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007252:	4b28      	ldr	r3, [pc, #160]	; (80072f4 <vTaskSwitchContext+0xa8>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800725a:	4b27      	ldr	r3, [pc, #156]	; (80072f8 <vTaskSwitchContext+0xac>)
 800725c:	2201      	movs	r2, #1
 800725e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007260:	e041      	b.n	80072e6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007262:	4b25      	ldr	r3, [pc, #148]	; (80072f8 <vTaskSwitchContext+0xac>)
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007268:	4b24      	ldr	r3, [pc, #144]	; (80072fc <vTaskSwitchContext+0xb0>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	60fb      	str	r3, [r7, #12]
 800726e:	e010      	b.n	8007292 <vTaskSwitchContext+0x46>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <vTaskSwitchContext+0x40>
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	607b      	str	r3, [r7, #4]
}
 8007288:	bf00      	nop
 800728a:	e7fe      	b.n	800728a <vTaskSwitchContext+0x3e>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	3b01      	subs	r3, #1
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	491b      	ldr	r1, [pc, #108]	; (8007300 <vTaskSwitchContext+0xb4>)
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	4613      	mov	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	440b      	add	r3, r1
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d0e4      	beq.n	8007270 <vTaskSwitchContext+0x24>
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	4613      	mov	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4a13      	ldr	r2, [pc, #76]	; (8007300 <vTaskSwitchContext+0xb4>)
 80072b2:	4413      	add	r3, r2
 80072b4:	60bb      	str	r3, [r7, #8]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	605a      	str	r2, [r3, #4]
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	3308      	adds	r3, #8
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d104      	bne.n	80072d6 <vTaskSwitchContext+0x8a>
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	685a      	ldr	r2, [r3, #4]
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	605a      	str	r2, [r3, #4]
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	4a09      	ldr	r2, [pc, #36]	; (8007304 <vTaskSwitchContext+0xb8>)
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	4a06      	ldr	r2, [pc, #24]	; (80072fc <vTaskSwitchContext+0xb0>)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6013      	str	r3, [r2, #0]
}
 80072e6:	bf00      	nop
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	20001438 	.word	0x20001438
 80072f8:	20001424 	.word	0x20001424
 80072fc:	20001418 	.word	0x20001418
 8007300:	20000f40 	.word	0x20000f40
 8007304:	20000f3c 	.word	0x20000f3c

08007308 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10a      	bne.n	800732e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	60fb      	str	r3, [r7, #12]
}
 800732a:	bf00      	nop
 800732c:	e7fe      	b.n	800732c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800732e:	4b07      	ldr	r3, [pc, #28]	; (800734c <vTaskPlaceOnEventList+0x44>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3318      	adds	r3, #24
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7fe fe87 	bl	800604a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800733c:	2101      	movs	r1, #1
 800733e:	6838      	ldr	r0, [r7, #0]
 8007340:	f000 fa7c 	bl	800783c <prvAddCurrentTaskToDelayedList>
}
 8007344:	bf00      	nop
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	20000f3c 	.word	0x20000f3c

08007350 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10a      	bne.n	8007378 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	617b      	str	r3, [r7, #20]
}
 8007374:	bf00      	nop
 8007376:	e7fe      	b.n	8007376 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007378:	4b0a      	ldr	r3, [pc, #40]	; (80073a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3318      	adds	r3, #24
 800737e:	4619      	mov	r1, r3
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f7fe fe3e 	bl	8006002 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800738c:	f04f 33ff 	mov.w	r3, #4294967295
 8007390:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007392:	6879      	ldr	r1, [r7, #4]
 8007394:	68b8      	ldr	r0, [r7, #8]
 8007396:	f000 fa51 	bl	800783c <prvAddCurrentTaskToDelayedList>
	}
 800739a:	bf00      	nop
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	20000f3c 	.word	0x20000f3c

080073a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10a      	bne.n	80073d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80073be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	60fb      	str	r3, [r7, #12]
}
 80073d0:	bf00      	nop
 80073d2:	e7fe      	b.n	80073d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	3318      	adds	r3, #24
 80073d8:	4618      	mov	r0, r3
 80073da:	f7fe fe6f 	bl	80060bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073de:	4b1e      	ldr	r3, [pc, #120]	; (8007458 <xTaskRemoveFromEventList+0xb0>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d11d      	bne.n	8007422 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	3304      	adds	r3, #4
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe fe66 	bl	80060bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f4:	4b19      	ldr	r3, [pc, #100]	; (800745c <xTaskRemoveFromEventList+0xb4>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d903      	bls.n	8007404 <xTaskRemoveFromEventList+0x5c>
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007400:	4a16      	ldr	r2, [pc, #88]	; (800745c <xTaskRemoveFromEventList+0xb4>)
 8007402:	6013      	str	r3, [r2, #0]
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007408:	4613      	mov	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4a13      	ldr	r2, [pc, #76]	; (8007460 <xTaskRemoveFromEventList+0xb8>)
 8007412:	441a      	add	r2, r3
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	3304      	adds	r3, #4
 8007418:	4619      	mov	r1, r3
 800741a:	4610      	mov	r0, r2
 800741c:	f7fe fdf1 	bl	8006002 <vListInsertEnd>
 8007420:	e005      	b.n	800742e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	3318      	adds	r3, #24
 8007426:	4619      	mov	r1, r3
 8007428:	480e      	ldr	r0, [pc, #56]	; (8007464 <xTaskRemoveFromEventList+0xbc>)
 800742a:	f7fe fdea 	bl	8006002 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007432:	4b0d      	ldr	r3, [pc, #52]	; (8007468 <xTaskRemoveFromEventList+0xc0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007438:	429a      	cmp	r2, r3
 800743a:	d905      	bls.n	8007448 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800743c:	2301      	movs	r3, #1
 800743e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007440:	4b0a      	ldr	r3, [pc, #40]	; (800746c <xTaskRemoveFromEventList+0xc4>)
 8007442:	2201      	movs	r2, #1
 8007444:	601a      	str	r2, [r3, #0]
 8007446:	e001      	b.n	800744c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007448:	2300      	movs	r3, #0
 800744a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800744c:	697b      	ldr	r3, [r7, #20]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20001438 	.word	0x20001438
 800745c:	20001418 	.word	0x20001418
 8007460:	20000f40 	.word	0x20000f40
 8007464:	200013d0 	.word	0x200013d0
 8007468:	20000f3c 	.word	0x20000f3c
 800746c:	20001424 	.word	0x20001424

08007470 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007478:	4b06      	ldr	r3, [pc, #24]	; (8007494 <vTaskInternalSetTimeOutState+0x24>)
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007480:	4b05      	ldr	r3, [pc, #20]	; (8007498 <vTaskInternalSetTimeOutState+0x28>)
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	605a      	str	r2, [r3, #4]
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	20001428 	.word	0x20001428
 8007498:	20001414 	.word	0x20001414

0800749c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10a      	bne.n	80074c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	613b      	str	r3, [r7, #16]
}
 80074be:	bf00      	nop
 80074c0:	e7fe      	b.n	80074c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10a      	bne.n	80074de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	60fb      	str	r3, [r7, #12]
}
 80074da:	bf00      	nop
 80074dc:	e7fe      	b.n	80074dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80074de:	f000 fe79 	bl	80081d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80074e2:	4b1d      	ldr	r3, [pc, #116]	; (8007558 <xTaskCheckForTimeOut+0xbc>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fa:	d102      	bne.n	8007502 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074fc:	2300      	movs	r3, #0
 80074fe:	61fb      	str	r3, [r7, #28]
 8007500:	e023      	b.n	800754a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	4b15      	ldr	r3, [pc, #84]	; (800755c <xTaskCheckForTimeOut+0xc0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	429a      	cmp	r2, r3
 800750c:	d007      	beq.n	800751e <xTaskCheckForTimeOut+0x82>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	69ba      	ldr	r2, [r7, #24]
 8007514:	429a      	cmp	r2, r3
 8007516:	d302      	bcc.n	800751e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007518:	2301      	movs	r3, #1
 800751a:	61fb      	str	r3, [r7, #28]
 800751c:	e015      	b.n	800754a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	429a      	cmp	r2, r3
 8007526:	d20b      	bcs.n	8007540 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	1ad2      	subs	r2, r2, r3
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff ff9b 	bl	8007470 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800753a:	2300      	movs	r3, #0
 800753c:	61fb      	str	r3, [r7, #28]
 800753e:	e004      	b.n	800754a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2200      	movs	r2, #0
 8007544:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007546:	2301      	movs	r3, #1
 8007548:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800754a:	f000 fe73 	bl	8008234 <vPortExitCritical>

	return xReturn;
 800754e:	69fb      	ldr	r3, [r7, #28]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3720      	adds	r7, #32
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	20001414 	.word	0x20001414
 800755c:	20001428 	.word	0x20001428

08007560 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007564:	4b03      	ldr	r3, [pc, #12]	; (8007574 <vTaskMissedYield+0x14>)
 8007566:	2201      	movs	r2, #1
 8007568:	601a      	str	r2, [r3, #0]
}
 800756a:	bf00      	nop
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	20001424 	.word	0x20001424

08007578 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007580:	f000 f852 	bl	8007628 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007584:	4b06      	ldr	r3, [pc, #24]	; (80075a0 <prvIdleTask+0x28>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d9f9      	bls.n	8007580 <prvIdleTask+0x8>
			{
				taskYIELD();
 800758c:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <prvIdleTask+0x2c>)
 800758e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800759c:	e7f0      	b.n	8007580 <prvIdleTask+0x8>
 800759e:	bf00      	nop
 80075a0:	20000f40 	.word	0x20000f40
 80075a4:	e000ed04 	.word	0xe000ed04

080075a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075ae:	2300      	movs	r3, #0
 80075b0:	607b      	str	r3, [r7, #4]
 80075b2:	e00c      	b.n	80075ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4a12      	ldr	r2, [pc, #72]	; (8007608 <prvInitialiseTaskLists+0x60>)
 80075c0:	4413      	add	r3, r2
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fe fcf0 	bl	8005fa8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	3301      	adds	r3, #1
 80075cc:	607b      	str	r3, [r7, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b37      	cmp	r3, #55	; 0x37
 80075d2:	d9ef      	bls.n	80075b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075d4:	480d      	ldr	r0, [pc, #52]	; (800760c <prvInitialiseTaskLists+0x64>)
 80075d6:	f7fe fce7 	bl	8005fa8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075da:	480d      	ldr	r0, [pc, #52]	; (8007610 <prvInitialiseTaskLists+0x68>)
 80075dc:	f7fe fce4 	bl	8005fa8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075e0:	480c      	ldr	r0, [pc, #48]	; (8007614 <prvInitialiseTaskLists+0x6c>)
 80075e2:	f7fe fce1 	bl	8005fa8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075e6:	480c      	ldr	r0, [pc, #48]	; (8007618 <prvInitialiseTaskLists+0x70>)
 80075e8:	f7fe fcde 	bl	8005fa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075ec:	480b      	ldr	r0, [pc, #44]	; (800761c <prvInitialiseTaskLists+0x74>)
 80075ee:	f7fe fcdb 	bl	8005fa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075f2:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <prvInitialiseTaskLists+0x78>)
 80075f4:	4a05      	ldr	r2, [pc, #20]	; (800760c <prvInitialiseTaskLists+0x64>)
 80075f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075f8:	4b0a      	ldr	r3, [pc, #40]	; (8007624 <prvInitialiseTaskLists+0x7c>)
 80075fa:	4a05      	ldr	r2, [pc, #20]	; (8007610 <prvInitialiseTaskLists+0x68>)
 80075fc:	601a      	str	r2, [r3, #0]
}
 80075fe:	bf00      	nop
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20000f40 	.word	0x20000f40
 800760c:	200013a0 	.word	0x200013a0
 8007610:	200013b4 	.word	0x200013b4
 8007614:	200013d0 	.word	0x200013d0
 8007618:	200013e4 	.word	0x200013e4
 800761c:	200013fc 	.word	0x200013fc
 8007620:	200013c8 	.word	0x200013c8
 8007624:	200013cc 	.word	0x200013cc

08007628 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800762e:	e019      	b.n	8007664 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007630:	f000 fdd0 	bl	80081d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007634:	4b10      	ldr	r3, [pc, #64]	; (8007678 <prvCheckTasksWaitingTermination+0x50>)
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	3304      	adds	r3, #4
 8007640:	4618      	mov	r0, r3
 8007642:	f7fe fd3b 	bl	80060bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007646:	4b0d      	ldr	r3, [pc, #52]	; (800767c <prvCheckTasksWaitingTermination+0x54>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3b01      	subs	r3, #1
 800764c:	4a0b      	ldr	r2, [pc, #44]	; (800767c <prvCheckTasksWaitingTermination+0x54>)
 800764e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007650:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <prvCheckTasksWaitingTermination+0x58>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3b01      	subs	r3, #1
 8007656:	4a0a      	ldr	r2, [pc, #40]	; (8007680 <prvCheckTasksWaitingTermination+0x58>)
 8007658:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800765a:	f000 fdeb 	bl	8008234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f810 	bl	8007684 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007664:	4b06      	ldr	r3, [pc, #24]	; (8007680 <prvCheckTasksWaitingTermination+0x58>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e1      	bne.n	8007630 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800766c:	bf00      	nop
 800766e:	bf00      	nop
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	200013e4 	.word	0x200013e4
 800767c:	20001410 	.word	0x20001410
 8007680:	200013f8 	.word	0x200013f8

08007684 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007692:	2b00      	cmp	r3, #0
 8007694:	d108      	bne.n	80076a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769a:	4618      	mov	r0, r3
 800769c:	f000 ff88 	bl	80085b0 <vPortFree>
				vPortFree( pxTCB );
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 ff85 	bl	80085b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076a6:	e018      	b.n	80076da <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d103      	bne.n	80076ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 ff7c 	bl	80085b0 <vPortFree>
	}
 80076b8:	e00f      	b.n	80076da <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d00a      	beq.n	80076da <prvDeleteTCB+0x56>
	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	60fb      	str	r3, [r7, #12]
}
 80076d6:	bf00      	nop
 80076d8:	e7fe      	b.n	80076d8 <prvDeleteTCB+0x54>
	}
 80076da:	bf00      	nop
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
	...

080076e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076ea:	4b0c      	ldr	r3, [pc, #48]	; (800771c <prvResetNextTaskUnblockTime+0x38>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d104      	bne.n	80076fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076f4:	4b0a      	ldr	r3, [pc, #40]	; (8007720 <prvResetNextTaskUnblockTime+0x3c>)
 80076f6:	f04f 32ff 	mov.w	r2, #4294967295
 80076fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076fc:	e008      	b.n	8007710 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076fe:	4b07      	ldr	r3, [pc, #28]	; (800771c <prvResetNextTaskUnblockTime+0x38>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	4a04      	ldr	r2, [pc, #16]	; (8007720 <prvResetNextTaskUnblockTime+0x3c>)
 800770e:	6013      	str	r3, [r2, #0]
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	200013c8 	.word	0x200013c8
 8007720:	20001430 	.word	0x20001430

08007724 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800772a:	4b0b      	ldr	r3, [pc, #44]	; (8007758 <xTaskGetSchedulerState+0x34>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d102      	bne.n	8007738 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007732:	2301      	movs	r3, #1
 8007734:	607b      	str	r3, [r7, #4]
 8007736:	e008      	b.n	800774a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007738:	4b08      	ldr	r3, [pc, #32]	; (800775c <xTaskGetSchedulerState+0x38>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d102      	bne.n	8007746 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007740:	2302      	movs	r3, #2
 8007742:	607b      	str	r3, [r7, #4]
 8007744:	e001      	b.n	800774a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007746:	2300      	movs	r3, #0
 8007748:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800774a:	687b      	ldr	r3, [r7, #4]
	}
 800774c:	4618      	mov	r0, r3
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	2000141c 	.word	0x2000141c
 800775c:	20001438 	.word	0x20001438

08007760 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800776c:	2300      	movs	r3, #0
 800776e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d056      	beq.n	8007824 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007776:	4b2e      	ldr	r3, [pc, #184]	; (8007830 <xTaskPriorityDisinherit+0xd0>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	429a      	cmp	r2, r3
 800777e:	d00a      	beq.n	8007796 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	60fb      	str	r3, [r7, #12]
}
 8007792:	bf00      	nop
 8007794:	e7fe      	b.n	8007794 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10a      	bne.n	80077b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800779e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	60bb      	str	r3, [r7, #8]
}
 80077b0:	bf00      	nop
 80077b2:	e7fe      	b.n	80077b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b8:	1e5a      	subs	r2, r3, #1
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d02c      	beq.n	8007824 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d128      	bne.n	8007824 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	3304      	adds	r3, #4
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fe fc70 	bl	80060bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f4:	4b0f      	ldr	r3, [pc, #60]	; (8007834 <xTaskPriorityDisinherit+0xd4>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d903      	bls.n	8007804 <xTaskPriorityDisinherit+0xa4>
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	4a0c      	ldr	r2, [pc, #48]	; (8007834 <xTaskPriorityDisinherit+0xd4>)
 8007802:	6013      	str	r3, [r2, #0]
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007808:	4613      	mov	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4a09      	ldr	r2, [pc, #36]	; (8007838 <xTaskPriorityDisinherit+0xd8>)
 8007812:	441a      	add	r2, r3
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	3304      	adds	r3, #4
 8007818:	4619      	mov	r1, r3
 800781a:	4610      	mov	r0, r2
 800781c:	f7fe fbf1 	bl	8006002 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007820:	2301      	movs	r3, #1
 8007822:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007824:	697b      	ldr	r3, [r7, #20]
	}
 8007826:	4618      	mov	r0, r3
 8007828:	3718      	adds	r7, #24
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20000f3c 	.word	0x20000f3c
 8007834:	20001418 	.word	0x20001418
 8007838:	20000f40 	.word	0x20000f40

0800783c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007846:	4b21      	ldr	r3, [pc, #132]	; (80078cc <prvAddCurrentTaskToDelayedList+0x90>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800784c:	4b20      	ldr	r3, [pc, #128]	; (80078d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3304      	adds	r3, #4
 8007852:	4618      	mov	r0, r3
 8007854:	f7fe fc32 	bl	80060bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785e:	d10a      	bne.n	8007876 <prvAddCurrentTaskToDelayedList+0x3a>
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d007      	beq.n	8007876 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007866:	4b1a      	ldr	r3, [pc, #104]	; (80078d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3304      	adds	r3, #4
 800786c:	4619      	mov	r1, r3
 800786e:	4819      	ldr	r0, [pc, #100]	; (80078d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007870:	f7fe fbc7 	bl	8006002 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007874:	e026      	b.n	80078c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4413      	add	r3, r2
 800787c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800787e:	4b14      	ldr	r3, [pc, #80]	; (80078d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	429a      	cmp	r2, r3
 800788c:	d209      	bcs.n	80078a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800788e:	4b12      	ldr	r3, [pc, #72]	; (80078d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	4b0f      	ldr	r3, [pc, #60]	; (80078d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3304      	adds	r3, #4
 8007898:	4619      	mov	r1, r3
 800789a:	4610      	mov	r0, r2
 800789c:	f7fe fbd5 	bl	800604a <vListInsert>
}
 80078a0:	e010      	b.n	80078c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078a2:	4b0e      	ldr	r3, [pc, #56]	; (80078dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	4b0a      	ldr	r3, [pc, #40]	; (80078d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3304      	adds	r3, #4
 80078ac:	4619      	mov	r1, r3
 80078ae:	4610      	mov	r0, r2
 80078b0:	f7fe fbcb 	bl	800604a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078b4:	4b0a      	ldr	r3, [pc, #40]	; (80078e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d202      	bcs.n	80078c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80078be:	4a08      	ldr	r2, [pc, #32]	; (80078e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	6013      	str	r3, [r2, #0]
}
 80078c4:	bf00      	nop
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	20001414 	.word	0x20001414
 80078d0:	20000f3c 	.word	0x20000f3c
 80078d4:	200013fc 	.word	0x200013fc
 80078d8:	200013cc 	.word	0x200013cc
 80078dc:	200013c8 	.word	0x200013c8
 80078e0:	20001430 	.word	0x20001430

080078e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08a      	sub	sp, #40	; 0x28
 80078e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80078ee:	f000 fb07 	bl	8007f00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80078f2:	4b1c      	ldr	r3, [pc, #112]	; (8007964 <xTimerCreateTimerTask+0x80>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d021      	beq.n	800793e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80078fa:	2300      	movs	r3, #0
 80078fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80078fe:	2300      	movs	r3, #0
 8007900:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007902:	1d3a      	adds	r2, r7, #4
 8007904:	f107 0108 	add.w	r1, r7, #8
 8007908:	f107 030c 	add.w	r3, r7, #12
 800790c:	4618      	mov	r0, r3
 800790e:	f7fe fb31 	bl	8005f74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007912:	6879      	ldr	r1, [r7, #4]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	9202      	str	r2, [sp, #8]
 800791a:	9301      	str	r3, [sp, #4]
 800791c:	2302      	movs	r3, #2
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	2300      	movs	r3, #0
 8007922:	460a      	mov	r2, r1
 8007924:	4910      	ldr	r1, [pc, #64]	; (8007968 <xTimerCreateTimerTask+0x84>)
 8007926:	4811      	ldr	r0, [pc, #68]	; (800796c <xTimerCreateTimerTask+0x88>)
 8007928:	f7ff f8de 	bl	8006ae8 <xTaskCreateStatic>
 800792c:	4603      	mov	r3, r0
 800792e:	4a10      	ldr	r2, [pc, #64]	; (8007970 <xTimerCreateTimerTask+0x8c>)
 8007930:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007932:	4b0f      	ldr	r3, [pc, #60]	; (8007970 <xTimerCreateTimerTask+0x8c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800793a:	2301      	movs	r3, #1
 800793c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	613b      	str	r3, [r7, #16]
}
 8007956:	bf00      	nop
 8007958:	e7fe      	b.n	8007958 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800795a:	697b      	ldr	r3, [r7, #20]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	2000146c 	.word	0x2000146c
 8007968:	0800888c 	.word	0x0800888c
 800796c:	08007aa9 	.word	0x08007aa9
 8007970:	20001470 	.word	0x20001470

08007974 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b08a      	sub	sp, #40	; 0x28
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007982:	2300      	movs	r3, #0
 8007984:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10a      	bne.n	80079a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800798c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007990:	f383 8811 	msr	BASEPRI, r3
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	623b      	str	r3, [r7, #32]
}
 800799e:	bf00      	nop
 80079a0:	e7fe      	b.n	80079a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80079a2:	4b1a      	ldr	r3, [pc, #104]	; (8007a0c <xTimerGenericCommand+0x98>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d02a      	beq.n	8007a00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2b05      	cmp	r3, #5
 80079ba:	dc18      	bgt.n	80079ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80079bc:	f7ff feb2 	bl	8007724 <xTaskGetSchedulerState>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d109      	bne.n	80079da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80079c6:	4b11      	ldr	r3, [pc, #68]	; (8007a0c <xTimerGenericCommand+0x98>)
 80079c8:	6818      	ldr	r0, [r3, #0]
 80079ca:	f107 0110 	add.w	r1, r7, #16
 80079ce:	2300      	movs	r3, #0
 80079d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079d2:	f7fe fca1 	bl	8006318 <xQueueGenericSend>
 80079d6:	6278      	str	r0, [r7, #36]	; 0x24
 80079d8:	e012      	b.n	8007a00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80079da:	4b0c      	ldr	r3, [pc, #48]	; (8007a0c <xTimerGenericCommand+0x98>)
 80079dc:	6818      	ldr	r0, [r3, #0]
 80079de:	f107 0110 	add.w	r1, r7, #16
 80079e2:	2300      	movs	r3, #0
 80079e4:	2200      	movs	r2, #0
 80079e6:	f7fe fc97 	bl	8006318 <xQueueGenericSend>
 80079ea:	6278      	str	r0, [r7, #36]	; 0x24
 80079ec:	e008      	b.n	8007a00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80079ee:	4b07      	ldr	r3, [pc, #28]	; (8007a0c <xTimerGenericCommand+0x98>)
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	f107 0110 	add.w	r1, r7, #16
 80079f6:	2300      	movs	r3, #0
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	f7fe fd8b 	bl	8006514 <xQueueGenericSendFromISR>
 80079fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3728      	adds	r7, #40	; 0x28
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	2000146c 	.word	0x2000146c

08007a10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af02      	add	r7, sp, #8
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a1a:	4b22      	ldr	r3, [pc, #136]	; (8007aa4 <prvProcessExpiredTimer+0x94>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	3304      	adds	r3, #4
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fe fb47 	bl	80060bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d022      	beq.n	8007a82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	699a      	ldr	r2, [r3, #24]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	18d1      	adds	r1, r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	6978      	ldr	r0, [r7, #20]
 8007a4a:	f000 f8d1 	bl	8007bf0 <prvInsertTimerInActiveList>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d01f      	beq.n	8007a94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a54:	2300      	movs	r3, #0
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	2300      	movs	r3, #0
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	6978      	ldr	r0, [r7, #20]
 8007a60:	f7ff ff88 	bl	8007974 <xTimerGenericCommand>
 8007a64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d113      	bne.n	8007a94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a70:	f383 8811 	msr	BASEPRI, r3
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	60fb      	str	r3, [r7, #12]
}
 8007a7e:	bf00      	nop
 8007a80:	e7fe      	b.n	8007a80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a88:	f023 0301 	bic.w	r3, r3, #1
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	6a1b      	ldr	r3, [r3, #32]
 8007a98:	6978      	ldr	r0, [r7, #20]
 8007a9a:	4798      	blx	r3
}
 8007a9c:	bf00      	nop
 8007a9e:	3718      	adds	r7, #24
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	20001464 	.word	0x20001464

08007aa8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ab0:	f107 0308 	add.w	r3, r7, #8
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 f857 	bl	8007b68 <prvGetNextExpireTime>
 8007aba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	4619      	mov	r1, r3
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 f803 	bl	8007acc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ac6:	f000 f8d5 	bl	8007c74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007aca:	e7f1      	b.n	8007ab0 <prvTimerTask+0x8>

08007acc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007ad6:	f7ff fa43 	bl	8006f60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ada:	f107 0308 	add.w	r3, r7, #8
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 f866 	bl	8007bb0 <prvSampleTimeNow>
 8007ae4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d130      	bne.n	8007b4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10a      	bne.n	8007b08 <prvProcessTimerOrBlockTask+0x3c>
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d806      	bhi.n	8007b08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007afa:	f7ff fa3f 	bl	8006f7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007afe:	68f9      	ldr	r1, [r7, #12]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7ff ff85 	bl	8007a10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b06:	e024      	b.n	8007b52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d008      	beq.n	8007b20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b0e:	4b13      	ldr	r3, [pc, #76]	; (8007b5c <prvProcessTimerOrBlockTask+0x90>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d101      	bne.n	8007b1c <prvProcessTimerOrBlockTask+0x50>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e000      	b.n	8007b1e <prvProcessTimerOrBlockTask+0x52>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b20:	4b0f      	ldr	r3, [pc, #60]	; (8007b60 <prvProcessTimerOrBlockTask+0x94>)
 8007b22:	6818      	ldr	r0, [r3, #0]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	f7fe ffa7 	bl	8006a80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b32:	f7ff fa23 	bl	8006f7c <xTaskResumeAll>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10a      	bne.n	8007b52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b3c:	4b09      	ldr	r3, [pc, #36]	; (8007b64 <prvProcessTimerOrBlockTask+0x98>)
 8007b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	f3bf 8f6f 	isb	sy
}
 8007b4c:	e001      	b.n	8007b52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b4e:	f7ff fa15 	bl	8006f7c <xTaskResumeAll>
}
 8007b52:	bf00      	nop
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	20001468 	.word	0x20001468
 8007b60:	2000146c 	.word	0x2000146c
 8007b64:	e000ed04 	.word	0xe000ed04

08007b68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b70:	4b0e      	ldr	r3, [pc, #56]	; (8007bac <prvGetNextExpireTime+0x44>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <prvGetNextExpireTime+0x16>
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	e000      	b.n	8007b80 <prvGetNextExpireTime+0x18>
 8007b7e:	2200      	movs	r2, #0
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d105      	bne.n	8007b98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b8c:	4b07      	ldr	r3, [pc, #28]	; (8007bac <prvGetNextExpireTime+0x44>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	60fb      	str	r3, [r7, #12]
 8007b96:	e001      	b.n	8007b9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	20001464 	.word	0x20001464

08007bb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007bb8:	f7ff fa7e 	bl	80070b8 <xTaskGetTickCount>
 8007bbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007bbe:	4b0b      	ldr	r3, [pc, #44]	; (8007bec <prvSampleTimeNow+0x3c>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d205      	bcs.n	8007bd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007bc8:	f000 f936 	bl	8007e38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	e002      	b.n	8007bda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007bda:	4a04      	ldr	r2, [pc, #16]	; (8007bec <prvSampleTimeNow+0x3c>)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007be0:	68fb      	ldr	r3, [r7, #12]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	20001474 	.word	0x20001474

08007bf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d812      	bhi.n	8007c3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	1ad2      	subs	r2, r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d302      	bcc.n	8007c2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c24:	2301      	movs	r3, #1
 8007c26:	617b      	str	r3, [r7, #20]
 8007c28:	e01b      	b.n	8007c62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c2a:	4b10      	ldr	r3, [pc, #64]	; (8007c6c <prvInsertTimerInActiveList+0x7c>)
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3304      	adds	r3, #4
 8007c32:	4619      	mov	r1, r3
 8007c34:	4610      	mov	r0, r2
 8007c36:	f7fe fa08 	bl	800604a <vListInsert>
 8007c3a:	e012      	b.n	8007c62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d206      	bcs.n	8007c52 <prvInsertTimerInActiveList+0x62>
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d302      	bcc.n	8007c52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	e007      	b.n	8007c62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c52:	4b07      	ldr	r3, [pc, #28]	; (8007c70 <prvInsertTimerInActiveList+0x80>)
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	3304      	adds	r3, #4
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	f7fe f9f4 	bl	800604a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c62:	697b      	ldr	r3, [r7, #20]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	20001468 	.word	0x20001468
 8007c70:	20001464 	.word	0x20001464

08007c74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08e      	sub	sp, #56	; 0x38
 8007c78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c7a:	e0ca      	b.n	8007e12 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	da18      	bge.n	8007cb4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c82:	1d3b      	adds	r3, r7, #4
 8007c84:	3304      	adds	r3, #4
 8007c86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10a      	bne.n	8007ca4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	61fb      	str	r3, [r7, #28]
}
 8007ca0:	bf00      	nop
 8007ca2:	e7fe      	b.n	8007ca2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007caa:	6850      	ldr	r0, [r2, #4]
 8007cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cae:	6892      	ldr	r2, [r2, #8]
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f2c0 80aa 	blt.w	8007e10 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d004      	beq.n	8007cd2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	3304      	adds	r3, #4
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7fe f9f5 	bl	80060bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cd2:	463b      	mov	r3, r7
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7ff ff6b 	bl	8007bb0 <prvSampleTimeNow>
 8007cda:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b09      	cmp	r3, #9
 8007ce0:	f200 8097 	bhi.w	8007e12 <prvProcessReceivedCommands+0x19e>
 8007ce4:	a201      	add	r2, pc, #4	; (adr r2, 8007cec <prvProcessReceivedCommands+0x78>)
 8007ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cea:	bf00      	nop
 8007cec:	08007d15 	.word	0x08007d15
 8007cf0:	08007d15 	.word	0x08007d15
 8007cf4:	08007d15 	.word	0x08007d15
 8007cf8:	08007d89 	.word	0x08007d89
 8007cfc:	08007d9d 	.word	0x08007d9d
 8007d00:	08007de7 	.word	0x08007de7
 8007d04:	08007d15 	.word	0x08007d15
 8007d08:	08007d15 	.word	0x08007d15
 8007d0c:	08007d89 	.word	0x08007d89
 8007d10:	08007d9d 	.word	0x08007d9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d1a:	f043 0301 	orr.w	r3, r3, #1
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	18d1      	adds	r1, r2, r3
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d34:	f7ff ff5c 	bl	8007bf0 <prvInsertTimerInActiveList>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d069      	beq.n	8007e12 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d4c:	f003 0304 	and.w	r3, r3, #4
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d05e      	beq.n	8007e12 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	441a      	add	r2, r3
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	2300      	movs	r3, #0
 8007d62:	2100      	movs	r1, #0
 8007d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d66:	f7ff fe05 	bl	8007974 <xTimerGenericCommand>
 8007d6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d14f      	bne.n	8007e12 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	61bb      	str	r3, [r7, #24]
}
 8007d84:	bf00      	nop
 8007d86:	e7fe      	b.n	8007d86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d8e:	f023 0301 	bic.w	r3, r3, #1
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007d9a:	e03a      	b.n	8007e12 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007da2:	f043 0301 	orr.w	r3, r3, #1
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007daa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10a      	bne.n	8007dd2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	617b      	str	r3, [r7, #20]
}
 8007dce:	bf00      	nop
 8007dd0:	e7fe      	b.n	8007dd0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd4:	699a      	ldr	r2, [r3, #24]
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd8:	18d1      	adds	r1, r2, r3
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007de0:	f7ff ff06 	bl	8007bf0 <prvInsertTimerInActiveList>
					break;
 8007de4:	e015      	b.n	8007e12 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dec:	f003 0302 	and.w	r3, r3, #2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d103      	bne.n	8007dfc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007df6:	f000 fbdb 	bl	80085b0 <vPortFree>
 8007dfa:	e00a      	b.n	8007e12 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e02:	f023 0301 	bic.w	r3, r3, #1
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e0e:	e000      	b.n	8007e12 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007e10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e12:	4b08      	ldr	r3, [pc, #32]	; (8007e34 <prvProcessReceivedCommands+0x1c0>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	1d39      	adds	r1, r7, #4
 8007e18:	2200      	movs	r2, #0
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe fc16 	bl	800664c <xQueueReceive>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f47f af2a 	bne.w	8007c7c <prvProcessReceivedCommands+0x8>
	}
}
 8007e28:	bf00      	nop
 8007e2a:	bf00      	nop
 8007e2c:	3730      	adds	r7, #48	; 0x30
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	2000146c 	.word	0x2000146c

08007e38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b088      	sub	sp, #32
 8007e3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e3e:	e048      	b.n	8007ed2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e40:	4b2d      	ldr	r3, [pc, #180]	; (8007ef8 <prvSwitchTimerLists+0xc0>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e4a:	4b2b      	ldr	r3, [pc, #172]	; (8007ef8 <prvSwitchTimerLists+0xc0>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3304      	adds	r3, #4
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fe f92f 	bl	80060bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e6c:	f003 0304 	and.w	r3, r3, #4
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d02e      	beq.n	8007ed2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d90e      	bls.n	8007ea4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e92:	4b19      	ldr	r3, [pc, #100]	; (8007ef8 <prvSwitchTimerLists+0xc0>)
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	3304      	adds	r3, #4
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	f7fe f8d4 	bl	800604a <vListInsert>
 8007ea2:	e016      	b.n	8007ed2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	2100      	movs	r1, #0
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f7ff fd60 	bl	8007974 <xTimerGenericCommand>
 8007eb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10a      	bne.n	8007ed2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	603b      	str	r3, [r7, #0]
}
 8007ece:	bf00      	nop
 8007ed0:	e7fe      	b.n	8007ed0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ed2:	4b09      	ldr	r3, [pc, #36]	; (8007ef8 <prvSwitchTimerLists+0xc0>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1b1      	bne.n	8007e40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007edc:	4b06      	ldr	r3, [pc, #24]	; (8007ef8 <prvSwitchTimerLists+0xc0>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007ee2:	4b06      	ldr	r3, [pc, #24]	; (8007efc <prvSwitchTimerLists+0xc4>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a04      	ldr	r2, [pc, #16]	; (8007ef8 <prvSwitchTimerLists+0xc0>)
 8007ee8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007eea:	4a04      	ldr	r2, [pc, #16]	; (8007efc <prvSwitchTimerLists+0xc4>)
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	6013      	str	r3, [r2, #0]
}
 8007ef0:	bf00      	nop
 8007ef2:	3718      	adds	r7, #24
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	20001464 	.word	0x20001464
 8007efc:	20001468 	.word	0x20001468

08007f00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f06:	f000 f965 	bl	80081d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f0a:	4b15      	ldr	r3, [pc, #84]	; (8007f60 <prvCheckForValidListAndQueue+0x60>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d120      	bne.n	8007f54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f12:	4814      	ldr	r0, [pc, #80]	; (8007f64 <prvCheckForValidListAndQueue+0x64>)
 8007f14:	f7fe f848 	bl	8005fa8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f18:	4813      	ldr	r0, [pc, #76]	; (8007f68 <prvCheckForValidListAndQueue+0x68>)
 8007f1a:	f7fe f845 	bl	8005fa8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f1e:	4b13      	ldr	r3, [pc, #76]	; (8007f6c <prvCheckForValidListAndQueue+0x6c>)
 8007f20:	4a10      	ldr	r2, [pc, #64]	; (8007f64 <prvCheckForValidListAndQueue+0x64>)
 8007f22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f24:	4b12      	ldr	r3, [pc, #72]	; (8007f70 <prvCheckForValidListAndQueue+0x70>)
 8007f26:	4a10      	ldr	r2, [pc, #64]	; (8007f68 <prvCheckForValidListAndQueue+0x68>)
 8007f28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	4b11      	ldr	r3, [pc, #68]	; (8007f74 <prvCheckForValidListAndQueue+0x74>)
 8007f30:	4a11      	ldr	r2, [pc, #68]	; (8007f78 <prvCheckForValidListAndQueue+0x78>)
 8007f32:	2110      	movs	r1, #16
 8007f34:	200a      	movs	r0, #10
 8007f36:	f7fe f953 	bl	80061e0 <xQueueGenericCreateStatic>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	4a08      	ldr	r2, [pc, #32]	; (8007f60 <prvCheckForValidListAndQueue+0x60>)
 8007f3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f40:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <prvCheckForValidListAndQueue+0x60>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d005      	beq.n	8007f54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f48:	4b05      	ldr	r3, [pc, #20]	; (8007f60 <prvCheckForValidListAndQueue+0x60>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	490b      	ldr	r1, [pc, #44]	; (8007f7c <prvCheckForValidListAndQueue+0x7c>)
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fe fd6c 	bl	8006a2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f54:	f000 f96e 	bl	8008234 <vPortExitCritical>
}
 8007f58:	bf00      	nop
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	2000146c 	.word	0x2000146c
 8007f64:	2000143c 	.word	0x2000143c
 8007f68:	20001450 	.word	0x20001450
 8007f6c:	20001464 	.word	0x20001464
 8007f70:	20001468 	.word	0x20001468
 8007f74:	20001518 	.word	0x20001518
 8007f78:	20001478 	.word	0x20001478
 8007f7c:	08008894 	.word	0x08008894

08007f80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	3b04      	subs	r3, #4
 8007f90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	3b04      	subs	r3, #4
 8007f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	f023 0201 	bic.w	r2, r3, #1
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	3b04      	subs	r3, #4
 8007fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007fb0:	4a0c      	ldr	r2, [pc, #48]	; (8007fe4 <pxPortInitialiseStack+0x64>)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	3b14      	subs	r3, #20
 8007fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	3b04      	subs	r3, #4
 8007fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f06f 0202 	mvn.w	r2, #2
 8007fce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	3b20      	subs	r3, #32
 8007fd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	08007fe9 	.word	0x08007fe9

08007fe8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ff2:	4b12      	ldr	r3, [pc, #72]	; (800803c <prvTaskExitError+0x54>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffa:	d00a      	beq.n	8008012 <prvTaskExitError+0x2a>
	__asm volatile
 8007ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008000:	f383 8811 	msr	BASEPRI, r3
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	60fb      	str	r3, [r7, #12]
}
 800800e:	bf00      	nop
 8008010:	e7fe      	b.n	8008010 <prvTaskExitError+0x28>
	__asm volatile
 8008012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008016:	f383 8811 	msr	BASEPRI, r3
 800801a:	f3bf 8f6f 	isb	sy
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	60bb      	str	r3, [r7, #8]
}
 8008024:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008026:	bf00      	nop
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d0fc      	beq.n	8008028 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800802e:	bf00      	nop
 8008030:	bf00      	nop
 8008032:	3714      	adds	r7, #20
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr
 800803c:	2000000c 	.word	0x2000000c

08008040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008040:	4b07      	ldr	r3, [pc, #28]	; (8008060 <pxCurrentTCBConst2>)
 8008042:	6819      	ldr	r1, [r3, #0]
 8008044:	6808      	ldr	r0, [r1, #0]
 8008046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804a:	f380 8809 	msr	PSP, r0
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f04f 0000 	mov.w	r0, #0
 8008056:	f380 8811 	msr	BASEPRI, r0
 800805a:	4770      	bx	lr
 800805c:	f3af 8000 	nop.w

08008060 <pxCurrentTCBConst2>:
 8008060:	20000f3c 	.word	0x20000f3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008064:	bf00      	nop
 8008066:	bf00      	nop

08008068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008068:	4808      	ldr	r0, [pc, #32]	; (800808c <prvPortStartFirstTask+0x24>)
 800806a:	6800      	ldr	r0, [r0, #0]
 800806c:	6800      	ldr	r0, [r0, #0]
 800806e:	f380 8808 	msr	MSP, r0
 8008072:	f04f 0000 	mov.w	r0, #0
 8008076:	f380 8814 	msr	CONTROL, r0
 800807a:	b662      	cpsie	i
 800807c:	b661      	cpsie	f
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	df00      	svc	0
 8008088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800808a:	bf00      	nop
 800808c:	e000ed08 	.word	0xe000ed08

08008090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008096:	4b46      	ldr	r3, [pc, #280]	; (80081b0 <xPortStartScheduler+0x120>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a46      	ldr	r2, [pc, #280]	; (80081b4 <xPortStartScheduler+0x124>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d10a      	bne.n	80080b6 <xPortStartScheduler+0x26>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	613b      	str	r3, [r7, #16]
}
 80080b2:	bf00      	nop
 80080b4:	e7fe      	b.n	80080b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80080b6:	4b3e      	ldr	r3, [pc, #248]	; (80081b0 <xPortStartScheduler+0x120>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a3f      	ldr	r2, [pc, #252]	; (80081b8 <xPortStartScheduler+0x128>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d10a      	bne.n	80080d6 <xPortStartScheduler+0x46>
	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	60fb      	str	r3, [r7, #12]
}
 80080d2:	bf00      	nop
 80080d4:	e7fe      	b.n	80080d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80080d6:	4b39      	ldr	r3, [pc, #228]	; (80081bc <xPortStartScheduler+0x12c>)
 80080d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	22ff      	movs	r2, #255	; 0xff
 80080e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80080f0:	78fb      	ldrb	r3, [r7, #3]
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80080f8:	b2da      	uxtb	r2, r3
 80080fa:	4b31      	ldr	r3, [pc, #196]	; (80081c0 <xPortStartScheduler+0x130>)
 80080fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80080fe:	4b31      	ldr	r3, [pc, #196]	; (80081c4 <xPortStartScheduler+0x134>)
 8008100:	2207      	movs	r2, #7
 8008102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008104:	e009      	b.n	800811a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008106:	4b2f      	ldr	r3, [pc, #188]	; (80081c4 <xPortStartScheduler+0x134>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	3b01      	subs	r3, #1
 800810c:	4a2d      	ldr	r2, [pc, #180]	; (80081c4 <xPortStartScheduler+0x134>)
 800810e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008110:	78fb      	ldrb	r3, [r7, #3]
 8008112:	b2db      	uxtb	r3, r3
 8008114:	005b      	lsls	r3, r3, #1
 8008116:	b2db      	uxtb	r3, r3
 8008118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800811a:	78fb      	ldrb	r3, [r7, #3]
 800811c:	b2db      	uxtb	r3, r3
 800811e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008122:	2b80      	cmp	r3, #128	; 0x80
 8008124:	d0ef      	beq.n	8008106 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008126:	4b27      	ldr	r3, [pc, #156]	; (80081c4 <xPortStartScheduler+0x134>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f1c3 0307 	rsb	r3, r3, #7
 800812e:	2b04      	cmp	r3, #4
 8008130:	d00a      	beq.n	8008148 <xPortStartScheduler+0xb8>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	60bb      	str	r3, [r7, #8]
}
 8008144:	bf00      	nop
 8008146:	e7fe      	b.n	8008146 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008148:	4b1e      	ldr	r3, [pc, #120]	; (80081c4 <xPortStartScheduler+0x134>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	021b      	lsls	r3, r3, #8
 800814e:	4a1d      	ldr	r2, [pc, #116]	; (80081c4 <xPortStartScheduler+0x134>)
 8008150:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008152:	4b1c      	ldr	r3, [pc, #112]	; (80081c4 <xPortStartScheduler+0x134>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800815a:	4a1a      	ldr	r2, [pc, #104]	; (80081c4 <xPortStartScheduler+0x134>)
 800815c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	b2da      	uxtb	r2, r3
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008166:	4b18      	ldr	r3, [pc, #96]	; (80081c8 <xPortStartScheduler+0x138>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a17      	ldr	r2, [pc, #92]	; (80081c8 <xPortStartScheduler+0x138>)
 800816c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008172:	4b15      	ldr	r3, [pc, #84]	; (80081c8 <xPortStartScheduler+0x138>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a14      	ldr	r2, [pc, #80]	; (80081c8 <xPortStartScheduler+0x138>)
 8008178:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800817c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800817e:	f000 f8dd 	bl	800833c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008182:	4b12      	ldr	r3, [pc, #72]	; (80081cc <xPortStartScheduler+0x13c>)
 8008184:	2200      	movs	r2, #0
 8008186:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008188:	f000 f8fc 	bl	8008384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800818c:	4b10      	ldr	r3, [pc, #64]	; (80081d0 <xPortStartScheduler+0x140>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a0f      	ldr	r2, [pc, #60]	; (80081d0 <xPortStartScheduler+0x140>)
 8008192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008196:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008198:	f7ff ff66 	bl	8008068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800819c:	f7ff f856 	bl	800724c <vTaskSwitchContext>
	prvTaskExitError();
 80081a0:	f7ff ff22 	bl	8007fe8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3718      	adds	r7, #24
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	e000ed00 	.word	0xe000ed00
 80081b4:	410fc271 	.word	0x410fc271
 80081b8:	410fc270 	.word	0x410fc270
 80081bc:	e000e400 	.word	0xe000e400
 80081c0:	20001568 	.word	0x20001568
 80081c4:	2000156c 	.word	0x2000156c
 80081c8:	e000ed20 	.word	0xe000ed20
 80081cc:	2000000c 	.word	0x2000000c
 80081d0:	e000ef34 	.word	0xe000ef34

080081d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
	__asm volatile
 80081da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	607b      	str	r3, [r7, #4]
}
 80081ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80081ee:	4b0f      	ldr	r3, [pc, #60]	; (800822c <vPortEnterCritical+0x58>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3301      	adds	r3, #1
 80081f4:	4a0d      	ldr	r2, [pc, #52]	; (800822c <vPortEnterCritical+0x58>)
 80081f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081f8:	4b0c      	ldr	r3, [pc, #48]	; (800822c <vPortEnterCritical+0x58>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d10f      	bne.n	8008220 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008200:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <vPortEnterCritical+0x5c>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00a      	beq.n	8008220 <vPortEnterCritical+0x4c>
	__asm volatile
 800820a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820e:	f383 8811 	msr	BASEPRI, r3
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	f3bf 8f4f 	dsb	sy
 800821a:	603b      	str	r3, [r7, #0]
}
 800821c:	bf00      	nop
 800821e:	e7fe      	b.n	800821e <vPortEnterCritical+0x4a>
	}
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	2000000c 	.word	0x2000000c
 8008230:	e000ed04 	.word	0xe000ed04

08008234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800823a:	4b12      	ldr	r3, [pc, #72]	; (8008284 <vPortExitCritical+0x50>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10a      	bne.n	8008258 <vPortExitCritical+0x24>
	__asm volatile
 8008242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	607b      	str	r3, [r7, #4]
}
 8008254:	bf00      	nop
 8008256:	e7fe      	b.n	8008256 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008258:	4b0a      	ldr	r3, [pc, #40]	; (8008284 <vPortExitCritical+0x50>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3b01      	subs	r3, #1
 800825e:	4a09      	ldr	r2, [pc, #36]	; (8008284 <vPortExitCritical+0x50>)
 8008260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008262:	4b08      	ldr	r3, [pc, #32]	; (8008284 <vPortExitCritical+0x50>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d105      	bne.n	8008276 <vPortExitCritical+0x42>
 800826a:	2300      	movs	r3, #0
 800826c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	f383 8811 	msr	BASEPRI, r3
}
 8008274:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008276:	bf00      	nop
 8008278:	370c      	adds	r7, #12
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	2000000c 	.word	0x2000000c
	...

08008290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008290:	f3ef 8009 	mrs	r0, PSP
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	4b15      	ldr	r3, [pc, #84]	; (80082f0 <pxCurrentTCBConst>)
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	f01e 0f10 	tst.w	lr, #16
 80082a0:	bf08      	it	eq
 80082a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80082a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082aa:	6010      	str	r0, [r2, #0]
 80082ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80082b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80082b4:	f380 8811 	msr	BASEPRI, r0
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f7fe ffc4 	bl	800724c <vTaskSwitchContext>
 80082c4:	f04f 0000 	mov.w	r0, #0
 80082c8:	f380 8811 	msr	BASEPRI, r0
 80082cc:	bc09      	pop	{r0, r3}
 80082ce:	6819      	ldr	r1, [r3, #0]
 80082d0:	6808      	ldr	r0, [r1, #0]
 80082d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d6:	f01e 0f10 	tst.w	lr, #16
 80082da:	bf08      	it	eq
 80082dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80082e0:	f380 8809 	msr	PSP, r0
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	f3af 8000 	nop.w

080082f0 <pxCurrentTCBConst>:
 80082f0:	20000f3c 	.word	0x20000f3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80082f4:	bf00      	nop
 80082f6:	bf00      	nop

080082f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	607b      	str	r3, [r7, #4]
}
 8008310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008312:	f7fe fee1 	bl	80070d8 <xTaskIncrementTick>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d003      	beq.n	8008324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800831c:	4b06      	ldr	r3, [pc, #24]	; (8008338 <xPortSysTickHandler+0x40>)
 800831e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	2300      	movs	r3, #0
 8008326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	f383 8811 	msr	BASEPRI, r3
}
 800832e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008330:	bf00      	nop
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	e000ed04 	.word	0xe000ed04

0800833c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800833c:	b480      	push	{r7}
 800833e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008340:	4b0b      	ldr	r3, [pc, #44]	; (8008370 <vPortSetupTimerInterrupt+0x34>)
 8008342:	2200      	movs	r2, #0
 8008344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008346:	4b0b      	ldr	r3, [pc, #44]	; (8008374 <vPortSetupTimerInterrupt+0x38>)
 8008348:	2200      	movs	r2, #0
 800834a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800834c:	4b0a      	ldr	r3, [pc, #40]	; (8008378 <vPortSetupTimerInterrupt+0x3c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a0a      	ldr	r2, [pc, #40]	; (800837c <vPortSetupTimerInterrupt+0x40>)
 8008352:	fba2 2303 	umull	r2, r3, r2, r3
 8008356:	099b      	lsrs	r3, r3, #6
 8008358:	4a09      	ldr	r2, [pc, #36]	; (8008380 <vPortSetupTimerInterrupt+0x44>)
 800835a:	3b01      	subs	r3, #1
 800835c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800835e:	4b04      	ldr	r3, [pc, #16]	; (8008370 <vPortSetupTimerInterrupt+0x34>)
 8008360:	2207      	movs	r2, #7
 8008362:	601a      	str	r2, [r3, #0]
}
 8008364:	bf00      	nop
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	e000e010 	.word	0xe000e010
 8008374:	e000e018 	.word	0xe000e018
 8008378:	20000000 	.word	0x20000000
 800837c:	10624dd3 	.word	0x10624dd3
 8008380:	e000e014 	.word	0xe000e014

08008384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008394 <vPortEnableVFP+0x10>
 8008388:	6801      	ldr	r1, [r0, #0]
 800838a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800838e:	6001      	str	r1, [r0, #0]
 8008390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008392:	bf00      	nop
 8008394:	e000ed88 	.word	0xe000ed88

08008398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800839e:	f3ef 8305 	mrs	r3, IPSR
 80083a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2b0f      	cmp	r3, #15
 80083a8:	d914      	bls.n	80083d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083aa:	4a17      	ldr	r2, [pc, #92]	; (8008408 <vPortValidateInterruptPriority+0x70>)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	4413      	add	r3, r2
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80083b4:	4b15      	ldr	r3, [pc, #84]	; (800840c <vPortValidateInterruptPriority+0x74>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	7afa      	ldrb	r2, [r7, #11]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d20a      	bcs.n	80083d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	607b      	str	r3, [r7, #4]
}
 80083d0:	bf00      	nop
 80083d2:	e7fe      	b.n	80083d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80083d4:	4b0e      	ldr	r3, [pc, #56]	; (8008410 <vPortValidateInterruptPriority+0x78>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80083dc:	4b0d      	ldr	r3, [pc, #52]	; (8008414 <vPortValidateInterruptPriority+0x7c>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d90a      	bls.n	80083fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80083e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e8:	f383 8811 	msr	BASEPRI, r3
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	603b      	str	r3, [r7, #0]
}
 80083f6:	bf00      	nop
 80083f8:	e7fe      	b.n	80083f8 <vPortValidateInterruptPriority+0x60>
	}
 80083fa:	bf00      	nop
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	e000e3f0 	.word	0xe000e3f0
 800840c:	20001568 	.word	0x20001568
 8008410:	e000ed0c 	.word	0xe000ed0c
 8008414:	2000156c 	.word	0x2000156c

08008418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b08a      	sub	sp, #40	; 0x28
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008420:	2300      	movs	r3, #0
 8008422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008424:	f7fe fd9c 	bl	8006f60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008428:	4b5b      	ldr	r3, [pc, #364]	; (8008598 <pvPortMalloc+0x180>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d101      	bne.n	8008434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008430:	f000 f920 	bl	8008674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008434:	4b59      	ldr	r3, [pc, #356]	; (800859c <pvPortMalloc+0x184>)
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4013      	ands	r3, r2
 800843c:	2b00      	cmp	r3, #0
 800843e:	f040 8093 	bne.w	8008568 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d01d      	beq.n	8008484 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008448:	2208      	movs	r2, #8
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4413      	add	r3, r2
 800844e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f003 0307 	and.w	r3, r3, #7
 8008456:	2b00      	cmp	r3, #0
 8008458:	d014      	beq.n	8008484 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f023 0307 	bic.w	r3, r3, #7
 8008460:	3308      	adds	r3, #8
 8008462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f003 0307 	and.w	r3, r3, #7
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00a      	beq.n	8008484 <pvPortMalloc+0x6c>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	617b      	str	r3, [r7, #20]
}
 8008480:	bf00      	nop
 8008482:	e7fe      	b.n	8008482 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d06e      	beq.n	8008568 <pvPortMalloc+0x150>
 800848a:	4b45      	ldr	r3, [pc, #276]	; (80085a0 <pvPortMalloc+0x188>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	429a      	cmp	r2, r3
 8008492:	d869      	bhi.n	8008568 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008494:	4b43      	ldr	r3, [pc, #268]	; (80085a4 <pvPortMalloc+0x18c>)
 8008496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008498:	4b42      	ldr	r3, [pc, #264]	; (80085a4 <pvPortMalloc+0x18c>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800849e:	e004      	b.n	80084aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d903      	bls.n	80084bc <pvPortMalloc+0xa4>
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1f1      	bne.n	80084a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084bc:	4b36      	ldr	r3, [pc, #216]	; (8008598 <pvPortMalloc+0x180>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d050      	beq.n	8008568 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084c6:	6a3b      	ldr	r3, [r7, #32]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2208      	movs	r2, #8
 80084cc:	4413      	add	r3, r2
 80084ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	1ad2      	subs	r2, r2, r3
 80084e0:	2308      	movs	r3, #8
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d91f      	bls.n	8008528 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4413      	add	r3, r2
 80084ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	f003 0307 	and.w	r3, r3, #7
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00a      	beq.n	8008510 <pvPortMalloc+0xf8>
	__asm volatile
 80084fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fe:	f383 8811 	msr	BASEPRI, r3
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	613b      	str	r3, [r7, #16]
}
 800850c:	bf00      	nop
 800850e:	e7fe      	b.n	800850e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	1ad2      	subs	r2, r2, r3
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008522:	69b8      	ldr	r0, [r7, #24]
 8008524:	f000 f908 	bl	8008738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008528:	4b1d      	ldr	r3, [pc, #116]	; (80085a0 <pvPortMalloc+0x188>)
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	4a1b      	ldr	r2, [pc, #108]	; (80085a0 <pvPortMalloc+0x188>)
 8008534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008536:	4b1a      	ldr	r3, [pc, #104]	; (80085a0 <pvPortMalloc+0x188>)
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	4b1b      	ldr	r3, [pc, #108]	; (80085a8 <pvPortMalloc+0x190>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	429a      	cmp	r2, r3
 8008540:	d203      	bcs.n	800854a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008542:	4b17      	ldr	r3, [pc, #92]	; (80085a0 <pvPortMalloc+0x188>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a18      	ldr	r2, [pc, #96]	; (80085a8 <pvPortMalloc+0x190>)
 8008548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	685a      	ldr	r2, [r3, #4]
 800854e:	4b13      	ldr	r3, [pc, #76]	; (800859c <pvPortMalloc+0x184>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	431a      	orrs	r2, r3
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	2200      	movs	r2, #0
 800855c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800855e:	4b13      	ldr	r3, [pc, #76]	; (80085ac <pvPortMalloc+0x194>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3301      	adds	r3, #1
 8008564:	4a11      	ldr	r2, [pc, #68]	; (80085ac <pvPortMalloc+0x194>)
 8008566:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008568:	f7fe fd08 	bl	8006f7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	f003 0307 	and.w	r3, r3, #7
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00a      	beq.n	800858c <pvPortMalloc+0x174>
	__asm volatile
 8008576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	60fb      	str	r3, [r7, #12]
}
 8008588:	bf00      	nop
 800858a:	e7fe      	b.n	800858a <pvPortMalloc+0x172>
	return pvReturn;
 800858c:	69fb      	ldr	r3, [r7, #28]
}
 800858e:	4618      	mov	r0, r3
 8008590:	3728      	adds	r7, #40	; 0x28
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	20002130 	.word	0x20002130
 800859c:	20002144 	.word	0x20002144
 80085a0:	20002134 	.word	0x20002134
 80085a4:	20002128 	.word	0x20002128
 80085a8:	20002138 	.word	0x20002138
 80085ac:	2000213c 	.word	0x2000213c

080085b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d04d      	beq.n	800865e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80085c2:	2308      	movs	r3, #8
 80085c4:	425b      	negs	r3, r3
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	4413      	add	r3, r2
 80085ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	4b24      	ldr	r3, [pc, #144]	; (8008668 <vPortFree+0xb8>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4013      	ands	r3, r2
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10a      	bne.n	80085f4 <vPortFree+0x44>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	60fb      	str	r3, [r7, #12]
}
 80085f0:	bf00      	nop
 80085f2:	e7fe      	b.n	80085f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00a      	beq.n	8008612 <vPortFree+0x62>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	60bb      	str	r3, [r7, #8]
}
 800860e:	bf00      	nop
 8008610:	e7fe      	b.n	8008610 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	685a      	ldr	r2, [r3, #4]
 8008616:	4b14      	ldr	r3, [pc, #80]	; (8008668 <vPortFree+0xb8>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4013      	ands	r3, r2
 800861c:	2b00      	cmp	r3, #0
 800861e:	d01e      	beq.n	800865e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d11a      	bne.n	800865e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	4b0e      	ldr	r3, [pc, #56]	; (8008668 <vPortFree+0xb8>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	43db      	mvns	r3, r3
 8008632:	401a      	ands	r2, r3
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008638:	f7fe fc92 	bl	8006f60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	4b0a      	ldr	r3, [pc, #40]	; (800866c <vPortFree+0xbc>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4413      	add	r3, r2
 8008646:	4a09      	ldr	r2, [pc, #36]	; (800866c <vPortFree+0xbc>)
 8008648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800864a:	6938      	ldr	r0, [r7, #16]
 800864c:	f000 f874 	bl	8008738 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008650:	4b07      	ldr	r3, [pc, #28]	; (8008670 <vPortFree+0xc0>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	3301      	adds	r3, #1
 8008656:	4a06      	ldr	r2, [pc, #24]	; (8008670 <vPortFree+0xc0>)
 8008658:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800865a:	f7fe fc8f 	bl	8006f7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800865e:	bf00      	nop
 8008660:	3718      	adds	r7, #24
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	20002144 	.word	0x20002144
 800866c:	20002134 	.word	0x20002134
 8008670:	20002140 	.word	0x20002140

08008674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800867a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800867e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008680:	4b27      	ldr	r3, [pc, #156]	; (8008720 <prvHeapInit+0xac>)
 8008682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f003 0307 	and.w	r3, r3, #7
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00c      	beq.n	80086a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3307      	adds	r3, #7
 8008692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f023 0307 	bic.w	r3, r3, #7
 800869a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	4a1f      	ldr	r2, [pc, #124]	; (8008720 <prvHeapInit+0xac>)
 80086a4:	4413      	add	r3, r2
 80086a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086ac:	4a1d      	ldr	r2, [pc, #116]	; (8008724 <prvHeapInit+0xb0>)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80086b2:	4b1c      	ldr	r3, [pc, #112]	; (8008724 <prvHeapInit+0xb0>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	4413      	add	r3, r2
 80086be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80086c0:	2208      	movs	r2, #8
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	1a9b      	subs	r3, r3, r2
 80086c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f023 0307 	bic.w	r3, r3, #7
 80086ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	4a15      	ldr	r2, [pc, #84]	; (8008728 <prvHeapInit+0xb4>)
 80086d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80086d6:	4b14      	ldr	r3, [pc, #80]	; (8008728 <prvHeapInit+0xb4>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2200      	movs	r2, #0
 80086dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80086de:	4b12      	ldr	r3, [pc, #72]	; (8008728 <prvHeapInit+0xb4>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2200      	movs	r2, #0
 80086e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	1ad2      	subs	r2, r2, r3
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086f4:	4b0c      	ldr	r3, [pc, #48]	; (8008728 <prvHeapInit+0xb4>)
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	4a0a      	ldr	r2, [pc, #40]	; (800872c <prvHeapInit+0xb8>)
 8008702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	4a09      	ldr	r2, [pc, #36]	; (8008730 <prvHeapInit+0xbc>)
 800870a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800870c:	4b09      	ldr	r3, [pc, #36]	; (8008734 <prvHeapInit+0xc0>)
 800870e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008712:	601a      	str	r2, [r3, #0]
}
 8008714:	bf00      	nop
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	20001570 	.word	0x20001570
 8008724:	20002128 	.word	0x20002128
 8008728:	20002130 	.word	0x20002130
 800872c:	20002138 	.word	0x20002138
 8008730:	20002134 	.word	0x20002134
 8008734:	20002144 	.word	0x20002144

08008738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008740:	4b28      	ldr	r3, [pc, #160]	; (80087e4 <prvInsertBlockIntoFreeList+0xac>)
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	e002      	b.n	800874c <prvInsertBlockIntoFreeList+0x14>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	429a      	cmp	r2, r3
 8008754:	d8f7      	bhi.n	8008746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	4413      	add	r3, r2
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	429a      	cmp	r2, r3
 8008766:	d108      	bne.n	800877a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	441a      	add	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	68ba      	ldr	r2, [r7, #8]
 8008784:	441a      	add	r2, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	429a      	cmp	r2, r3
 800878c:	d118      	bne.n	80087c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	4b15      	ldr	r3, [pc, #84]	; (80087e8 <prvInsertBlockIntoFreeList+0xb0>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	429a      	cmp	r2, r3
 8008798:	d00d      	beq.n	80087b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	441a      	add	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	e008      	b.n	80087c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087b6:	4b0c      	ldr	r3, [pc, #48]	; (80087e8 <prvInsertBlockIntoFreeList+0xb0>)
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	601a      	str	r2, [r3, #0]
 80087be:	e003      	b.n	80087c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d002      	beq.n	80087d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087d6:	bf00      	nop
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	20002128 	.word	0x20002128
 80087e8:	20002130 	.word	0x20002130

080087ec <__libc_init_array>:
 80087ec:	b570      	push	{r4, r5, r6, lr}
 80087ee:	4d0d      	ldr	r5, [pc, #52]	; (8008824 <__libc_init_array+0x38>)
 80087f0:	4c0d      	ldr	r4, [pc, #52]	; (8008828 <__libc_init_array+0x3c>)
 80087f2:	1b64      	subs	r4, r4, r5
 80087f4:	10a4      	asrs	r4, r4, #2
 80087f6:	2600      	movs	r6, #0
 80087f8:	42a6      	cmp	r6, r4
 80087fa:	d109      	bne.n	8008810 <__libc_init_array+0x24>
 80087fc:	4d0b      	ldr	r5, [pc, #44]	; (800882c <__libc_init_array+0x40>)
 80087fe:	4c0c      	ldr	r4, [pc, #48]	; (8008830 <__libc_init_array+0x44>)
 8008800:	f000 f82e 	bl	8008860 <_init>
 8008804:	1b64      	subs	r4, r4, r5
 8008806:	10a4      	asrs	r4, r4, #2
 8008808:	2600      	movs	r6, #0
 800880a:	42a6      	cmp	r6, r4
 800880c:	d105      	bne.n	800881a <__libc_init_array+0x2e>
 800880e:	bd70      	pop	{r4, r5, r6, pc}
 8008810:	f855 3b04 	ldr.w	r3, [r5], #4
 8008814:	4798      	blx	r3
 8008816:	3601      	adds	r6, #1
 8008818:	e7ee      	b.n	80087f8 <__libc_init_array+0xc>
 800881a:	f855 3b04 	ldr.w	r3, [r5], #4
 800881e:	4798      	blx	r3
 8008820:	3601      	adds	r6, #1
 8008822:	e7f2      	b.n	800880a <__libc_init_array+0x1e>
 8008824:	08008910 	.word	0x08008910
 8008828:	08008910 	.word	0x08008910
 800882c:	08008910 	.word	0x08008910
 8008830:	08008914 	.word	0x08008914

08008834 <memcpy>:
 8008834:	440a      	add	r2, r1
 8008836:	4291      	cmp	r1, r2
 8008838:	f100 33ff 	add.w	r3, r0, #4294967295
 800883c:	d100      	bne.n	8008840 <memcpy+0xc>
 800883e:	4770      	bx	lr
 8008840:	b510      	push	{r4, lr}
 8008842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800884a:	4291      	cmp	r1, r2
 800884c:	d1f9      	bne.n	8008842 <memcpy+0xe>
 800884e:	bd10      	pop	{r4, pc}

08008850 <memset>:
 8008850:	4402      	add	r2, r0
 8008852:	4603      	mov	r3, r0
 8008854:	4293      	cmp	r3, r2
 8008856:	d100      	bne.n	800885a <memset+0xa>
 8008858:	4770      	bx	lr
 800885a:	f803 1b01 	strb.w	r1, [r3], #1
 800885e:	e7f9      	b.n	8008854 <memset+0x4>

08008860 <_init>:
 8008860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008862:	bf00      	nop
 8008864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008866:	bc08      	pop	{r3}
 8008868:	469e      	mov	lr, r3
 800886a:	4770      	bx	lr

0800886c <_fini>:
 800886c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886e:	bf00      	nop
 8008870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008872:	bc08      	pop	{r3}
 8008874:	469e      	mov	lr, r3
 8008876:	4770      	bx	lr
