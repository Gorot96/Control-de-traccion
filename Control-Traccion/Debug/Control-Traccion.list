
Control-Traccion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000abc  0800d934  0800d934  0001d934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3f0  0800e3f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3f0  0800e3f0  0001e3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3f8  0800e3f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3f8  0800e3f8  0001e3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3fc  0800e3fc  0001e3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800e400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003268  20000074  0800e474  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200032dc  0800e474  000232dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d193  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005838  00000000  00000000  0004d237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002698  00000000  00000000  00052a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002470  00000000  00000000  00055108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007dcc  00000000  00000000  00057578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ac9f  00000000  00000000  0005f344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114ff4  00000000  00000000  00089fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019efd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b2ac  00000000  00000000  0019f028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d91c 	.word	0x0800d91c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800d91c 	.word	0x0800d91c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <CreaTareas>:

SemaphoreHandle_t xSemaphore;

int wifi_server(void);

void CreaTareas(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af02      	add	r7, sp, #8
	// Creamos tarea para el control de las IMUs
	//xTaskCreate(TareaIMUs, "TareaIMUs", 128, NULL, 1, NULL);

	// Creamos la tarea para el control del servidor web
	xTaskCreate(TareaServidorWeb,"TareaWebServer", 256, NULL,1, NULL);
 800058a:	2300      	movs	r3, #0
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2301      	movs	r3, #1
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000598:	4903      	ldr	r1, [pc, #12]	; (80005a8 <CreaTareas+0x24>)
 800059a:	4804      	ldr	r0, [pc, #16]	; (80005ac <CreaTareas+0x28>)
 800059c:	f009 ff9f 	bl	800a4de <xTaskCreate>
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	0800d934 	.word	0x0800d934
 80005ac:	080005cd 	.word	0x080005cd

080005b0 <CrearObjetosSerie>:

void CrearObjetosSerie(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	// Creamos la cola de mensajes que mandará y recibirá datos de las IMUs.
	xQueueIMUs = xQueueCreate(1, sizeof (struct CT_Sensores_t));
 80005b4:	2200      	movs	r2, #0
 80005b6:	2124      	movs	r1, #36	; 0x24
 80005b8:	2001      	movs	r0, #1
 80005ba:	f009 faed 	bl	8009b98 <xQueueGenericCreate>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a01      	ldr	r2, [pc, #4]	; (80005c8 <CrearObjetosSerie+0x18>)
 80005c2:	6013      	str	r3, [r2, #0]
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000090 	.word	0x20000090

080005cc <TareaServidorWeb>:

void TareaServidorWeb(void * pArg) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	wifi_server();
 80005d4:	f001 f91c 	bl	8001810 <wifi_server>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <GetSensores>:

struct CT_Sensores_t GetSensores()
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b08c      	sub	sp, #48	; 0x30
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	struct CT_Sensores_t sensors;
	xTaskNotifyGive(sensoresTaskHandler);
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <GetSensores+0x44>)
 80005ea:	6818      	ldr	r0, [r3, #0]
 80005ec:	2300      	movs	r3, #0
 80005ee:	2202      	movs	r2, #2
 80005f0:	2100      	movs	r1, #0
 80005f2:	f00a fdc1 	bl	800b178 <xTaskGenericNotify>
	xQueueReceive(xQueueIMUs, &sensors, portMAX_DELAY);
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <GetSensores+0x48>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f107 010c 	add.w	r1, r7, #12
 80005fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000602:	4618      	mov	r0, r3
 8000604:	f009 fcc0 	bl	8009f88 <xQueueReceive>
	return sensors;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	461d      	mov	r5, r3
 800060c:	f107 040c 	add.w	r4, r7, #12
 8000610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000612:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000618:	6823      	ldr	r3, [r4, #0]
 800061a:	602b      	str	r3, [r5, #0]
}
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	3730      	adds	r7, #48	; 0x30
 8000620:	46bd      	mov	sp, r7
 8000622:	bdb0      	pop	{r4, r5, r7, pc}
 8000624:	20000094 	.word	0x20000094
 8000628:	20000090 	.word	0x20000090

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f001 fb07 	bl	8001c42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f82c 	bl	8000690 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000638:	f000 f88c 	bl	8000754 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 faa8 	bl	8000b90 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000640:	f000 f92c 	bl	800089c <MX_DFSDM1_Init>
  MX_QUADSPI_Init();
 8000644:	f000 f9e2 	bl	8000a0c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000648:	f000 fa06 	bl	8000a58 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 800064c:	f000 fa42 	bl	8000ad4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000650:	f000 fa70 	bl	8000b34 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000654:	f000 f95a 	bl	800090c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000658:	f000 f998 	bl	800098c <MX_I2C2_Init>
  MX_ADC1_Init();
 800065c:	f000 f8a8 	bl	80007b0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000660:	f008 ffda 	bl	8009618 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <main+0x58>)
 8000666:	2100      	movs	r1, #0
 8000668:	4807      	ldr	r0, [pc, #28]	; (8000688 <main+0x5c>)
 800066a:	f009 f81f 	bl	80096ac <osThreadNew>
 800066e:	4603      	mov	r3, r0
 8000670:	4a06      	ldr	r2, [pc, #24]	; (800068c <main+0x60>)
 8000672:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  CreaTareas();
 8000674:	f7ff ff86 	bl	8000584 <CreaTareas>
  CrearObjetosSerie();
 8000678:	f7ff ff9a 	bl	80005b0 <CrearObjetosSerie>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800067c:	f008 fff0 	bl	8009660 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000680:	e7fe      	b.n	8000680 <main+0x54>
 8000682:	bf00      	nop
 8000684:	0800e23c 	.word	0x0800e23c
 8000688:	08000ec5 	.word	0x08000ec5
 800068c:	20000814 	.word	0x20000814

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b096      	sub	sp, #88	; 0x58
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2244      	movs	r2, #68	; 0x44
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f00b fe44 	bl	800c32c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	463b      	mov	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006b6:	f003 fad7 	bl	8003c68 <HAL_PWREx_ControlVoltageScaling>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c0:	f000 fc08 	bl	8000ed4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006c4:	f003 fab2 	bl	8003c2c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006c8:	4b21      	ldr	r3, [pc, #132]	; (8000750 <SystemClock_Config+0xc0>)
 80006ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006ce:	4a20      	ldr	r2, [pc, #128]	; (8000750 <SystemClock_Config+0xc0>)
 80006d0:	f023 0318 	bic.w	r3, r3, #24
 80006d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006d8:	2314      	movs	r3, #20
 80006da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006e8:	2360      	movs	r3, #96	; 0x60
 80006ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006f0:	2301      	movs	r3, #1
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006f8:	2328      	movs	r3, #40	; 0x28
 80006fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006fc:	2307      	movs	r3, #7
 80006fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4618      	mov	r0, r3
 800070e:	f003 fbcd 	bl	8003eac <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000718:	f000 fbdc 	bl	8000ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2303      	movs	r3, #3
 8000722:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	2104      	movs	r1, #4
 8000734:	4618      	mov	r0, r3
 8000736:	f003 ff95 	bl	8004664 <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000740:	f000 fbc8 	bl	8000ed4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000744:	f004 fc9c 	bl	8005080 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000748:	bf00      	nop
 800074a:	3758      	adds	r7, #88	; 0x58
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000

08000754 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b0a2      	sub	sp, #136	; 0x88
 8000758:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800075a:	463b      	mov	r3, r7
 800075c:	2288      	movs	r2, #136	; 0x88
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f00b fde3 	bl	800c32c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000766:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800076a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800076c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000770:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000772:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000776:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000778:	2301      	movs	r3, #1
 800077a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800077c:	2301      	movs	r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000780:	2318      	movs	r3, #24
 8000782:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000784:	2307      	movs	r3, #7
 8000786:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000788:	2302      	movs	r3, #2
 800078a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000790:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000794:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	4618      	mov	r0, r3
 800079a:	f004 f987 	bl	8004aac <HAL_RCCEx_PeriphCLKConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80007a4:	f000 fb96 	bl	8000ed4 <Error_Handler>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3788      	adds	r7, #136	; 0x88
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
 80007d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007d2:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <MX_ADC1_Init+0xe0>)
 80007d4:	4a2f      	ldr	r2, [pc, #188]	; (8000894 <MX_ADC1_Init+0xe4>)
 80007d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007d8:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <MX_ADC1_Init+0xe0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007de:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <MX_ADC1_Init+0xe0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e4:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <MX_ADC1_Init+0xe0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <MX_ADC1_Init+0xe0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f0:	4b27      	ldr	r3, [pc, #156]	; (8000890 <MX_ADC1_Init+0xe0>)
 80007f2:	2204      	movs	r2, #4
 80007f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f6:	4b26      	ldr	r3, [pc, #152]	; (8000890 <MX_ADC1_Init+0xe0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007fc:	4b24      	ldr	r3, [pc, #144]	; (8000890 <MX_ADC1_Init+0xe0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <MX_ADC1_Init+0xe0>)
 8000804:	2201      	movs	r2, #1
 8000806:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <MX_ADC1_Init+0xe0>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_ADC1_Init+0xe0>)
 8000812:	2200      	movs	r2, #0
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000816:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <MX_ADC1_Init+0xe0>)
 8000818:	2200      	movs	r2, #0
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <MX_ADC1_Init+0xe0>)
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000824:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_ADC1_Init+0xe0>)
 8000826:	2200      	movs	r2, #0
 8000828:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_ADC1_Init+0xe0>)
 800082c:	2200      	movs	r2, #0
 800082e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000832:	4817      	ldr	r0, [pc, #92]	; (8000890 <MX_ADC1_Init+0xe0>)
 8000834:	f001 fc2a 	bl	800208c <HAL_ADC_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800083e:	f000 fb49 	bl	8000ed4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4810      	ldr	r0, [pc, #64]	; (8000890 <MX_ADC1_Init+0xe0>)
 800084e:	f002 f989 	bl	8002b64 <HAL_ADCEx_MultiModeConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000858:	f000 fb3c 	bl	8000ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800085c:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_ADC1_Init+0xe8>)
 800085e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000860:	2306      	movs	r3, #6
 8000862:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000868:	237f      	movs	r3, #127	; 0x7f
 800086a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086c:	2304      	movs	r3, #4
 800086e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_ADC1_Init+0xe0>)
 800087a:	f001 fd5d 	bl	8002338 <HAL_ADC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000884:	f000 fb26 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3728      	adds	r7, #40	; 0x28
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000098 	.word	0x20000098
 8000894:	50040000 	.word	0x50040000
 8000898:	3ac04000 	.word	0x3ac04000

0800089c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_DFSDM1_Init+0x68>)
 80008a2:	4a19      	ldr	r2, [pc, #100]	; (8000908 <MX_DFSDM1_Init+0x6c>)
 80008a4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_DFSDM1_Init+0x68>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_DFSDM1_Init+0x68>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_DFSDM1_Init+0x68>)
 80008b4:	2202      	movs	r2, #2
 80008b6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_DFSDM1_Init+0x68>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_DFSDM1_Init+0x68>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_DFSDM1_Init+0x68>)
 80008c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ca:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <MX_DFSDM1_Init+0x68>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_DFSDM1_Init+0x68>)
 80008d4:	2204      	movs	r2, #4
 80008d6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_DFSDM1_Init+0x68>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_DFSDM1_Init+0x68>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <MX_DFSDM1_Init+0x68>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_DFSDM1_Init+0x68>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_DFSDM1_Init+0x68>)
 80008f2:	f002 faf9 	bl	8002ee8 <HAL_DFSDM_ChannelInit>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80008fc:	f000 faea 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200000fc 	.word	0x200000fc
 8000908:	40016020 	.word	0x40016020

0800090c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_I2C1_Init+0x74>)
 8000912:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <MX_I2C1_Init+0x78>)
 8000914:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_I2C1_Init+0x74>)
 8000918:	4a1b      	ldr	r2, [pc, #108]	; (8000988 <MX_I2C1_Init+0x7c>)
 800091a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_I2C1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_I2C1_Init+0x74>)
 8000924:	2201      	movs	r2, #1
 8000926:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_I2C1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_I2C1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000946:	480e      	ldr	r0, [pc, #56]	; (8000980 <MX_I2C1_Init+0x74>)
 8000948:	f002 ff02 	bl	8003750 <HAL_I2C_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000952:	f000 fabf 	bl	8000ed4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000956:	2100      	movs	r1, #0
 8000958:	4809      	ldr	r0, [pc, #36]	; (8000980 <MX_I2C1_Init+0x74>)
 800095a:	f002 ff88 	bl	800386e <HAL_I2CEx_ConfigAnalogFilter>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000964:	f000 fab6 	bl	8000ed4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000968:	2100      	movs	r1, #0
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_I2C1_Init+0x74>)
 800096c:	f002 ffca 	bl	8003904 <HAL_I2CEx_ConfigDigitalFilter>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000976:	f000 faad 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000134 	.word	0x20000134
 8000984:	40005400 	.word	0x40005400
 8000988:	10909cec 	.word	0x10909cec

0800098c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000990:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <MX_I2C2_Init+0x74>)
 8000992:	4a1c      	ldr	r2, [pc, #112]	; (8000a04 <MX_I2C2_Init+0x78>)
 8000994:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000996:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <MX_I2C2_Init+0x74>)
 8000998:	4a1b      	ldr	r2, [pc, #108]	; (8000a08 <MX_I2C2_Init+0x7c>)
 800099a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800099c:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <MX_I2C2_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <MX_I2C2_Init+0x74>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <MX_I2C2_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_I2C2_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MX_I2C2_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_I2C2_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_I2C2_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009c6:	480e      	ldr	r0, [pc, #56]	; (8000a00 <MX_I2C2_Init+0x74>)
 80009c8:	f002 fec2 	bl	8003750 <HAL_I2C_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009d2:	f000 fa7f 	bl	8000ed4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009d6:	2100      	movs	r1, #0
 80009d8:	4809      	ldr	r0, [pc, #36]	; (8000a00 <MX_I2C2_Init+0x74>)
 80009da:	f002 ff48 	bl	800386e <HAL_I2CEx_ConfigAnalogFilter>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009e4:	f000 fa76 	bl	8000ed4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009e8:	2100      	movs	r1, #0
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_I2C2_Init+0x74>)
 80009ec:	f002 ff8a 	bl	8003904 <HAL_I2CEx_ConfigDigitalFilter>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009f6:	f000 fa6d 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000188 	.word	0x20000188
 8000a04:	40005800 	.word	0x40005800
 8000a08:	10909cec 	.word	0x10909cec

08000a0c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_QUADSPI_Init+0x44>)
 8000a12:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <MX_QUADSPI_Init+0x48>)
 8000a14:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_QUADSPI_Init+0x44>)
 8000a18:	2202      	movs	r2, #2
 8000a1a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_QUADSPI_Init+0x44>)
 8000a1e:	2204      	movs	r2, #4
 8000a20:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_QUADSPI_Init+0x44>)
 8000a24:	2210      	movs	r2, #16
 8000a26:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_QUADSPI_Init+0x44>)
 8000a2a:	2217      	movs	r2, #23
 8000a2c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_QUADSPI_Init+0x44>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_QUADSPI_Init+0x44>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_QUADSPI_Init+0x44>)
 8000a3c:	f003 f97a 	bl	8003d34 <HAL_QSPI_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000a46:	f000 fa45 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200001dc 	.word	0x200001dc
 8000a54:	a0001000 	.word	0xa0001000

08000a58 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <MX_SPI3_Init+0x74>)
 8000a5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ad0 <MX_SPI3_Init+0x78>)
 8000a60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_SPI3_Init+0x74>)
 8000a64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a68:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <MX_SPI3_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <MX_SPI3_Init+0x74>)
 8000a72:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a76:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <MX_SPI3_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <MX_SPI3_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_SPI3_Init+0x74>)
 8000a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a8a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_SPI3_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_SPI3_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_SPI3_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <MX_SPI3_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_SPI3_Init+0x74>)
 8000aa6:	2207      	movs	r2, #7
 8000aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <MX_SPI3_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_SPI3_Init+0x74>)
 8000ab2:	2208      	movs	r2, #8
 8000ab4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_SPI3_Init+0x74>)
 8000ab8:	f004 fcc4 	bl	8005444 <HAL_SPI_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000ac2:	f000 fa07 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000220 	.word	0x20000220
 8000ad0:	40003c00 	.word	0x40003c00

08000ad4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000ada:	4a15      	ldr	r2, [pc, #84]	; (8000b30 <MX_USART3_UART_Init+0x5c>)
 8000adc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000b18:	f005 ffc5 	bl	8006aa6 <HAL_UART_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b22:	f000 f9d7 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000284 	.word	0x20000284
 8000b30:	40004800 	.word	0x40004800

08000b34 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b42:	2206      	movs	r2, #6
 8000b44:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b48:	2202      	movs	r2, #2
 8000b4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b4e:	2202      	movs	r2, #2
 8000b50:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b78:	f002 ff10 	bl	800399c <HAL_PCD_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b82:	f000 f9a7 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000308 	.word	0x20000308

08000b90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba6:	4bbd      	ldr	r3, [pc, #756]	; (8000e9c <MX_GPIO_Init+0x30c>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4abc      	ldr	r2, [pc, #752]	; (8000e9c <MX_GPIO_Init+0x30c>)
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4bba      	ldr	r3, [pc, #744]	; (8000e9c <MX_GPIO_Init+0x30c>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0310 	and.w	r3, r3, #16
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	4bb7      	ldr	r3, [pc, #732]	; (8000e9c <MX_GPIO_Init+0x30c>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4ab6      	ldr	r2, [pc, #728]	; (8000e9c <MX_GPIO_Init+0x30c>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4bb4      	ldr	r3, [pc, #720]	; (8000e9c <MX_GPIO_Init+0x30c>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	4bb1      	ldr	r3, [pc, #708]	; (8000e9c <MX_GPIO_Init+0x30c>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4ab0      	ldr	r2, [pc, #704]	; (8000e9c <MX_GPIO_Init+0x30c>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4bae      	ldr	r3, [pc, #696]	; (8000e9c <MX_GPIO_Init+0x30c>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	4bab      	ldr	r3, [pc, #684]	; (8000e9c <MX_GPIO_Init+0x30c>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	4aaa      	ldr	r2, [pc, #680]	; (8000e9c <MX_GPIO_Init+0x30c>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfa:	4ba8      	ldr	r3, [pc, #672]	; (8000e9c <MX_GPIO_Init+0x30c>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c06:	4ba5      	ldr	r3, [pc, #660]	; (8000e9c <MX_GPIO_Init+0x30c>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	4aa4      	ldr	r2, [pc, #656]	; (8000e9c <MX_GPIO_Init+0x30c>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c12:	4ba2      	ldr	r3, [pc, #648]	; (8000e9c <MX_GPIO_Init+0x30c>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000c24:	489e      	ldr	r0, [pc, #632]	; (8000ea0 <MX_GPIO_Init+0x310>)
 8000c26:	f002 fd63 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f249 0114 	movw	r1, #36884	; 0x9014
 8000c30:	489c      	ldr	r0, [pc, #624]	; (8000ea4 <MX_GPIO_Init+0x314>)
 8000c32:	f002 fd5d 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f241 0181 	movw	r1, #4225	; 0x1081
 8000c3c:	489a      	ldr	r0, [pc, #616]	; (8000ea8 <MX_GPIO_Init+0x318>)
 8000c3e:	f002 fd57 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c48:	4897      	ldr	r0, [pc, #604]	; (8000ea8 <MX_GPIO_Init+0x318>)
 8000c4a:	f002 fd51 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000c54:	4895      	ldr	r0, [pc, #596]	; (8000eac <MX_GPIO_Init+0x31c>)
 8000c56:	f002 fd4b 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_RST_GPIO_Port, SPBTLE_RF_RST_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f002 fd44 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2120      	movs	r1, #32
 8000c6c:	488d      	ldr	r0, [pc, #564]	; (8000ea4 <MX_GPIO_Init+0x314>)
 8000c6e:	f002 fd3f 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2101      	movs	r1, #1
 8000c76:	488a      	ldr	r0, [pc, #552]	; (8000ea0 <MX_GPIO_Init+0x310>)
 8000c78:	f002 fd3a 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000c7c:	f240 1315 	movw	r3, #277	; 0x115
 8000c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4882      	ldr	r0, [pc, #520]	; (8000ea0 <MX_GPIO_Init+0x310>)
 8000c96:	f002 fa75 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000c9a:	236a      	movs	r3, #106	; 0x6a
 8000c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	487c      	ldr	r0, [pc, #496]	; (8000ea0 <MX_GPIO_Init+0x310>)
 8000cb0:	f002 fa68 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000cb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4878      	ldr	r0, [pc, #480]	; (8000eac <MX_GPIO_Init+0x31c>)
 8000ccc:	f002 fa5a 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cee:	f002 fa49 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 ARD_D4_Pin PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|ARD_D4_Pin|GPIO_PIN_15;
 8000cf2:	f248 030c 	movw	r3, #32780	; 0x800c
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d04:	2301      	movs	r3, #1
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d12:	f002 fa37 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000d16:	23e0      	movs	r3, #224	; 0xe0
 8000d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d26:	2305      	movs	r3, #5
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d34:	f002 fa26 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4855      	ldr	r0, [pc, #340]	; (8000ea4 <MX_GPIO_Init+0x314>)
 8000d4e:	f002 fa19 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d52:	2302      	movs	r3, #2
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d62:	2302      	movs	r3, #2
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	484d      	ldr	r0, [pc, #308]	; (8000ea4 <MX_GPIO_Init+0x314>)
 8000d6e:	f002 fa09 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin SPSGRF_915_SDN_Pin ARD_D5_Pin
                           SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|SPSGRF_915_SDN_Pin|ARD_D5_Pin
 8000d72:	f249 0334 	movw	r3, #36916	; 0x9034
 8000d76:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4846      	ldr	r0, [pc, #280]	; (8000ea4 <MX_GPIO_Init+0x314>)
 8000d8c:	f002 f9fa 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000d90:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000d94:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	4840      	ldr	r0, [pc, #256]	; (8000ea8 <MX_GPIO_Init+0x318>)
 8000da8:	f002 f9ec 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000dac:	f243 0381 	movw	r3, #12417	; 0x3081
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4838      	ldr	r0, [pc, #224]	; (8000ea8 <MX_GPIO_Init+0x318>)
 8000dc6:	f002 f9dd 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000dca:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	4832      	ldr	r0, [pc, #200]	; (8000eac <MX_GPIO_Init+0x31c>)
 8000de4:	f002 f9ce 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000de8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	482b      	ldr	r0, [pc, #172]	; (8000eac <MX_GPIO_Init+0x31c>)
 8000e00:	f002 f9c0 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPBTLE_RF_RST_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_RST_Pin;
 8000e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPBTLE_RF_RST_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e20:	f002 f9b0 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000e24:	2302      	movs	r3, #2
 8000e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e34:	2305      	movs	r3, #5
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	481a      	ldr	r0, [pc, #104]	; (8000ea8 <MX_GPIO_Init+0x318>)
 8000e40:	f002 f9a0 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000e44:	2378      	movs	r3, #120	; 0x78
 8000e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e54:	2307      	movs	r3, #7
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4812      	ldr	r0, [pc, #72]	; (8000ea8 <MX_GPIO_Init+0x318>)
 8000e60:	f002 f990 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e64:	23c0      	movs	r3, #192	; 0xc0
 8000e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e74:	2307      	movs	r3, #7
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4809      	ldr	r0, [pc, #36]	; (8000ea4 <MX_GPIO_Init+0x314>)
 8000e80:	f002 f980 	bl	8003184 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2105      	movs	r1, #5
 8000e88:	2017      	movs	r0, #23
 8000e8a:	f001 fff6 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e8e:	2017      	movs	r0, #23
 8000e90:	f002 f80f 	bl	8002eb2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2105      	movs	r1, #5
 8000e98:	2028      	movs	r0, #40	; 0x28
 8000e9a:	e009      	b.n	8000eb0 <MX_GPIO_Init+0x320>
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	48001000 	.word	0x48001000
 8000ea4:	48000400 	.word	0x48000400
 8000ea8:	48000c00 	.word	0x48000c00
 8000eac:	48000800 	.word	0x48000800
 8000eb0:	f001 ffe3 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000eb4:	2028      	movs	r0, #40	; 0x28
 8000eb6:	f001 fffc 	bl	8002eb2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop

08000ec4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f008 fc7f 	bl	80097d0 <osDelay>
 8000ed2:	e7fb      	b.n	8000ecc <StartDefaultTask+0x8>

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	e7fe      	b.n	8000edc <Error_Handler+0x8>
	...

08000ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_MspInit+0x4c>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eea:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <HAL_MspInit+0x4c>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_MspInit+0x4c>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f08:	6593      	str	r3, [r2, #88]	; 0x58
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	210f      	movs	r1, #15
 8000f1a:	f06f 0001 	mvn.w	r0, #1
 8000f1e:	f001 ffac 	bl	8002e7a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000

08000f30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a21      	ldr	r2, [pc, #132]	; (8000fd4 <HAL_ADC_MspInit+0xa4>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d13c      	bne.n	8000fcc <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HAL_ADC_MspInit+0xa8>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	4a20      	ldr	r2, [pc, #128]	; (8000fd8 <HAL_ADC_MspInit+0xa8>)
 8000f58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <HAL_ADC_MspInit+0xa8>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_ADC_MspInit+0xa8>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <HAL_ADC_MspInit+0xa8>)
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_ADC_MspInit+0xa8>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_ADC_MspInit+0xa8>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <HAL_ADC_MspInit+0xa8>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_ADC_MspInit+0xa8>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN4
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000f9a:	233f      	movs	r3, #63	; 0x3f
 8000f9c:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f9e:	230b      	movs	r3, #11
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	480b      	ldr	r0, [pc, #44]	; (8000fdc <HAL_ADC_MspInit+0xac>)
 8000fae:	f002 f8e9 	bl	8003184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000fb2:	2310      	movs	r3, #16
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fb6:	230b      	movs	r3, #11
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc8:	f002 f8dc 	bl	8003184 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fcc:	bf00      	nop
 8000fce:	3728      	adds	r7, #40	; 0x28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	50040000 	.word	0x50040000
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	48000800 	.word	0x48000800

08000fe0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0ac      	sub	sp, #176	; 0xb0
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2288      	movs	r2, #136	; 0x88
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f00b f993 	bl	800c32c <memset>
  if(DFSDM1_Init == 0)
 8001006:	4b25      	ldr	r3, [pc, #148]	; (800109c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d142      	bne.n	8001094 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800100e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001012:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4618      	mov	r0, r3
 8001020:	f003 fd44 	bl	8004aac <HAL_RCCEx_PeriphCLKConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800102a:	f7ff ff53 	bl	8000ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001032:	4a1b      	ldr	r2, [pc, #108]	; (80010a0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001034:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001038:	6613      	str	r3, [r2, #96]	; 0x60
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800103c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800104c:	f043 0310 	orr.w	r3, r3, #16
 8001050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800105e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001062:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001078:	2306      	movs	r3, #6
 800107a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800107e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001082:	4619      	mov	r1, r3
 8001084:	4807      	ldr	r0, [pc, #28]	; (80010a4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001086:	f002 f87d 	bl	8003184 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <HAL_DFSDM_ChannelMspInit+0xbc>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	4a02      	ldr	r2, [pc, #8]	; (800109c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001092:	6013      	str	r3, [r2, #0]
  }

}
 8001094:	bf00      	nop
 8001096:	37b0      	adds	r7, #176	; 0xb0
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000818 	.word	0x20000818
 80010a0:	40021000 	.word	0x40021000
 80010a4:	48001000 	.word	0x48001000

080010a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0ae      	sub	sp, #184	; 0xb8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	2288      	movs	r2, #136	; 0x88
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f00b f92f 	bl	800c32c <memset>
  if(hi2c->Instance==I2C1)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a42      	ldr	r2, [pc, #264]	; (80011dc <HAL_I2C_MspInit+0x134>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d13c      	bne.n	8001152 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010d8:	2340      	movs	r3, #64	; 0x40
 80010da:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010dc:	2300      	movs	r3, #0
 80010de:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4618      	mov	r0, r3
 80010e6:	f003 fce1 	bl	8004aac <HAL_RCCEx_PeriphCLKConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010f0:	f7ff fef0 	bl	8000ed4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f4:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <HAL_I2C_MspInit+0x138>)
 80010f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f8:	4a39      	ldr	r2, [pc, #228]	; (80011e0 <HAL_I2C_MspInit+0x138>)
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001100:	4b37      	ldr	r3, [pc, #220]	; (80011e0 <HAL_I2C_MspInit+0x138>)
 8001102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800110c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001110:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001114:	2312      	movs	r3, #18
 8001116:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001126:	2304      	movs	r3, #4
 8001128:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001130:	4619      	mov	r1, r3
 8001132:	482c      	ldr	r0, [pc, #176]	; (80011e4 <HAL_I2C_MspInit+0x13c>)
 8001134:	f002 f826 	bl	8003184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001138:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <HAL_I2C_MspInit+0x138>)
 800113a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113c:	4a28      	ldr	r2, [pc, #160]	; (80011e0 <HAL_I2C_MspInit+0x138>)
 800113e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001142:	6593      	str	r3, [r2, #88]	; 0x58
 8001144:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <HAL_I2C_MspInit+0x138>)
 8001146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001150:	e040      	b.n	80011d4 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a24      	ldr	r2, [pc, #144]	; (80011e8 <HAL_I2C_MspInit+0x140>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d13b      	bne.n	80011d4 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001160:	2300      	movs	r3, #0
 8001162:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4618      	mov	r0, r3
 800116a:	f003 fc9f 	bl	8004aac <HAL_RCCEx_PeriphCLKConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001174:	f7ff feae 	bl	8000ed4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_I2C_MspInit+0x138>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117c:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <HAL_I2C_MspInit+0x138>)
 800117e:	f043 0302 	orr.w	r3, r3, #2
 8001182:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_I2C_MspInit+0x138>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001190:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001194:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001198:	2312      	movs	r3, #18
 800119a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011aa:	2304      	movs	r3, #4
 80011ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011b4:	4619      	mov	r1, r3
 80011b6:	480b      	ldr	r0, [pc, #44]	; (80011e4 <HAL_I2C_MspInit+0x13c>)
 80011b8:	f001 ffe4 	bl	8003184 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <HAL_I2C_MspInit+0x138>)
 80011be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <HAL_I2C_MspInit+0x138>)
 80011c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c6:	6593      	str	r3, [r2, #88]	; 0x58
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <HAL_I2C_MspInit+0x138>)
 80011ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
}
 80011d4:	bf00      	nop
 80011d6:	37b8      	adds	r7, #184	; 0xb8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40005400 	.word	0x40005400
 80011e0:	40021000 	.word	0x40021000
 80011e4:	48000400 	.word	0x48000400
 80011e8:	40005800 	.word	0x40005800

080011ec <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a17      	ldr	r2, [pc, #92]	; (8001268 <HAL_QSPI_MspInit+0x7c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d128      	bne.n	8001260 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_QSPI_MspInit+0x80>)
 8001210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001212:	4a16      	ldr	r2, [pc, #88]	; (800126c <HAL_QSPI_MspInit+0x80>)
 8001214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001218:	6513      	str	r3, [r2, #80]	; 0x50
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_QSPI_MspInit+0x80>)
 800121c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800121e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_QSPI_MspInit+0x80>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	4a10      	ldr	r2, [pc, #64]	; (800126c <HAL_QSPI_MspInit+0x80>)
 800122c:	f043 0310 	orr.w	r3, r3, #16
 8001230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_QSPI_MspInit+0x80>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	f003 0310 	and.w	r3, r3, #16
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800123e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001242:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001250:	230a      	movs	r3, #10
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <HAL_QSPI_MspInit+0x84>)
 800125c:	f001 ff92 	bl	8003184 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	a0001000 	.word	0xa0001000
 800126c:	40021000 	.word	0x40021000
 8001270:	48001000 	.word	0x48001000

08001274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <HAL_SPI_MspInit+0x7c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d128      	bne.n	80012e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 8001298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129a:	4a16      	ldr	r2, [pc, #88]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 800129c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012a0:	6593      	str	r3, [r2, #88]	; 0x58
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 80012a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80012c6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012d8:	2306      	movs	r3, #6
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <HAL_SPI_MspInit+0x84>)
 80012e4:	f001 ff4e 	bl	8003184 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	; 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40003c00 	.word	0x40003c00
 80012f4:	40021000 	.word	0x40021000
 80012f8:	48000800 	.word	0x48000800

080012fc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_SPI_MspDeInit+0x30>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d10a      	bne.n	8001324 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_SPI_MspDeInit+0x34>)
 8001310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001312:	4a07      	ldr	r2, [pc, #28]	; (8001330 <HAL_SPI_MspDeInit+0x34>)
 8001314:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001318:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 800131a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <HAL_SPI_MspDeInit+0x38>)
 8001320:	f002 f8da 	bl	80034d8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40003c00 	.word	0x40003c00
 8001330:	40021000 	.word	0x40021000
 8001334:	48000800 	.word	0x48000800

08001338 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b0ac      	sub	sp, #176	; 0xb0
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2288      	movs	r2, #136	; 0x88
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f00a ffe7 	bl	800c32c <memset>
  if(huart->Instance==USART3)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a21      	ldr	r2, [pc, #132]	; (80013e8 <HAL_UART_MspInit+0xb0>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d13b      	bne.n	80013e0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001368:	2304      	movs	r3, #4
 800136a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800136c:	2300      	movs	r3, #0
 800136e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4618      	mov	r0, r3
 8001376:	f003 fb99 	bl	8004aac <HAL_RCCEx_PeriphCLKConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001380:	f7ff fda8 	bl	8000ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_UART_MspInit+0xb4>)
 8001386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001388:	4a18      	ldr	r2, [pc, #96]	; (80013ec <HAL_UART_MspInit+0xb4>)
 800138a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138e:	6593      	str	r3, [r2, #88]	; 0x58
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <HAL_UART_MspInit+0xb4>)
 8001392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_UART_MspInit+0xb4>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a0:	4a12      	ldr	r2, [pc, #72]	; (80013ec <HAL_UART_MspInit+0xb4>)
 80013a2:	f043 0308 	orr.w	r3, r3, #8
 80013a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a8:	4b10      	ldr	r3, [pc, #64]	; (80013ec <HAL_UART_MspInit+0xb4>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80013b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013ce:	2307      	movs	r3, #7
 80013d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013d8:	4619      	mov	r1, r3
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <HAL_UART_MspInit+0xb8>)
 80013dc:	f001 fed2 	bl	8003184 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013e0:	bf00      	nop
 80013e2:	37b0      	adds	r7, #176	; 0xb0
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40004800 	.word	0x40004800
 80013ec:	40021000 	.word	0x40021000
 80013f0:	48000c00 	.word	0x48000c00

080013f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001414:	d154      	bne.n	80014c0 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b2c      	ldr	r3, [pc, #176]	; (80014c8 <HAL_PCD_MspInit+0xd4>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	4a2b      	ldr	r2, [pc, #172]	; (80014c8 <HAL_PCD_MspInit+0xd4>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001422:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <HAL_PCD_MspInit+0xd4>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800142e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001434:	2300      	movs	r3, #0
 8001436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4619      	mov	r1, r3
 8001442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001446:	f001 fe9d 	bl	8003184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800144a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800144e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800145c:	230a      	movs	r3, #10
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146a:	f001 fe8b 	bl	8003184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_PCD_MspInit+0xd4>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	4a15      	ldr	r2, [pc, #84]	; (80014c8 <HAL_PCD_MspInit+0xd4>)
 8001474:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <HAL_PCD_MspInit+0xd4>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_PCD_MspInit+0xd4>)
 8001488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d114      	bne.n	80014bc <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_PCD_MspInit+0xd4>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <HAL_PCD_MspInit+0xd4>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6593      	str	r3, [r2, #88]	; 0x58
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_PCD_MspInit+0xd4>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80014aa:	f002 fc33 	bl	8003d14 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_PCD_MspInit+0xd4>)
 80014b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b2:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <HAL_PCD_MspInit+0xd4>)
 80014b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80014ba:	e001      	b.n	80014c0 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80014bc:	f002 fc2a 	bl	8003d14 <HAL_PWREx_EnableVddUSB>
}
 80014c0:	bf00      	nop
 80014c2:	3728      	adds	r7, #40	; 0x28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <NMI_Handler+0x4>

080014d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <HardFault_Handler+0x4>

080014d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <MemManage_Handler+0x4>

080014de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fc:	f000 fbf6 	bl	8001cec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001500:	f009 fdae 	bl	800b060 <xTaskGetSchedulerState>
 8001504:	4603      	mov	r3, r0
 8001506:	2b01      	cmp	r3, #1
 8001508:	d001      	beq.n	800150e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800150a:	f00a fc4d 	bl	800bda8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}

08001512 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001516:	2020      	movs	r0, #32
 8001518:	f002 f902 	bl	8003720 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800151c:	2040      	movs	r0, #64	; 0x40
 800151e:	f002 f8ff 	bl	8003720 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001522:	2080      	movs	r0, #128	; 0x80
 8001524:	f002 f8fc 	bl	8003720 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001528:	f44f 7080 	mov.w	r0, #256	; 0x100
 800152c:	f002 f8f8 	bl	8003720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001538:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800153c:	f002 f8f0 	bl	8003720 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001540:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001544:	f002 f8ec 	bl	8003720 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001548:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800154c:	f002 f8e8 	bl	8003720 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001550:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001554:	f002 f8e4 	bl	8003720 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001558:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800155c:	f002 f8e0 	bl	8003720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return 1;
 8001568:	2301      	movs	r3, #1
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <_kill>:

int _kill(int pid, int sig)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800157e:	f00a fe8d 	bl	800c29c <__errno>
 8001582:	4603      	mov	r3, r0
 8001584:	2216      	movs	r2, #22
 8001586:	601a      	str	r2, [r3, #0]
  return -1;
 8001588:	f04f 33ff 	mov.w	r3, #4294967295
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <_exit>:

void _exit (int status)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800159c:	f04f 31ff 	mov.w	r1, #4294967295
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ffe7 	bl	8001574 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015a6:	e7fe      	b.n	80015a6 <_exit+0x12>

080015a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	e00a      	b.n	80015d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ba:	f3af 8000 	nop.w
 80015be:	4601      	mov	r1, r0
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	60ba      	str	r2, [r7, #8]
 80015c6:	b2ca      	uxtb	r2, r1
 80015c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3301      	adds	r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	dbf0      	blt.n	80015ba <_read+0x12>
  }

  return len;
 80015d8:	687b      	ldr	r3, [r7, #4]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	e009      	b.n	8001608 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	60ba      	str	r2, [r7, #8]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	dbf1      	blt.n	80015f4 <_write+0x12>
  }
  return len;
 8001610:	687b      	ldr	r3, [r7, #4]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <_close>:

int _close(int file)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001642:	605a      	str	r2, [r3, #4]
  return 0;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <_isatty>:

int _isatty(int file)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800168c:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <_sbrk+0x5c>)
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <_sbrk+0x60>)
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <_sbrk+0x64>)
 80016a2:	4a12      	ldr	r2, [pc, #72]	; (80016ec <_sbrk+0x68>)
 80016a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d207      	bcs.n	80016c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b4:	f00a fdf2 	bl	800c29c <__errno>
 80016b8:	4603      	mov	r3, r0
 80016ba:	220c      	movs	r2, #12
 80016bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	e009      	b.n	80016d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <_sbrk+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <_sbrk+0x64>)
 80016d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20018000 	.word	0x20018000
 80016e4:	00000400 	.word	0x00000400
 80016e8:	2000081c 	.word	0x2000081c
 80016ec:	200032e0 	.word	0x200032e0

080016f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <SystemInit+0x20>)
 80016f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <SystemInit+0x20>)
 80016fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <wifi_start>:
static  bool WebServerProcess(void);



static int wifi_start(void)
{
 8001714:	b5b0      	push	{r4, r5, r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 800171a:	f007 fde3 	bl	80092e4 <WIFI_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d123      	bne.n	800176c <wifi_start+0x58>
  {
    LOG(("ES-WIFI Initialized.\n"));
 8001724:	4814      	ldr	r0, [pc, #80]	; (8001778 <wifi_start+0x64>)
 8001726:	f00a fe8f 	bl	800c448 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 800172a:	463b      	mov	r3, r7
 800172c:	4618      	mov	r0, r3
 800172e:	f007 fe27 	bl	8009380 <WIFI_GetMAC_Address>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d113      	bne.n	8001760 <wifi_start+0x4c>
    {
      LOG(("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8001738:	783b      	ldrb	r3, [r7, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	787b      	ldrb	r3, [r7, #1]
 800173e:	461c      	mov	r4, r3
 8001740:	78bb      	ldrb	r3, [r7, #2]
 8001742:	461d      	mov	r5, r3
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	793a      	ldrb	r2, [r7, #4]
 8001748:	7979      	ldrb	r1, [r7, #5]
 800174a:	9102      	str	r1, [sp, #8]
 800174c:	9201      	str	r2, [sp, #4]
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	462b      	mov	r3, r5
 8001752:	4622      	mov	r2, r4
 8001754:	4601      	mov	r1, r0
 8001756:	4809      	ldr	r0, [pc, #36]	; (800177c <wifi_start+0x68>)
 8001758:	f00a fdf0 	bl	800c33c <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 800175c:	2300      	movs	r3, #0
 800175e:	e007      	b.n	8001770 <wifi_start+0x5c>
      LOG(("> ERROR : CANNOT get MAC address\n"));
 8001760:	4807      	ldr	r0, [pc, #28]	; (8001780 <wifi_start+0x6c>)
 8001762:	f00a fe71 	bl	800c448 <puts>
      return -1;
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	e001      	b.n	8001770 <wifi_start+0x5c>
    return -1;
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bdb0      	pop	{r4, r5, r7, pc}
 8001778:	0800d950 	.word	0x0800d950
 800177c:	0800d968 	.word	0x0800d968
 8001780:	0800d99c 	.word	0x0800d99c

08001784 <wifi_connect>:



int wifi_connect(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af02      	add	r7, sp, #8

  wifi_start();
 800178a:	f7ff ffc3 	bl	8001714 <wifi_start>

  LOG(("\nConnecting to %s , %s\n",SSID,PASSWORD));
 800178e:	4a19      	ldr	r2, [pc, #100]	; (80017f4 <wifi_connect+0x70>)
 8001790:	4919      	ldr	r1, [pc, #100]	; (80017f8 <wifi_connect+0x74>)
 8001792:	481a      	ldr	r0, [pc, #104]	; (80017fc <wifi_connect+0x78>)
 8001794:	f00a fdd2 	bl	800c33c <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8001798:	2203      	movs	r2, #3
 800179a:	4916      	ldr	r1, [pc, #88]	; (80017f4 <wifi_connect+0x70>)
 800179c:	4816      	ldr	r0, [pc, #88]	; (80017f8 <wifi_connect+0x74>)
 800179e:	f007 fdcd 	bl	800933c <WIFI_Connect>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d11d      	bne.n	80017e4 <wifi_connect+0x60>
  {
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 80017a8:	4815      	ldr	r0, [pc, #84]	; (8001800 <wifi_connect+0x7c>)
 80017aa:	f007 fdff 	bl	80093ac <WIFI_GetIP_Address>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d111      	bne.n	80017d8 <wifi_connect+0x54>
    {
      LOG(("> es-wifi module connected: got IP Address : %d.%d.%d.%d\n",
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <wifi_connect+0x7c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4619      	mov	r1, r3
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <wifi_connect+0x7c>)
 80017bc:	785b      	ldrb	r3, [r3, #1]
 80017be:	461a      	mov	r2, r3
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <wifi_connect+0x7c>)
 80017c2:	789b      	ldrb	r3, [r3, #2]
 80017c4:	4618      	mov	r0, r3
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <wifi_connect+0x7c>)
 80017c8:	78db      	ldrb	r3, [r3, #3]
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	4603      	mov	r3, r0
 80017ce:	480d      	ldr	r0, [pc, #52]	; (8001804 <wifi_connect+0x80>)
 80017d0:	f00a fdb4 	bl	800c33c <iprintf>
  else
  {
		 LOG(("ERROR : es-wifi module NOT connected\n"));
     return -1;
  }
  return 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	e00a      	b.n	80017ee <wifi_connect+0x6a>
		  LOG((" ERROR : es-wifi module CANNOT get IP address\n"));
 80017d8:	480b      	ldr	r0, [pc, #44]	; (8001808 <wifi_connect+0x84>)
 80017da:	f00a fe35 	bl	800c448 <puts>
      return -1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	e004      	b.n	80017ee <wifi_connect+0x6a>
		 LOG(("ERROR : es-wifi module NOT connected\n"));
 80017e4:	4809      	ldr	r0, [pc, #36]	; (800180c <wifi_connect+0x88>)
 80017e6:	f00a fe2f 	bl	800c448 <puts>
     return -1;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	0800d9c0 	.word	0x0800d9c0
 80017f8:	0800d9d0 	.word	0x0800d9d0
 80017fc:	0800d9ec 	.word	0x0800d9ec
 8001800:	20000c20 	.word	0x20000c20
 8001804:	0800da04 	.word	0x0800da04
 8001808:	0800da40 	.word	0x0800da40
 800180c:	0800da70 	.word	0x0800da70

08001810 <wifi_server>:

int wifi_server(void)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b087      	sub	sp, #28
 8001814:	af02      	add	r7, sp, #8
  bool StopServer = false;
 8001816:	2300      	movs	r3, #0
 8001818:	73fb      	strb	r3, [r7, #15]

  LOG(("\nRunning HTML Server test\n"));
 800181a:	483d      	ldr	r0, [pc, #244]	; (8001910 <wifi_server+0x100>)
 800181c:	f00a fe14 	bl	800c448 <puts>
  if (wifi_connect()!=0) return -1;
 8001820:	f7ff ffb0 	bl	8001784 <wifi_connect>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <wifi_server+0x20>
 800182a:	f04f 33ff 	mov.w	r3, #4294967295
 800182e:	e06b      	b.n	8001908 <wifi_server+0xf8>


  if (WIFI_STATUS_OK!=WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT))
 8001830:	2350      	movs	r3, #80	; 0x50
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	4b37      	ldr	r3, [pc, #220]	; (8001914 <wifi_server+0x104>)
 8001836:	2201      	movs	r2, #1
 8001838:	2100      	movs	r1, #0
 800183a:	2000      	movs	r0, #0
 800183c:	f007 fdd2 	bl	80093e4 <WIFI_StartServer>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <wifi_server+0x3c>
  {
    LOG(("ERROR: Cannot start server.\n"));
 8001846:	4834      	ldr	r0, [pc, #208]	; (8001918 <wifi_server+0x108>)
 8001848:	f00a fdfe 	bl	800c448 <puts>
  }

  LOG(("Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 800184c:	4b33      	ldr	r3, [pc, #204]	; (800191c <wifi_server+0x10c>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	4b32      	ldr	r3, [pc, #200]	; (800191c <wifi_server+0x10c>)
 8001854:	785b      	ldrb	r3, [r3, #1]
 8001856:	461a      	mov	r2, r3
 8001858:	4b30      	ldr	r3, [pc, #192]	; (800191c <wifi_server+0x10c>)
 800185a:	789b      	ldrb	r3, [r3, #2]
 800185c:	4618      	mov	r0, r3
 800185e:	4b2f      	ldr	r3, [pc, #188]	; (800191c <wifi_server+0x10c>)
 8001860:	78db      	ldrb	r3, [r3, #3]
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	4603      	mov	r3, r0
 8001866:	482e      	ldr	r0, [pc, #184]	; (8001920 <wifi_server+0x110>)
 8001868:	f00a fd68 	bl	800c33c <iprintf>
  {
    uint8_t RemoteIP[4];
    uint16_t RemotePort;


    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,&RemotePort))
 800186c:	e00f      	b.n	800188e <wifi_server+0x7e>
    {
        LOG(("Waiting connection to  %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 800186e:	4b2b      	ldr	r3, [pc, #172]	; (800191c <wifi_server+0x10c>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	4619      	mov	r1, r3
 8001874:	4b29      	ldr	r3, [pc, #164]	; (800191c <wifi_server+0x10c>)
 8001876:	785b      	ldrb	r3, [r3, #1]
 8001878:	461a      	mov	r2, r3
 800187a:	4b28      	ldr	r3, [pc, #160]	; (800191c <wifi_server+0x10c>)
 800187c:	789b      	ldrb	r3, [r3, #2]
 800187e:	4618      	mov	r0, r3
 8001880:	4b26      	ldr	r3, [pc, #152]	; (800191c <wifi_server+0x10c>)
 8001882:	78db      	ldrb	r3, [r3, #3]
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	4603      	mov	r3, r0
 8001888:	4826      	ldr	r0, [pc, #152]	; (8001924 <wifi_server+0x114>)
 800188a:	f00a fd57 	bl	800c33c <iprintf>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,&RemotePort))
 800188e:	1dbb      	adds	r3, r7, #6
 8001890:	f107 0208 	add.w	r2, r7, #8
 8001894:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001898:	2000      	movs	r0, #0
 800189a:	f007 fdd3 	bl	8009444 <WIFI_WaitServerConnection>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1e4      	bne.n	800186e <wifi_server+0x5e>

    }

    LOG(("Client connected %d.%d.%d.%d:%d\n",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 80018a4:	7a3b      	ldrb	r3, [r7, #8]
 80018a6:	4619      	mov	r1, r3
 80018a8:	7a7b      	ldrb	r3, [r7, #9]
 80018aa:	4618      	mov	r0, r3
 80018ac:	7abb      	ldrb	r3, [r7, #10]
 80018ae:	461c      	mov	r4, r3
 80018b0:	7afb      	ldrb	r3, [r7, #11]
 80018b2:	88fa      	ldrh	r2, [r7, #6]
 80018b4:	9201      	str	r2, [sp, #4]
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	4623      	mov	r3, r4
 80018ba:	4602      	mov	r2, r0
 80018bc:	481a      	ldr	r0, [pc, #104]	; (8001928 <wifi_server+0x118>)
 80018be:	f00a fd3d 	bl	800c33c <iprintf>

    StopServer=WebServerProcess();
 80018c2:	f000 f839 	bl	8001938 <WebServerProcess>
 80018c6:	4603      	mov	r3, r0
 80018c8:	73fb      	strb	r3, [r7, #15]

    if(WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 80018ca:	2000      	movs	r0, #0
 80018cc:	f007 fdfe 	bl	80094cc <WIFI_CloseServerConnection>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <wifi_server+0xd2>
    {
      LOG(("ERROR: failed to close current Server connection\n"));
 80018d6:	4815      	ldr	r0, [pc, #84]	; (800192c <wifi_server+0x11c>)
 80018d8:	f00a fdb6 	bl	800c448 <puts>
      return -1;
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
 80018e0:	e012      	b.n	8001908 <wifi_server+0xf8>
    }
  }
  while(StopServer == false);
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	f083 0301 	eor.w	r3, r3, #1
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1cf      	bne.n	800188e <wifi_server+0x7e>

  if (WIFI_STATUS_OK!=WIFI_StopServer(SOCKET))
 80018ee:	2000      	movs	r0, #0
 80018f0:	f007 fe02 	bl	80094f8 <WIFI_StopServer>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <wifi_server+0xf0>
  {
    LOG(("ERROR: Cannot stop server.\n"));
 80018fa:	480d      	ldr	r0, [pc, #52]	; (8001930 <wifi_server+0x120>)
 80018fc:	f00a fda4 	bl	800c448 <puts>
  }

  LOG(("Server is stop\n"));
 8001900:	480c      	ldr	r0, [pc, #48]	; (8001934 <wifi_server+0x124>)
 8001902:	f00a fda1 	bl	800c448 <puts>
  return 0;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bd90      	pop	{r4, r7, pc}
 8001910:	0800da98 	.word	0x0800da98
 8001914:	0800dab4 	.word	0x0800dab4
 8001918:	0800dab8 	.word	0x0800dab8
 800191c:	20000c20 	.word	0x20000c20
 8001920:	0800dad4 	.word	0x0800dad4
 8001924:	0800db24 	.word	0x0800db24
 8001928:	0800db48 	.word	0x0800db48
 800192c:	0800db6c 	.word	0x0800db6c
 8001930:	0800dba0 	.word	0x0800dba0
 8001934:	0800dbbc 	.word	0x0800dbbc

08001938 <WebServerProcess>:


static bool WebServerProcess(void)
{
 8001938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800193a:	b09d      	sub	sp, #116	; 0x74
 800193c:	af06      	add	r7, sp, #24
	uint8_t LedState=1;
 800193e:	2301      	movs	r3, #1
 8001940:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	struct CT_Sensores_t sensors;
  uint16_t  respLen;
  static   uint8_t resp[1024];
  bool    stopserver=false;
 8001944:	2300      	movs	r3, #0
 8001946:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 800194a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800194e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001952:	9200      	str	r2, [sp, #0]
 8001954:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001958:	4947      	ldr	r1, [pc, #284]	; (8001a78 <WebServerProcess+0x140>)
 800195a:	2000      	movs	r0, #0
 800195c:	f007 fe06 	bl	800956c <WIFI_ReceiveData>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d17e      	bne.n	8001a64 <WebServerProcess+0x12c>
  {
   LOG(("get %d byte from server\n",respLen));
 8001966:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001968:	4619      	mov	r1, r3
 800196a:	4844      	ldr	r0, [pc, #272]	; (8001a7c <WebServerProcess+0x144>)
 800196c:	f00a fce6 	bl	800c33c <iprintf>

   if( respLen > 0)
 8001970:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001972:	2b00      	cmp	r3, #0
 8001974:	d079      	beq.n	8001a6a <WebServerProcess+0x132>
   {
      if(strstr((char *)resp, "GET")) /* GET: put web page */
 8001976:	4942      	ldr	r1, [pc, #264]	; (8001a80 <WebServerProcess+0x148>)
 8001978:	483f      	ldr	r0, [pc, #252]	; (8001a78 <WebServerProcess+0x140>)
 800197a:	f00a fdb4 	bl	800c4e6 <strstr>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d020      	beq.n	80019c6 <WebServerProcess+0x8e>
      {
		sensors = GetSensores();
 8001984:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fe29 	bl	80005e0 <GetSensores>
        if(SendWebPage(LedState, sensors) != WIFI_STATUS_OK)
 800198e:	f897 6056 	ldrb.w	r6, [r7, #86]	; 0x56
 8001992:	466d      	mov	r5, sp
 8001994:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800199a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80019a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019aa:	4630      	mov	r0, r6
 80019ac:	f000 f87c 	bl	8001aa8 <SendWebPage>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <WebServerProcess+0x86>
        {
          LOG(("> ERROR : Cannot send web page\n"));
 80019b6:	4833      	ldr	r0, [pc, #204]	; (8001a84 <WebServerProcess+0x14c>)
 80019b8:	f00a fd46 	bl	800c448 <puts>
 80019bc:	e055      	b.n	8001a6a <WebServerProcess+0x132>
        }
        else
        {
          LOG(("Send page after  GET command\n"));
 80019be:	4832      	ldr	r0, [pc, #200]	; (8001a88 <WebServerProcess+0x150>)
 80019c0:	f00a fd42 	bl	800c448 <puts>
 80019c4:	e051      	b.n	8001a6a <WebServerProcess+0x132>
        }
       }
       else if(strstr((char *)resp, "POST"))/* POST: received info */
 80019c6:	4931      	ldr	r1, [pc, #196]	; (8001a8c <WebServerProcess+0x154>)
 80019c8:	482b      	ldr	r0, [pc, #172]	; (8001a78 <WebServerProcess+0x140>)
 80019ca:	f00a fd8c 	bl	800c4e6 <strstr>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d04a      	beq.n	8001a6a <WebServerProcess+0x132>
       {
         LOG(("Post request\n"));
 80019d4:	482e      	ldr	r0, [pc, #184]	; (8001a90 <WebServerProcess+0x158>)
 80019d6:	f00a fd37 	bl	800c448 <puts>

         if(strstr((char *)resp, "stop_server"))
 80019da:	492e      	ldr	r1, [pc, #184]	; (8001a94 <WebServerProcess+0x15c>)
 80019dc:	4826      	ldr	r0, [pc, #152]	; (8001a78 <WebServerProcess+0x140>)
 80019de:	f00a fd82 	bl	800c4e6 <strstr>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d014      	beq.n	8001a12 <WebServerProcess+0xda>
         {
           if(strstr((char *)resp, "stop_server=0"))
 80019e8:	492b      	ldr	r1, [pc, #172]	; (8001a98 <WebServerProcess+0x160>)
 80019ea:	4823      	ldr	r0, [pc, #140]	; (8001a78 <WebServerProcess+0x140>)
 80019ec:	f00a fd7b 	bl	800c4e6 <strstr>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <WebServerProcess+0xc6>
           {
             stopserver = false;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80019fc:	e009      	b.n	8001a12 <WebServerProcess+0xda>
           }
           else if(strstr((char *)resp, "stop_server=1"))
 80019fe:	4927      	ldr	r1, [pc, #156]	; (8001a9c <WebServerProcess+0x164>)
 8001a00:	481d      	ldr	r0, [pc, #116]	; (8001a78 <WebServerProcess+0x140>)
 8001a02:	f00a fd70 	bl	800c4e6 <strstr>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <WebServerProcess+0xda>
           {
             stopserver = true;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
           }
         }
         sensors = GetSensores();
 8001a12:	463b      	mov	r3, r7
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fde3 	bl	80005e0 <GetSensores>
 8001a1a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001a1e:	463d      	mov	r5, r7
 8001a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a28:	682b      	ldr	r3, [r5, #0]
 8001a2a:	6023      	str	r3, [r4, #0]
         if(SendWebPage(LedState, sensors) != WIFI_STATUS_OK)
 8001a2c:	f897 6056 	ldrb.w	r6, [r7, #86]	; 0x56
 8001a30:	466d      	mov	r5, sp
 8001a32:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a48:	4630      	mov	r0, r6
 8001a4a:	f000 f82d 	bl	8001aa8 <SendWebPage>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <WebServerProcess+0x124>
         {
           LOG(("> ERROR : Cannot send web page\n"));
 8001a54:	480b      	ldr	r0, [pc, #44]	; (8001a84 <WebServerProcess+0x14c>)
 8001a56:	f00a fcf7 	bl	800c448 <puts>
 8001a5a:	e006      	b.n	8001a6a <WebServerProcess+0x132>
         }
         else
         {
           LOG(("Send Page after POST command\n"));
 8001a5c:	4810      	ldr	r0, [pc, #64]	; (8001aa0 <WebServerProcess+0x168>)
 8001a5e:	f00a fcf3 	bl	800c448 <puts>
 8001a62:	e002      	b.n	8001a6a <WebServerProcess+0x132>
       }
     }
  }
  else
  {
    LOG(("Client close connection\n"));
 8001a64:	480f      	ldr	r0, [pc, #60]	; (8001aa4 <WebServerProcess+0x16c>)
 8001a66:	f00a fcef 	bl	800c448 <puts>
  }
  return stopserver;
 8001a6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57

 }
 8001a6e:	4618      	mov	r0, r3
 8001a70:	375c      	adds	r7, #92	; 0x5c
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000c24 	.word	0x20000c24
 8001a7c:	0800dbcc 	.word	0x0800dbcc
 8001a80:	0800dbe8 	.word	0x0800dbe8
 8001a84:	0800dbec 	.word	0x0800dbec
 8001a88:	0800dc0c 	.word	0x0800dc0c
 8001a8c:	0800dc2c 	.word	0x0800dc2c
 8001a90:	0800dc34 	.word	0x0800dc34
 8001a94:	0800dc44 	.word	0x0800dc44
 8001a98:	0800dc50 	.word	0x0800dc50
 8001a9c:	0800dc60 	.word	0x0800dc60
 8001aa0:	0800dc70 	.word	0x0800dc70
 8001aa4:	0800dc90 	.word	0x0800dc90

08001aa8 <SendWebPage>:
  * @brief  Send HTML page
  * @param  None
  * @retval None
  */
static WIFI_Status_t SendWebPage(uint8_t ledIsOn, struct CT_Sensores_t sensors)
{
 8001aa8:	b084      	sub	sp, #16
 8001aaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aac:	ed2d 8b02 	vpush	{d8}
 8001ab0:	b091      	sub	sp, #68	; 0x44
 8001ab2:	af08      	add	r7, sp, #32
 8001ab4:	4604      	mov	r4, r0
 8001ab6:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001aba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001abe:	4623      	mov	r3, r4
 8001ac0:	75fb      	strb	r3, [r7, #23]

  /* construct web page content */
  sprintf(http, "{{\"IMU1accelX\": %d, \"IMU1accelY\": %d, \"IMU1accelZ\": %d}, {\"IMU2accelX\": %d, "
		  "\"IMU2accelY\": %d, \"IMU2accelZ\": %d}, {\"IMU2gyroX\": %d, \"IMU2gyroY\": %d, \"IMU2gyroZ\": %d},"
		  "\"timestamp\": %ld}",
		(int) sensors.IMU1accelX, (int) sensors.IMU1accelY, (int) sensors.IMU1accelZ, (int) sensors.IMU2accelX,
 8001ac2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
  sprintf(http, "{{\"IMU1accelX\": %d, \"IMU1accelY\": %d, \"IMU1accelZ\": %d}, {\"IMU2accelX\": %d, "
 8001ac6:	eebd 8ae7 	vcvt.s32.f32	s16, s15
		(int) sensors.IMU1accelX, (int) sensors.IMU1accelY, (int) sensors.IMU1accelZ, (int) sensors.IMU2accelX,
 8001aca:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
  sprintf(http, "{{\"IMU1accelX\": %d, \"IMU1accelY\": %d, \"IMU1accelZ\": %d}, {\"IMU2accelX\": %d, "
 8001ace:	eefd 8ae7 	vcvt.s32.f32	s17, s15
		(int) sensors.IMU1accelX, (int) sensors.IMU1accelY, (int) sensors.IMU1accelZ, (int) sensors.IMU2accelX,
 8001ad2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
  sprintf(http, "{{\"IMU1accelX\": %d, \"IMU1accelY\": %d, \"IMU1accelZ\": %d}, {\"IMU2accelX\": %d, "
 8001ad6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ada:	ee17 4a90 	vmov	r4, s15
		(int) sensors.IMU1accelX, (int) sensors.IMU1accelY, (int) sensors.IMU1accelZ, (int) sensors.IMU2accelX,
 8001ade:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
  sprintf(http, "{{\"IMU1accelX\": %d, \"IMU1accelY\": %d, \"IMU1accelZ\": %d}, {\"IMU2accelX\": %d, "
 8001ae2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ae6:	ee17 5a90 	vmov	r5, s15
		(int) sensors.IMU2accelY, (int) sensors.IMU2accelZ, (int) sensors.IMU2gyroX, (int) sensors.IMU2gyroY,
 8001aea:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
  sprintf(http, "{{\"IMU1accelX\": %d, \"IMU1accelY\": %d, \"IMU1accelZ\": %d}, {\"IMU2accelX\": %d, "
 8001aee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001af2:	ee17 6a90 	vmov	r6, s15
		(int) sensors.IMU2accelY, (int) sensors.IMU2accelZ, (int) sensors.IMU2gyroX, (int) sensors.IMU2gyroY,
 8001af6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
  sprintf(http, "{{\"IMU1accelX\": %d, \"IMU1accelY\": %d, \"IMU1accelZ\": %d}, {\"IMU2accelX\": %d, "
 8001afa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001afe:	edc7 7a04 	vstr	s15, [r7, #16]
		(int) sensors.IMU2accelY, (int) sensors.IMU2accelZ, (int) sensors.IMU2gyroX, (int) sensors.IMU2gyroY,
 8001b02:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
  sprintf(http, "{{\"IMU1accelX\": %d, \"IMU1accelY\": %d, \"IMU1accelZ\": %d}, {\"IMU2accelX\": %d, "
 8001b06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b0a:	edc7 7a03 	vstr	s15, [r7, #12]
		(int) sensors.IMU2accelY, (int) sensors.IMU2accelZ, (int) sensors.IMU2gyroX, (int) sensors.IMU2gyroY,
 8001b0e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
  sprintf(http, "{{\"IMU1accelX\": %d, \"IMU1accelY\": %d, \"IMU1accelZ\": %d}, {\"IMU2accelX\": %d, "
 8001b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b16:	edc7 7a02 	vstr	s15, [r7, #8]
		(int) sensors.IMU2gyroZ, HAL_GetTick());
 8001b1a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
  sprintf(http, "{{\"IMU1accelX\": %d, \"IMU1accelY\": %d, \"IMU1accelZ\": %d}, {\"IMU2accelX\": %d, "
 8001b1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b22:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b26:	f000 f8f5 	bl	8001d14 <HAL_GetTick>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	9307      	str	r3, [sp, #28]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	9306      	str	r3, [sp, #24]
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	9305      	str	r3, [sp, #20]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	9304      	str	r3, [sp, #16]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	9303      	str	r3, [sp, #12]
 8001b3e:	9602      	str	r6, [sp, #8]
 8001b40:	9501      	str	r5, [sp, #4]
 8001b42:	9400      	str	r4, [sp, #0]
 8001b44:	ee18 3a90 	vmov	r3, s17
 8001b48:	ee18 2a10 	vmov	r2, s16
 8001b4c:	4915      	ldr	r1, [pc, #84]	; (8001ba4 <SendWebPage+0xfc>)
 8001b4e:	4816      	ldr	r0, [pc, #88]	; (8001ba8 <SendWebPage+0x100>)
 8001b50:	f00a fc82 	bl	800c458 <siprintf>

  ret = WIFI_SendData(0, (uint8_t *)http, strlen((char *)http), &SentDataLength, WIFI_WRITE_TIMEOUT);
 8001b54:	4814      	ldr	r0, [pc, #80]	; (8001ba8 <SendWebPage+0x100>)
 8001b56:	f7fe fb3b 	bl	80001d0 <strlen>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	f242 7110 	movw	r1, #10000	; 0x2710
 8001b66:	9100      	str	r1, [sp, #0]
 8001b68:	490f      	ldr	r1, [pc, #60]	; (8001ba8 <SendWebPage+0x100>)
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f007 fcdc 	bl	8009528 <WIFI_SendData>
 8001b70:	4603      	mov	r3, r0
 8001b72:	77fb      	strb	r3, [r7, #31]

  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http)))
 8001b74:	7ffb      	ldrb	r3, [r7, #31]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d109      	bne.n	8001b8e <SendWebPage+0xe6>
 8001b7a:	8bbb      	ldrh	r3, [r7, #28]
 8001b7c:	461c      	mov	r4, r3
 8001b7e:	480a      	ldr	r0, [pc, #40]	; (8001ba8 <SendWebPage+0x100>)
 8001b80:	f7fe fb26 	bl	80001d0 <strlen>
 8001b84:	4603      	mov	r3, r0
 8001b86:	429c      	cmp	r4, r3
 8001b88:	d001      	beq.n	8001b8e <SendWebPage+0xe6>
  {
    ret = WIFI_STATUS_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8001b8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3724      	adds	r7, #36	; 0x24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	ecbd 8b02 	vpop	{d8}
 8001b9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001b9e:	b004      	add	sp, #16
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	0800dca8 	.word	0x0800dca8
 8001ba8:	20000820 	.word	0x20000820

08001bac <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001bb0:	2002      	movs	r0, #2
 8001bb2:	f001 fdb5 	bl	8003720 <HAL_GPIO_EXTI_IRQHandler>
 portYIELD_FROM_ISR(pdFALSE);
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d102      	bne.n	8001bd0 <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8001bca:	f007 fb7b 	bl	80092c4 <SPI_WIFI_ISR>
      break;
 8001bce:	e000      	b.n	8001bd2 <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 8001bd0:	bf00      	nop
    }
  }
  portYIELD_FROM_ISR(pdFALSE);
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <SPI3_IRQHandler>:
  * @param  None
  * @retval None
  */
extern  SPI_HandleTypeDef hspi;
void SPI3_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <SPI3_IRQHandler+0x10>)
 8001be2:	f004 fa2b 	bl	800603c <HAL_SPI_IRQHandler>
  portYIELD_FROM_ISR(pdFALSE);
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20001050 	.word	0x20001050

08001bf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bf4:	f7ff fd7c 	bl	80016f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf8:	480c      	ldr	r0, [pc, #48]	; (8001c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001bfa:	490d      	ldr	r1, [pc, #52]	; (8001c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <LoopForever+0xe>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c10:	4c0a      	ldr	r4, [pc, #40]	; (8001c3c <LoopForever+0x16>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c1e:	f00a fb43 	bl	800c2a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c22:	f7fe fd03 	bl	800062c <main>

08001c26 <LoopForever>:

LoopForever:
    b LoopForever
 8001c26:	e7fe      	b.n	8001c26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c30:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c34:	0800e400 	.word	0x0800e400
  ldr r2, =_sbss
 8001c38:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c3c:	200032dc 	.word	0x200032dc

08001c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c40:	e7fe      	b.n	8001c40 <ADC1_2_IRQHandler>

08001c42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c4c:	2003      	movs	r0, #3
 8001c4e:	f001 f909 	bl	8002e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c52:	200f      	movs	r0, #15
 8001c54:	f000 f80e 	bl	8001c74 <HAL_InitTick>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d002      	beq.n	8001c64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	71fb      	strb	r3, [r7, #7]
 8001c62:	e001      	b.n	8001c68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c64:	f7ff f93c 	bl	8000ee0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c68:	79fb      	ldrb	r3, [r7, #7]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c80:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <HAL_InitTick+0x6c>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d023      	beq.n	8001cd0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c88:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_InitTick+0x70>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <HAL_InitTick+0x6c>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	4619      	mov	r1, r3
 8001c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f001 f915 	bl	8002ece <HAL_SYSTICK_Config>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10f      	bne.n	8001cca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b0f      	cmp	r3, #15
 8001cae:	d809      	bhi.n	8001cc4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	f001 f8df 	bl	8002e7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cbc:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <HAL_InitTick+0x74>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e007      	b.n	8001cd4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
 8001cc8:	e004      	b.n	8001cd4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
 8001cce:	e001      	b.n	8001cd4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20000004 	.word	0x20000004

08001cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_IncTick+0x20>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_IncTick+0x24>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <HAL_IncTick+0x24>)
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000008 	.word	0x20000008
 8001d10:	20001024 	.word	0x20001024

08001d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return uwTick;
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <HAL_GetTick+0x14>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20001024 	.word	0x20001024

08001d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d34:	f7ff ffee 	bl	8001d14 <HAL_GetTick>
 8001d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d44:	d005      	beq.n	8001d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_Delay+0x44>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4413      	add	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d52:	bf00      	nop
 8001d54:	f7ff ffde 	bl	8001d14 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d8f7      	bhi.n	8001d54 <HAL_Delay+0x28>
  {
  }
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000008 	.word	0x20000008

08001d74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	609a      	str	r2, [r3, #8]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	3360      	adds	r3, #96	; 0x60
 8001dee:	461a      	mov	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <LL_ADC_SetOffset+0x44>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e14:	bf00      	nop
 8001e16:	371c      	adds	r7, #28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	03fff000 	.word	0x03fff000

08001e24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3360      	adds	r3, #96	; 0x60
 8001e32:	461a      	mov	r2, r3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3360      	adds	r3, #96	; 0x60
 8001e60:	461a      	mov	r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	431a      	orrs	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e7a:	bf00      	nop
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b087      	sub	sp, #28
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	3330      	adds	r3, #48	; 0x30
 8001e96:	461a      	mov	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	0a1b      	lsrs	r3, r3, #8
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	4413      	add	r3, r2
 8001ea4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	211f      	movs	r1, #31
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	401a      	ands	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	0e9b      	lsrs	r3, r3, #26
 8001ebe:	f003 011f 	and.w	r1, r3, #31
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ed2:	bf00      	nop
 8001ed4:	371c      	adds	r7, #28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b087      	sub	sp, #28
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	3314      	adds	r3, #20
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	0e5b      	lsrs	r3, r3, #25
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	4413      	add	r3, r2
 8001efc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	0d1b      	lsrs	r3, r3, #20
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	2107      	movs	r1, #7
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	401a      	ands	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	0d1b      	lsrs	r3, r3, #20
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	431a      	orrs	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f28:	bf00      	nop
 8001f2a:	371c      	adds	r7, #28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	401a      	ands	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f003 0318 	and.w	r3, r3, #24
 8001f56:	4908      	ldr	r1, [pc, #32]	; (8001f78 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f58:	40d9      	lsrs	r1, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	400b      	ands	r3, r1
 8001f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f62:	431a      	orrs	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f6a:	bf00      	nop
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	0007ffff 	.word	0x0007ffff

08001f7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6093      	str	r3, [r2, #8]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fb4:	d101      	bne.n	8001fba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001fd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fdc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002000:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002004:	d101      	bne.n	800200a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <LL_ADC_IsEnabled+0x18>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <LL_ADC_IsEnabled+0x1a>
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	2b04      	cmp	r3, #4
 8002050:	d101      	bne.n	8002056 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b08      	cmp	r3, #8
 8002076:	d101      	bne.n	800207c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800208c:	b590      	push	{r4, r7, lr}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002098:	2300      	movs	r3, #0
 800209a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e136      	b.n	8002314 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d109      	bne.n	80020c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7fe ff3b 	bl	8000f30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff67 	bl	8001fa0 <LL_ADC_IsDeepPowerDownEnabled>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d004      	beq.n	80020e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff4d 	bl	8001f7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff ff82 	bl	8001ff0 <LL_ADC_IsInternalRegulatorEnabled>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d115      	bne.n	800211e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff66 	bl	8001fc8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020fc:	4b87      	ldr	r3, [pc, #540]	; (800231c <HAL_ADC_Init+0x290>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	099b      	lsrs	r3, r3, #6
 8002102:	4a87      	ldr	r2, [pc, #540]	; (8002320 <HAL_ADC_Init+0x294>)
 8002104:	fba2 2303 	umull	r2, r3, r2, r3
 8002108:	099b      	lsrs	r3, r3, #6
 800210a:	3301      	adds	r3, #1
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002110:	e002      	b.n	8002118 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	3b01      	subs	r3, #1
 8002116:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f9      	bne.n	8002112 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ff64 	bl	8001ff0 <LL_ADC_IsInternalRegulatorEnabled>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10d      	bne.n	800214a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002132:	f043 0210 	orr.w	r2, r3, #16
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	f043 0201 	orr.w	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff75 	bl	800203e <LL_ADC_REG_IsConversionOngoing>
 8002154:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b00      	cmp	r3, #0
 8002160:	f040 80cf 	bne.w	8002302 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2b00      	cmp	r3, #0
 8002168:	f040 80cb 	bne.w	8002302 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002170:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002174:	f043 0202 	orr.w	r2, r3, #2
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff49 	bl	8002018 <LL_ADC_IsEnabled>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d115      	bne.n	80021b8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800218c:	4865      	ldr	r0, [pc, #404]	; (8002324 <HAL_ADC_Init+0x298>)
 800218e:	f7ff ff43 	bl	8002018 <LL_ADC_IsEnabled>
 8002192:	4604      	mov	r4, r0
 8002194:	4864      	ldr	r0, [pc, #400]	; (8002328 <HAL_ADC_Init+0x29c>)
 8002196:	f7ff ff3f 	bl	8002018 <LL_ADC_IsEnabled>
 800219a:	4603      	mov	r3, r0
 800219c:	431c      	orrs	r4, r3
 800219e:	4863      	ldr	r0, [pc, #396]	; (800232c <HAL_ADC_Init+0x2a0>)
 80021a0:	f7ff ff3a 	bl	8002018 <LL_ADC_IsEnabled>
 80021a4:	4603      	mov	r3, r0
 80021a6:	4323      	orrs	r3, r4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d105      	bne.n	80021b8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4619      	mov	r1, r3
 80021b2:	485f      	ldr	r0, [pc, #380]	; (8002330 <HAL_ADC_Init+0x2a4>)
 80021b4:	f7ff fdde 	bl	8001d74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	7e5b      	ldrb	r3, [r3, #25]
 80021bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021c2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80021c8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80021ce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d106      	bne.n	80021f4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	3b01      	subs	r3, #1
 80021ec:	045b      	lsls	r3, r3, #17
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d009      	beq.n	8002210 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	4b47      	ldr	r3, [pc, #284]	; (8002334 <HAL_ADC_Init+0x2a8>)
 8002218:	4013      	ands	r3, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	69b9      	ldr	r1, [r7, #24]
 8002220:	430b      	orrs	r3, r1
 8002222:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff08 	bl	800203e <LL_ADC_REG_IsConversionOngoing>
 800222e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff15 	bl	8002064 <LL_ADC_INJ_IsConversionOngoing>
 800223a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d13d      	bne.n	80022be <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d13a      	bne.n	80022be <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800224c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002254:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002264:	f023 0302 	bic.w	r3, r3, #2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	69b9      	ldr	r1, [r7, #24]
 800226e:	430b      	orrs	r3, r1
 8002270:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002278:	2b01      	cmp	r3, #1
 800227a:	d118      	bne.n	80022ae <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002286:	f023 0304 	bic.w	r3, r3, #4
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002292:	4311      	orrs	r1, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002298:	4311      	orrs	r1, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800229e:	430a      	orrs	r2, r1
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0201 	orr.w	r2, r2, #1
 80022aa:	611a      	str	r2, [r3, #16]
 80022ac:	e007      	b.n	80022be <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0201 	bic.w	r2, r2, #1
 80022bc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d10c      	bne.n	80022e0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	f023 010f 	bic.w	r1, r3, #15
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	1e5a      	subs	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30
 80022de:	e007      	b.n	80022f0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 020f 	bic.w	r2, r2, #15
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f4:	f023 0303 	bic.w	r3, r3, #3
 80022f8:	f043 0201 	orr.w	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	655a      	str	r2, [r3, #84]	; 0x54
 8002300:	e007      	b.n	8002312 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002306:	f043 0210 	orr.w	r2, r3, #16
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002312:	7ffb      	ldrb	r3, [r7, #31]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3724      	adds	r7, #36	; 0x24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd90      	pop	{r4, r7, pc}
 800231c:	20000000 	.word	0x20000000
 8002320:	053e2d63 	.word	0x053e2d63
 8002324:	50040000 	.word	0x50040000
 8002328:	50040100 	.word	0x50040100
 800232c:	50040200 	.word	0x50040200
 8002330:	50040300 	.word	0x50040300
 8002334:	fff0c007 	.word	0xfff0c007

08002338 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b0b6      	sub	sp, #216	; 0xd8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_ADC_ConfigChannel+0x22>
 8002356:	2302      	movs	r3, #2
 8002358:	e3c7      	b.n	8002aea <HAL_ADC_ConfigChannel+0x7b2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fe69 	bl	800203e <LL_ADC_REG_IsConversionOngoing>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	f040 83a8 	bne.w	8002ac4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b05      	cmp	r3, #5
 800237a:	d824      	bhi.n	80023c6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	3b02      	subs	r3, #2
 8002382:	2b03      	cmp	r3, #3
 8002384:	d81b      	bhi.n	80023be <HAL_ADC_ConfigChannel+0x86>
 8002386:	a201      	add	r2, pc, #4	; (adr r2, 800238c <HAL_ADC_ConfigChannel+0x54>)
 8002388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238c:	0800239d 	.word	0x0800239d
 8002390:	080023a5 	.word	0x080023a5
 8002394:	080023ad 	.word	0x080023ad
 8002398:	080023b5 	.word	0x080023b5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	220c      	movs	r2, #12
 80023a0:	605a      	str	r2, [r3, #4]
          break;
 80023a2:	e011      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2212      	movs	r2, #18
 80023a8:	605a      	str	r2, [r3, #4]
          break;
 80023aa:	e00d      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2218      	movs	r2, #24
 80023b0:	605a      	str	r2, [r3, #4]
          break;
 80023b2:	e009      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ba:	605a      	str	r2, [r3, #4]
          break;
 80023bc:	e004      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2206      	movs	r2, #6
 80023c2:	605a      	str	r2, [r3, #4]
          break;
 80023c4:	e000      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80023c6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	f7ff fd56 	bl	8001e86 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fe2d 	bl	800203e <LL_ADC_REG_IsConversionOngoing>
 80023e4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fe39 	bl	8002064 <LL_ADC_INJ_IsConversionOngoing>
 80023f2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f040 81a6 	bne.w	800274c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002400:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002404:	2b00      	cmp	r3, #0
 8002406:	f040 81a1 	bne.w	800274c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6819      	ldr	r1, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	461a      	mov	r2, r3
 8002418:	f7ff fd61 	bl	8001ede <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	08db      	lsrs	r3, r3, #3
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	2b04      	cmp	r3, #4
 800243c:	d00a      	beq.n	8002454 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6919      	ldr	r1, [r3, #16]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800244e:	f7ff fcc5 	bl	8001ddc <LL_ADC_SetOffset>
 8002452:	e17b      	b.n	800274c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fce2 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 8002460:	4603      	mov	r3, r0
 8002462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10a      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x148>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fcd7 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 8002476:	4603      	mov	r3, r0
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	f003 021f 	and.w	r2, r3, #31
 800247e:	e01e      	b.n	80024be <HAL_ADC_ConfigChannel+0x186>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2100      	movs	r1, #0
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fccc 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 800248c:	4603      	mov	r3, r0
 800248e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800249e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80024ae:	2320      	movs	r3, #32
 80024b0:	e004      	b.n	80024bc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80024b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d105      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x19e>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	0e9b      	lsrs	r3, r3, #26
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	e018      	b.n	8002508 <HAL_ADC_ConfigChannel+0x1d0>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80024ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80024f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80024fa:	2320      	movs	r3, #32
 80024fc:	e004      	b.n	8002508 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80024fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002508:	429a      	cmp	r2, r3
 800250a:	d106      	bne.n	800251a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2200      	movs	r2, #0
 8002512:	2100      	movs	r1, #0
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fc9b 	bl	8001e50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2101      	movs	r1, #1
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fc7f 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 8002526:	4603      	mov	r3, r0
 8002528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10a      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x20e>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2101      	movs	r1, #1
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fc74 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 800253c:	4603      	mov	r3, r0
 800253e:	0e9b      	lsrs	r3, r3, #26
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	e01e      	b.n	8002584 <HAL_ADC_ConfigChannel+0x24c>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2101      	movs	r1, #1
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fc69 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 8002552:	4603      	mov	r3, r0
 8002554:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002564:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002568:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800256c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002574:	2320      	movs	r3, #32
 8002576:	e004      	b.n	8002582 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002578:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258c:	2b00      	cmp	r3, #0
 800258e:	d105      	bne.n	800259c <HAL_ADC_ConfigChannel+0x264>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	0e9b      	lsrs	r3, r3, #26
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	e018      	b.n	80025ce <HAL_ADC_ConfigChannel+0x296>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80025b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80025b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80025c0:	2320      	movs	r3, #32
 80025c2:	e004      	b.n	80025ce <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80025c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d106      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2200      	movs	r2, #0
 80025d8:	2101      	movs	r1, #1
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fc38 	bl	8001e50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2102      	movs	r1, #2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fc1c 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10a      	bne.n	800260c <HAL_ADC_ConfigChannel+0x2d4>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2102      	movs	r1, #2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fc11 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 8002602:	4603      	mov	r3, r0
 8002604:	0e9b      	lsrs	r3, r3, #26
 8002606:	f003 021f 	and.w	r2, r3, #31
 800260a:	e01e      	b.n	800264a <HAL_ADC_ConfigChannel+0x312>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2102      	movs	r1, #2
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fc06 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 8002618:	4603      	mov	r3, r0
 800261a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800262a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800262e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002632:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800263a:	2320      	movs	r3, #32
 800263c:	e004      	b.n	8002648 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800263e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002652:	2b00      	cmp	r3, #0
 8002654:	d105      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x32a>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	0e9b      	lsrs	r3, r3, #26
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	e016      	b.n	8002690 <HAL_ADC_ConfigChannel+0x358>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002674:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002676:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800267a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002682:	2320      	movs	r3, #32
 8002684:	e004      	b.n	8002690 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002686:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002690:	429a      	cmp	r2, r3
 8002692:	d106      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2200      	movs	r2, #0
 800269a:	2102      	movs	r1, #2
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fbd7 	bl	8001e50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2103      	movs	r1, #3
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fbbb 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10a      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x396>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2103      	movs	r1, #3
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fbb0 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 80026c4:	4603      	mov	r3, r0
 80026c6:	0e9b      	lsrs	r3, r3, #26
 80026c8:	f003 021f 	and.w	r2, r3, #31
 80026cc:	e017      	b.n	80026fe <HAL_ADC_ConfigChannel+0x3c6>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2103      	movs	r1, #3
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fba5 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 80026da:	4603      	mov	r3, r0
 80026dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80026e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026e8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80026ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80026f0:	2320      	movs	r3, #32
 80026f2:	e003      	b.n	80026fc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80026f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002706:	2b00      	cmp	r3, #0
 8002708:	d105      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x3de>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	0e9b      	lsrs	r3, r3, #26
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	e011      	b.n	800273a <HAL_ADC_ConfigChannel+0x402>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002726:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800272e:	2320      	movs	r3, #32
 8002730:	e003      	b.n	800273a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800273a:	429a      	cmp	r2, r3
 800273c:	d106      	bne.n	800274c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2200      	movs	r2, #0
 8002744:	2103      	movs	r1, #3
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fb82 	bl	8001e50 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fc61 	bl	8002018 <LL_ADC_IsEnabled>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	f040 813f 	bne.w	80029dc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6819      	ldr	r1, [r3, #0]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	461a      	mov	r2, r3
 800276c:	f7ff fbe2 	bl	8001f34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4a8e      	ldr	r2, [pc, #568]	; (80029b0 <HAL_ADC_ConfigChannel+0x678>)
 8002776:	4293      	cmp	r3, r2
 8002778:	f040 8130 	bne.w	80029dc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10b      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x46c>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	0e9b      	lsrs	r3, r3, #26
 8002792:	3301      	adds	r3, #1
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	2b09      	cmp	r3, #9
 800279a:	bf94      	ite	ls
 800279c:	2301      	movls	r3, #1
 800279e:	2300      	movhi	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	e019      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x4a0>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80027b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80027b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80027bc:	2320      	movs	r3, #32
 80027be:	e003      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80027c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	3301      	adds	r3, #1
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	2b09      	cmp	r3, #9
 80027d0:	bf94      	ite	ls
 80027d2:	2301      	movls	r3, #1
 80027d4:	2300      	movhi	r3, #0
 80027d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d079      	beq.n	80028d0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d107      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x4c0>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	0e9b      	lsrs	r3, r3, #26
 80027ee:	3301      	adds	r3, #1
 80027f0:	069b      	lsls	r3, r3, #26
 80027f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027f6:	e015      	b.n	8002824 <HAL_ADC_ConfigChannel+0x4ec>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002808:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800280a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002810:	2320      	movs	r3, #32
 8002812:	e003      	b.n	800281c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002816:	fab3 f383 	clz	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	3301      	adds	r3, #1
 800281e:	069b      	lsls	r3, r3, #26
 8002820:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282c:	2b00      	cmp	r3, #0
 800282e:	d109      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x50c>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	0e9b      	lsrs	r3, r3, #26
 8002836:	3301      	adds	r3, #1
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	2101      	movs	r1, #1
 800283e:	fa01 f303 	lsl.w	r3, r1, r3
 8002842:	e017      	b.n	8002874 <HAL_ADC_ConfigChannel+0x53c>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002854:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800285c:	2320      	movs	r3, #32
 800285e:	e003      	b.n	8002868 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	3301      	adds	r3, #1
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	2101      	movs	r1, #1
 8002870:	fa01 f303 	lsl.w	r3, r1, r3
 8002874:	ea42 0103 	orr.w	r1, r2, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10a      	bne.n	800289a <HAL_ADC_ConfigChannel+0x562>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0e9b      	lsrs	r3, r3, #26
 800288a:	3301      	adds	r3, #1
 800288c:	f003 021f 	and.w	r2, r3, #31
 8002890:	4613      	mov	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4413      	add	r3, r2
 8002896:	051b      	lsls	r3, r3, #20
 8002898:	e018      	b.n	80028cc <HAL_ADC_ConfigChannel+0x594>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80028ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80028b2:	2320      	movs	r3, #32
 80028b4:	e003      	b.n	80028be <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80028b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b8:	fab3 f383 	clz	r3, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	f003 021f 	and.w	r2, r3, #31
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028cc:	430b      	orrs	r3, r1
 80028ce:	e080      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d107      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x5b4>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	0e9b      	lsrs	r3, r3, #26
 80028e2:	3301      	adds	r3, #1
 80028e4:	069b      	lsls	r3, r3, #26
 80028e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ea:	e015      	b.n	8002918 <HAL_ADC_ConfigChannel+0x5e0>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80028fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002904:	2320      	movs	r3, #32
 8002906:	e003      	b.n	8002910 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290a:	fab3 f383 	clz	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	3301      	adds	r3, #1
 8002912:	069b      	lsls	r3, r3, #26
 8002914:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002920:	2b00      	cmp	r3, #0
 8002922:	d109      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x600>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0e9b      	lsrs	r3, r3, #26
 800292a:	3301      	adds	r3, #1
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	2101      	movs	r1, #1
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	e017      	b.n	8002968 <HAL_ADC_ConfigChannel+0x630>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	61fb      	str	r3, [r7, #28]
  return result;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002950:	2320      	movs	r3, #32
 8002952:	e003      	b.n	800295c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	3301      	adds	r3, #1
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	2101      	movs	r1, #1
 8002964:	fa01 f303 	lsl.w	r3, r1, r3
 8002968:	ea42 0103 	orr.w	r1, r2, r3
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10d      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x65c>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0e9b      	lsrs	r3, r3, #26
 800297e:	3301      	adds	r3, #1
 8002980:	f003 021f 	and.w	r2, r3, #31
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	3b1e      	subs	r3, #30
 800298c:	051b      	lsls	r3, r3, #20
 800298e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002992:	e01d      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x698>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	613b      	str	r3, [r7, #16]
  return result;
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d103      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80029ac:	2320      	movs	r3, #32
 80029ae:	e005      	b.n	80029bc <HAL_ADC_ConfigChannel+0x684>
 80029b0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	3301      	adds	r3, #1
 80029be:	f003 021f 	and.w	r2, r3, #31
 80029c2:	4613      	mov	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4413      	add	r3, r2
 80029c8:	3b1e      	subs	r3, #30
 80029ca:	051b      	lsls	r3, r3, #20
 80029cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d0:	430b      	orrs	r3, r1
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	6892      	ldr	r2, [r2, #8]
 80029d6:	4619      	mov	r1, r3
 80029d8:	f7ff fa81 	bl	8001ede <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4b44      	ldr	r3, [pc, #272]	; (8002af4 <HAL_ADC_ConfigChannel+0x7bc>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d07a      	beq.n	8002ade <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029e8:	4843      	ldr	r0, [pc, #268]	; (8002af8 <HAL_ADC_ConfigChannel+0x7c0>)
 80029ea:	f7ff f9e9 	bl	8001dc0 <LL_ADC_GetCommonPathInternalCh>
 80029ee:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a41      	ldr	r2, [pc, #260]	; (8002afc <HAL_ADC_ConfigChannel+0x7c4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d12c      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d126      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a3c      	ldr	r2, [pc, #240]	; (8002b00 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d004      	beq.n	8002a1c <HAL_ADC_ConfigChannel+0x6e4>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a3b      	ldr	r2, [pc, #236]	; (8002b04 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d15d      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a24:	4619      	mov	r1, r3
 8002a26:	4834      	ldr	r0, [pc, #208]	; (8002af8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a28:	f7ff f9b7 	bl	8001d9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a2c:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	099b      	lsrs	r3, r3, #6
 8002a32:	4a36      	ldr	r2, [pc, #216]	; (8002b0c <HAL_ADC_ConfigChannel+0x7d4>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	099b      	lsrs	r3, r3, #6
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a46:	e002      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f9      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a54:	e040      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a2d      	ldr	r2, [pc, #180]	; (8002b10 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d118      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x75a>
 8002a60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d112      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a23      	ldr	r2, [pc, #140]	; (8002b00 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d004      	beq.n	8002a80 <HAL_ADC_ConfigChannel+0x748>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a22      	ldr	r2, [pc, #136]	; (8002b04 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d12d      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a88:	4619      	mov	r1, r3
 8002a8a:	481b      	ldr	r0, [pc, #108]	; (8002af8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a8c:	f7ff f985 	bl	8001d9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a90:	e024      	b.n	8002adc <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d120      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d11a      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a14      	ldr	r2, [pc, #80]	; (8002b00 <HAL_ADC_ConfigChannel+0x7c8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d115      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ab2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ab6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aba:	4619      	mov	r1, r3
 8002abc:	480e      	ldr	r0, [pc, #56]	; (8002af8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002abe:	f7ff f96c 	bl	8001d9a <LL_ADC_SetCommonPathInternalCh>
 8002ac2:	e00c      	b.n	8002ade <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac8:	f043 0220 	orr.w	r2, r3, #32
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002ad6:	e002      	b.n	8002ade <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ad8:	bf00      	nop
 8002ada:	e000      	b.n	8002ade <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002adc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ae6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	37d8      	adds	r7, #216	; 0xd8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	80080000 	.word	0x80080000
 8002af8:	50040300 	.word	0x50040300
 8002afc:	c7520000 	.word	0xc7520000
 8002b00:	50040000 	.word	0x50040000
 8002b04:	50040200 	.word	0x50040200
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	053e2d63 	.word	0x053e2d63
 8002b10:	cb840000 	.word	0xcb840000
 8002b14:	80000001 	.word	0x80000001

08002b18 <LL_ADC_IsEnabled>:
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <LL_ADC_IsEnabled+0x18>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <LL_ADC_IsEnabled+0x1a>
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <LL_ADC_REG_IsConversionOngoing>:
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d101      	bne.n	8002b56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b09f      	sub	sp, #124	; 0x7c
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e093      	b.n	8002caa <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a47      	ldr	r2, [pc, #284]	; (8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d102      	bne.n	8002ba2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b9c:	4b46      	ldr	r3, [pc, #280]	; (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	e001      	b.n	8002ba6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10b      	bne.n	8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb0:	f043 0220 	orr.w	r2, r3, #32
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e072      	b.n	8002caa <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff ffb9 	bl	8002b3e <LL_ADC_REG_IsConversionOngoing>
 8002bcc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff ffb3 	bl	8002b3e <LL_ADC_REG_IsConversionOngoing>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d154      	bne.n	8002c88 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d151      	bne.n	8002c88 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002be4:	4b35      	ldr	r3, [pc, #212]	; (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002be6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d02c      	beq.n	8002c4a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	6859      	ldr	r1, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c02:	035b      	lsls	r3, r3, #13
 8002c04:	430b      	orrs	r3, r1
 8002c06:	431a      	orrs	r2, r3
 8002c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c0a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c0c:	4829      	ldr	r0, [pc, #164]	; (8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c0e:	f7ff ff83 	bl	8002b18 <LL_ADC_IsEnabled>
 8002c12:	4604      	mov	r4, r0
 8002c14:	4828      	ldr	r0, [pc, #160]	; (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c16:	f7ff ff7f 	bl	8002b18 <LL_ADC_IsEnabled>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	431c      	orrs	r4, r3
 8002c1e:	4828      	ldr	r0, [pc, #160]	; (8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c20:	f7ff ff7a 	bl	8002b18 <LL_ADC_IsEnabled>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4323      	orrs	r3, r4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d137      	bne.n	8002c9c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c34:	f023 030f 	bic.w	r3, r3, #15
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	6811      	ldr	r1, [r2, #0]
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	6892      	ldr	r2, [r2, #8]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	431a      	orrs	r2, r3
 8002c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c46:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c48:	e028      	b.n	8002c9c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c54:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c56:	4817      	ldr	r0, [pc, #92]	; (8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c58:	f7ff ff5e 	bl	8002b18 <LL_ADC_IsEnabled>
 8002c5c:	4604      	mov	r4, r0
 8002c5e:	4816      	ldr	r0, [pc, #88]	; (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c60:	f7ff ff5a 	bl	8002b18 <LL_ADC_IsEnabled>
 8002c64:	4603      	mov	r3, r0
 8002c66:	431c      	orrs	r4, r3
 8002c68:	4815      	ldr	r0, [pc, #84]	; (8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c6a:	f7ff ff55 	bl	8002b18 <LL_ADC_IsEnabled>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4323      	orrs	r3, r4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d112      	bne.n	8002c9c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c7e:	f023 030f 	bic.w	r3, r3, #15
 8002c82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c84:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c86:	e009      	b.n	8002c9c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8c:	f043 0220 	orr.w	r2, r3, #32
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002c9a:	e000      	b.n	8002c9e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ca6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	377c      	adds	r7, #124	; 0x7c
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd90      	pop	{r4, r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	50040000 	.word	0x50040000
 8002cb8:	50040100 	.word	0x50040100
 8002cbc:	50040300 	.word	0x50040300
 8002cc0:	50040200 	.word	0x50040200

08002cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cf6:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	60d3      	str	r3, [r2, #12]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <__NVIC_GetPriorityGrouping+0x18>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	f003 0307 	and.w	r3, r3, #7
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	db0b      	blt.n	8002d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	4907      	ldr	r1, [pc, #28]	; (8002d60 <__NVIC_EnableIRQ+0x38>)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2001      	movs	r0, #1
 8002d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	e000e100 	.word	0xe000e100

08002d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	6039      	str	r1, [r7, #0]
 8002d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	db0a      	blt.n	8002d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	490c      	ldr	r1, [pc, #48]	; (8002db0 <__NVIC_SetPriority+0x4c>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	0112      	lsls	r2, r2, #4
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	440b      	add	r3, r1
 8002d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d8c:	e00a      	b.n	8002da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	4908      	ldr	r1, [pc, #32]	; (8002db4 <__NVIC_SetPriority+0x50>)
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	3b04      	subs	r3, #4
 8002d9c:	0112      	lsls	r2, r2, #4
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	440b      	add	r3, r1
 8002da2:	761a      	strb	r2, [r3, #24]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000e100 	.word	0xe000e100
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	; 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f1c3 0307 	rsb	r3, r3, #7
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	bf28      	it	cs
 8002dd6:	2304      	movcs	r3, #4
 8002dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d902      	bls.n	8002de8 <NVIC_EncodePriority+0x30>
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3b03      	subs	r3, #3
 8002de6:	e000      	b.n	8002dea <NVIC_EncodePriority+0x32>
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	f04f 32ff 	mov.w	r2, #4294967295
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43da      	mvns	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e00:	f04f 31ff 	mov.w	r1, #4294967295
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	43d9      	mvns	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	4313      	orrs	r3, r2
         );
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3724      	adds	r7, #36	; 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e30:	d301      	bcc.n	8002e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e32:	2301      	movs	r3, #1
 8002e34:	e00f      	b.n	8002e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <SysTick_Config+0x40>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e3e:	210f      	movs	r1, #15
 8002e40:	f04f 30ff 	mov.w	r0, #4294967295
 8002e44:	f7ff ff8e 	bl	8002d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <SysTick_Config+0x40>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e4e:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <SysTick_Config+0x40>)
 8002e50:	2207      	movs	r2, #7
 8002e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	e000e010 	.word	0xe000e010

08002e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff ff29 	bl	8002cc4 <__NVIC_SetPriorityGrouping>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b086      	sub	sp, #24
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e8c:	f7ff ff3e 	bl	8002d0c <__NVIC_GetPriorityGrouping>
 8002e90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	6978      	ldr	r0, [r7, #20]
 8002e98:	f7ff ff8e 	bl	8002db8 <NVIC_EncodePriority>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff5d 	bl	8002d64 <__NVIC_SetPriority>
}
 8002eaa:	bf00      	nop
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff31 	bl	8002d28 <__NVIC_EnableIRQ>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff ffa2 	bl	8002e20 <SysTick_Config>
 8002edc:	4603      	mov	r3, r0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e0ac      	b.n	8003054 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f8b2 	bl	8003068 <DFSDM_GetChannelFromInstance>
 8002f04:	4603      	mov	r3, r0
 8002f06:	4a55      	ldr	r2, [pc, #340]	; (800305c <HAL_DFSDM_ChannelInit+0x174>)
 8002f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e09f      	b.n	8003054 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7fe f863 	bl	8000fe0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002f1a:	4b51      	ldr	r3, [pc, #324]	; (8003060 <HAL_DFSDM_ChannelInit+0x178>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	4a4f      	ldr	r2, [pc, #316]	; (8003060 <HAL_DFSDM_ChannelInit+0x178>)
 8002f22:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002f24:	4b4e      	ldr	r3, [pc, #312]	; (8003060 <HAL_DFSDM_ChannelInit+0x178>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d125      	bne.n	8002f78 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002f2c:	4b4d      	ldr	r3, [pc, #308]	; (8003064 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a4c      	ldr	r2, [pc, #304]	; (8003064 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f36:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002f38:	4b4a      	ldr	r3, [pc, #296]	; (8003064 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4948      	ldr	r1, [pc, #288]	; (8003064 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002f46:	4b47      	ldr	r3, [pc, #284]	; (8003064 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a46      	ldr	r2, [pc, #280]	; (8003064 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f4c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002f50:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	791b      	ldrb	r3, [r3, #4]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d108      	bne.n	8002f6c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002f5a:	4b42      	ldr	r3, [pc, #264]	; (8003064 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	041b      	lsls	r3, r3, #16
 8002f66:	493f      	ldr	r1, [pc, #252]	; (8003064 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002f6c:	4b3d      	ldr	r3, [pc, #244]	; (8003064 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a3c      	ldr	r2, [pc, #240]	; (8003064 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f76:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002f86:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6819      	ldr	r1, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002f96:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002f9c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 020f 	bic.w	r2, r2, #15
 8002fb4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6819      	ldr	r1, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002fdc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6899      	ldr	r1, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	3b01      	subs	r3, #1
 8002fee:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f002 0207 	and.w	r2, r2, #7
 8003008:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003034:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f810 	bl	8003068 <DFSDM_GetChannelFromInstance>
 8003048:	4602      	mov	r2, r0
 800304a:	4904      	ldr	r1, [pc, #16]	; (800305c <HAL_DFSDM_ChannelInit+0x174>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	2000102c 	.word	0x2000102c
 8003060:	20001028 	.word	0x20001028
 8003064:	40016000 	.word	0x40016000

08003068 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a1c      	ldr	r2, [pc, #112]	; (80030e4 <DFSDM_GetChannelFromInstance+0x7c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d102      	bne.n	800307e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	e02b      	b.n	80030d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a19      	ldr	r2, [pc, #100]	; (80030e8 <DFSDM_GetChannelFromInstance+0x80>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d102      	bne.n	800308c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003086:	2301      	movs	r3, #1
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	e024      	b.n	80030d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a17      	ldr	r2, [pc, #92]	; (80030ec <DFSDM_GetChannelFromInstance+0x84>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d102      	bne.n	800309a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003094:	2302      	movs	r3, #2
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	e01d      	b.n	80030d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a14      	ldr	r2, [pc, #80]	; (80030f0 <DFSDM_GetChannelFromInstance+0x88>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d102      	bne.n	80030a8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80030a2:	2304      	movs	r3, #4
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	e016      	b.n	80030d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a12      	ldr	r2, [pc, #72]	; (80030f4 <DFSDM_GetChannelFromInstance+0x8c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d102      	bne.n	80030b6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80030b0:	2305      	movs	r3, #5
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	e00f      	b.n	80030d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a0f      	ldr	r2, [pc, #60]	; (80030f8 <DFSDM_GetChannelFromInstance+0x90>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d102      	bne.n	80030c4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80030be:	2306      	movs	r3, #6
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	e008      	b.n	80030d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <DFSDM_GetChannelFromInstance+0x94>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d102      	bne.n	80030d2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80030cc:	2307      	movs	r3, #7
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	e001      	b.n	80030d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80030d2:	2303      	movs	r3, #3
 80030d4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80030d6:	68fb      	ldr	r3, [r7, #12]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	40016000 	.word	0x40016000
 80030e8:	40016020 	.word	0x40016020
 80030ec:	40016040 	.word	0x40016040
 80030f0:	40016080 	.word	0x40016080
 80030f4:	400160a0 	.word	0x400160a0
 80030f8:	400160c0 	.word	0x400160c0
 80030fc:	400160e0 	.word	0x400160e0

08003100 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d005      	beq.n	8003124 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2204      	movs	r2, #4
 800311c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]
 8003122:	e029      	b.n	8003178 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 020e 	bic.w	r2, r2, #14
 8003132:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0201 	bic.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	f003 021c 	and.w	r2, r3, #28
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	2101      	movs	r1, #1
 8003152:	fa01 f202 	lsl.w	r2, r1, r2
 8003156:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4798      	blx	r3
    }
  }
  return status;
 8003178:	7bfb      	ldrb	r3, [r7, #15]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003192:	e17f      	b.n	8003494 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	2101      	movs	r1, #1
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	4013      	ands	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8171 	beq.w	800348e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d005      	beq.n	80031c4 <HAL_GPIO_Init+0x40>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d130      	bne.n	8003226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	2203      	movs	r2, #3
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4013      	ands	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031fa:	2201      	movs	r2, #1
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	091b      	lsrs	r3, r3, #4
 8003210:	f003 0201 	and.w	r2, r3, #1
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	2b03      	cmp	r3, #3
 8003230:	d118      	bne.n	8003264 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003238:	2201      	movs	r2, #1
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	08db      	lsrs	r3, r3, #3
 800324e:	f003 0201 	and.w	r2, r3, #1
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	2b03      	cmp	r3, #3
 800326e:	d017      	beq.n	80032a0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	2203      	movs	r2, #3
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4013      	ands	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d123      	bne.n	80032f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	08da      	lsrs	r2, r3, #3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3208      	adds	r2, #8
 80032b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	220f      	movs	r2, #15
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4013      	ands	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	08da      	lsrs	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3208      	adds	r2, #8
 80032ee:	6939      	ldr	r1, [r7, #16]
 80032f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2203      	movs	r2, #3
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4013      	ands	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0203 	and.w	r2, r3, #3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80ac 	beq.w	800348e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003336:	4b5f      	ldr	r3, [pc, #380]	; (80034b4 <HAL_GPIO_Init+0x330>)
 8003338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800333a:	4a5e      	ldr	r2, [pc, #376]	; (80034b4 <HAL_GPIO_Init+0x330>)
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	6613      	str	r3, [r2, #96]	; 0x60
 8003342:	4b5c      	ldr	r3, [pc, #368]	; (80034b4 <HAL_GPIO_Init+0x330>)
 8003344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	60bb      	str	r3, [r7, #8]
 800334c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800334e:	4a5a      	ldr	r2, [pc, #360]	; (80034b8 <HAL_GPIO_Init+0x334>)
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	089b      	lsrs	r3, r3, #2
 8003354:	3302      	adds	r3, #2
 8003356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	220f      	movs	r2, #15
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003378:	d025      	beq.n	80033c6 <HAL_GPIO_Init+0x242>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a4f      	ldr	r2, [pc, #316]	; (80034bc <HAL_GPIO_Init+0x338>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d01f      	beq.n	80033c2 <HAL_GPIO_Init+0x23e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a4e      	ldr	r2, [pc, #312]	; (80034c0 <HAL_GPIO_Init+0x33c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d019      	beq.n	80033be <HAL_GPIO_Init+0x23a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a4d      	ldr	r2, [pc, #308]	; (80034c4 <HAL_GPIO_Init+0x340>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d013      	beq.n	80033ba <HAL_GPIO_Init+0x236>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a4c      	ldr	r2, [pc, #304]	; (80034c8 <HAL_GPIO_Init+0x344>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00d      	beq.n	80033b6 <HAL_GPIO_Init+0x232>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a4b      	ldr	r2, [pc, #300]	; (80034cc <HAL_GPIO_Init+0x348>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d007      	beq.n	80033b2 <HAL_GPIO_Init+0x22e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a4a      	ldr	r2, [pc, #296]	; (80034d0 <HAL_GPIO_Init+0x34c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d101      	bne.n	80033ae <HAL_GPIO_Init+0x22a>
 80033aa:	2306      	movs	r3, #6
 80033ac:	e00c      	b.n	80033c8 <HAL_GPIO_Init+0x244>
 80033ae:	2307      	movs	r3, #7
 80033b0:	e00a      	b.n	80033c8 <HAL_GPIO_Init+0x244>
 80033b2:	2305      	movs	r3, #5
 80033b4:	e008      	b.n	80033c8 <HAL_GPIO_Init+0x244>
 80033b6:	2304      	movs	r3, #4
 80033b8:	e006      	b.n	80033c8 <HAL_GPIO_Init+0x244>
 80033ba:	2303      	movs	r3, #3
 80033bc:	e004      	b.n	80033c8 <HAL_GPIO_Init+0x244>
 80033be:	2302      	movs	r3, #2
 80033c0:	e002      	b.n	80033c8 <HAL_GPIO_Init+0x244>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_GPIO_Init+0x244>
 80033c6:	2300      	movs	r3, #0
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	f002 0203 	and.w	r2, r2, #3
 80033ce:	0092      	lsls	r2, r2, #2
 80033d0:	4093      	lsls	r3, r2
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033d8:	4937      	ldr	r1, [pc, #220]	; (80034b8 <HAL_GPIO_Init+0x334>)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	089b      	lsrs	r3, r3, #2
 80033de:	3302      	adds	r3, #2
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033e6:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <HAL_GPIO_Init+0x350>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4013      	ands	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800340a:	4a32      	ldr	r2, [pc, #200]	; (80034d4 <HAL_GPIO_Init+0x350>)
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003410:	4b30      	ldr	r3, [pc, #192]	; (80034d4 <HAL_GPIO_Init+0x350>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	43db      	mvns	r3, r3
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4013      	ands	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003434:	4a27      	ldr	r2, [pc, #156]	; (80034d4 <HAL_GPIO_Init+0x350>)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800343a:	4b26      	ldr	r3, [pc, #152]	; (80034d4 <HAL_GPIO_Init+0x350>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	43db      	mvns	r3, r3
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4013      	ands	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800345e:	4a1d      	ldr	r2, [pc, #116]	; (80034d4 <HAL_GPIO_Init+0x350>)
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003464:	4b1b      	ldr	r3, [pc, #108]	; (80034d4 <HAL_GPIO_Init+0x350>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	43db      	mvns	r3, r3
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4013      	ands	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003488:	4a12      	ldr	r2, [pc, #72]	; (80034d4 <HAL_GPIO_Init+0x350>)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	3301      	adds	r3, #1
 8003492:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	fa22 f303 	lsr.w	r3, r2, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f47f ae78 	bne.w	8003194 <HAL_GPIO_Init+0x10>
  }
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	371c      	adds	r7, #28
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40010000 	.word	0x40010000
 80034bc:	48000400 	.word	0x48000400
 80034c0:	48000800 	.word	0x48000800
 80034c4:	48000c00 	.word	0x48000c00
 80034c8:	48001000 	.word	0x48001000
 80034cc:	48001400 	.word	0x48001400
 80034d0:	48001800 	.word	0x48001800
 80034d4:	40010400 	.word	0x40010400

080034d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80034e6:	e0cd      	b.n	8003684 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80034e8:	2201      	movs	r2, #1
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	4013      	ands	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80c0 	beq.w	800367e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80034fe:	4a68      	ldr	r2, [pc, #416]	; (80036a0 <HAL_GPIO_DeInit+0x1c8>)
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	089b      	lsrs	r3, r3, #2
 8003504:	3302      	adds	r3, #2
 8003506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	220f      	movs	r2, #15
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4013      	ands	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003526:	d025      	beq.n	8003574 <HAL_GPIO_DeInit+0x9c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a5e      	ldr	r2, [pc, #376]	; (80036a4 <HAL_GPIO_DeInit+0x1cc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d01f      	beq.n	8003570 <HAL_GPIO_DeInit+0x98>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a5d      	ldr	r2, [pc, #372]	; (80036a8 <HAL_GPIO_DeInit+0x1d0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d019      	beq.n	800356c <HAL_GPIO_DeInit+0x94>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a5c      	ldr	r2, [pc, #368]	; (80036ac <HAL_GPIO_DeInit+0x1d4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d013      	beq.n	8003568 <HAL_GPIO_DeInit+0x90>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a5b      	ldr	r2, [pc, #364]	; (80036b0 <HAL_GPIO_DeInit+0x1d8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00d      	beq.n	8003564 <HAL_GPIO_DeInit+0x8c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a5a      	ldr	r2, [pc, #360]	; (80036b4 <HAL_GPIO_DeInit+0x1dc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d007      	beq.n	8003560 <HAL_GPIO_DeInit+0x88>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a59      	ldr	r2, [pc, #356]	; (80036b8 <HAL_GPIO_DeInit+0x1e0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d101      	bne.n	800355c <HAL_GPIO_DeInit+0x84>
 8003558:	2306      	movs	r3, #6
 800355a:	e00c      	b.n	8003576 <HAL_GPIO_DeInit+0x9e>
 800355c:	2307      	movs	r3, #7
 800355e:	e00a      	b.n	8003576 <HAL_GPIO_DeInit+0x9e>
 8003560:	2305      	movs	r3, #5
 8003562:	e008      	b.n	8003576 <HAL_GPIO_DeInit+0x9e>
 8003564:	2304      	movs	r3, #4
 8003566:	e006      	b.n	8003576 <HAL_GPIO_DeInit+0x9e>
 8003568:	2303      	movs	r3, #3
 800356a:	e004      	b.n	8003576 <HAL_GPIO_DeInit+0x9e>
 800356c:	2302      	movs	r3, #2
 800356e:	e002      	b.n	8003576 <HAL_GPIO_DeInit+0x9e>
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <HAL_GPIO_DeInit+0x9e>
 8003574:	2300      	movs	r3, #0
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	f002 0203 	and.w	r2, r2, #3
 800357c:	0092      	lsls	r2, r2, #2
 800357e:	4093      	lsls	r3, r2
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	429a      	cmp	r2, r3
 8003584:	d132      	bne.n	80035ec <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003586:	4b4d      	ldr	r3, [pc, #308]	; (80036bc <HAL_GPIO_DeInit+0x1e4>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	43db      	mvns	r3, r3
 800358e:	494b      	ldr	r1, [pc, #300]	; (80036bc <HAL_GPIO_DeInit+0x1e4>)
 8003590:	4013      	ands	r3, r2
 8003592:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003594:	4b49      	ldr	r3, [pc, #292]	; (80036bc <HAL_GPIO_DeInit+0x1e4>)
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	43db      	mvns	r3, r3
 800359c:	4947      	ldr	r1, [pc, #284]	; (80036bc <HAL_GPIO_DeInit+0x1e4>)
 800359e:	4013      	ands	r3, r2
 80035a0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80035a2:	4b46      	ldr	r3, [pc, #280]	; (80036bc <HAL_GPIO_DeInit+0x1e4>)
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	4944      	ldr	r1, [pc, #272]	; (80036bc <HAL_GPIO_DeInit+0x1e4>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80035b0:	4b42      	ldr	r3, [pc, #264]	; (80036bc <HAL_GPIO_DeInit+0x1e4>)
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	43db      	mvns	r3, r3
 80035b8:	4940      	ldr	r1, [pc, #256]	; (80036bc <HAL_GPIO_DeInit+0x1e4>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	220f      	movs	r2, #15
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80035ce:	4a34      	ldr	r2, [pc, #208]	; (80036a0 <HAL_GPIO_DeInit+0x1c8>)
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	089b      	lsrs	r3, r3, #2
 80035d4:	3302      	adds	r3, #2
 80035d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	43da      	mvns	r2, r3
 80035de:	4830      	ldr	r0, [pc, #192]	; (80036a0 <HAL_GPIO_DeInit+0x1c8>)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	089b      	lsrs	r3, r3, #2
 80035e4:	400a      	ands	r2, r1
 80035e6:	3302      	adds	r3, #2
 80035e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	2103      	movs	r1, #3
 80035f6:	fa01 f303 	lsl.w	r3, r1, r3
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	08da      	lsrs	r2, r3, #3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3208      	adds	r2, #8
 8003608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	220f      	movs	r2, #15
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	08d2      	lsrs	r2, r2, #3
 8003620:	4019      	ands	r1, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3208      	adds	r2, #8
 8003626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	2103      	movs	r1, #3
 8003634:	fa01 f303 	lsl.w	r3, r1, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	401a      	ands	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	2101      	movs	r1, #1
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	fa01 f303 	lsl.w	r3, r1, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	401a      	ands	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	2103      	movs	r1, #3
 800365e:	fa01 f303 	lsl.w	r3, r1, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	401a      	ands	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366e:	2101      	movs	r1, #1
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	fa01 f303 	lsl.w	r3, r1, r3
 8003676:	43db      	mvns	r3, r3
 8003678:	401a      	ands	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	3301      	adds	r3, #1
 8003682:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	f47f af2b 	bne.w	80034e8 <HAL_GPIO_DeInit+0x10>
  }
}
 8003692:	bf00      	nop
 8003694:	bf00      	nop
 8003696:	371c      	adds	r7, #28
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	40010000 	.word	0x40010000
 80036a4:	48000400 	.word	0x48000400
 80036a8:	48000800 	.word	0x48000800
 80036ac:	48000c00 	.word	0x48000c00
 80036b0:	48001000 	.word	0x48001000
 80036b4:	48001400 	.word	0x48001400
 80036b8:	48001800 	.word	0x48001800
 80036bc:	40010400 	.word	0x40010400

080036c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	887b      	ldrh	r3, [r7, #2]
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
 80036dc:	e001      	b.n	80036e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036de:	2300      	movs	r3, #0
 80036e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	807b      	strh	r3, [r7, #2]
 80036fc:	4613      	mov	r3, r2
 80036fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003700:	787b      	ldrb	r3, [r7, #1]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003706:	887a      	ldrh	r2, [r7, #2]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800370c:	e002      	b.n	8003714 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800372a:	4b08      	ldr	r3, [pc, #32]	; (800374c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800372c:	695a      	ldr	r2, [r3, #20]
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	4013      	ands	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d006      	beq.n	8003744 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003736:	4a05      	ldr	r2, [pc, #20]	; (800374c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800373c:	88fb      	ldrh	r3, [r7, #6]
 800373e:	4618      	mov	r0, r3
 8003740:	f7fe fa3b 	bl	8001bba <HAL_GPIO_EXTI_Callback>
  }
}
 8003744:	bf00      	nop
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40010400 	.word	0x40010400

08003750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e081      	b.n	8003866 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fd fc96 	bl	80010a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2224      	movs	r2, #36	; 0x24
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0201 	bic.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d107      	bne.n	80037ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	e006      	b.n	80037d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d104      	bne.n	80037ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800380c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69d9      	ldr	r1, [r3, #28]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1a      	ldr	r2, [r3, #32]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b20      	cmp	r3, #32
 8003882:	d138      	bne.n	80038f6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800388e:	2302      	movs	r3, #2
 8003890:	e032      	b.n	80038f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2224      	movs	r2, #36	; 0x24
 800389e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0201 	bic.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038c0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6819      	ldr	r1, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0201 	orr.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e000      	b.n	80038f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038f6:	2302      	movs	r3, #2
  }
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b20      	cmp	r3, #32
 8003918:	d139      	bne.n	800398e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003924:	2302      	movs	r3, #2
 8003926:	e033      	b.n	8003990 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2224      	movs	r2, #36	; 0x24
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003956:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0201 	orr.w	r2, r2, #1
 8003978:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	e000      	b.n	8003990 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800398e:	2302      	movs	r3, #2
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800399c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399e:	b08f      	sub	sp, #60	; 0x3c
 80039a0:	af0a      	add	r7, sp, #40	; 0x28
 80039a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e116      	b.n	8003bdc <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d106      	bne.n	80039ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7fd fd13 	bl	80013f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2203      	movs	r2, #3
 80039d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d102      	bne.n	80039e8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f003 fd3c 	bl	800746a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	687e      	ldr	r6, [r7, #4]
 80039fa:	466d      	mov	r5, sp
 80039fc:	f106 0410 	add.w	r4, r6, #16
 8003a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a10:	1d33      	adds	r3, r6, #4
 8003a12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a14:	6838      	ldr	r0, [r7, #0]
 8003a16:	f003 fcfc 	bl	8007412 <USB_CoreInit>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0d7      	b.n	8003bdc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2100      	movs	r1, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	f003 fd2a 	bl	800748c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a38:	2300      	movs	r3, #0
 8003a3a:	73fb      	strb	r3, [r7, #15]
 8003a3c:	e04a      	b.n	8003ad4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a3e:	7bfa      	ldrb	r2, [r7, #15]
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	4413      	add	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	333d      	adds	r3, #61	; 0x3d
 8003a4e:	2201      	movs	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a52:	7bfa      	ldrb	r2, [r7, #15]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	333c      	adds	r3, #60	; 0x3c
 8003a62:	7bfa      	ldrb	r2, [r7, #15]
 8003a64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a66:	7bfa      	ldrb	r2, [r7, #15]
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	b298      	uxth	r0, r3
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4413      	add	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	3344      	adds	r3, #68	; 0x44
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a7e:	7bfa      	ldrb	r2, [r7, #15]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	3340      	adds	r3, #64	; 0x40
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a92:	7bfa      	ldrb	r2, [r7, #15]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	3348      	adds	r3, #72	; 0x48
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003aa6:	7bfa      	ldrb	r2, [r7, #15]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	334c      	adds	r3, #76	; 0x4c
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	3354      	adds	r3, #84	; 0x54
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	73fb      	strb	r3, [r7, #15]
 8003ad4:	7bfa      	ldrb	r2, [r7, #15]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d3af      	bcc.n	8003a3e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ade:	2300      	movs	r3, #0
 8003ae0:	73fb      	strb	r3, [r7, #15]
 8003ae2:	e044      	b.n	8003b6e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ae4:	7bfa      	ldrb	r2, [r7, #15]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003af6:	2200      	movs	r2, #0
 8003af8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003afa:	7bfa      	ldrb	r2, [r7, #15]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b0c:	7bfa      	ldrb	r2, [r7, #15]
 8003b0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b10:	7bfa      	ldrb	r2, [r7, #15]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b22:	2200      	movs	r2, #0
 8003b24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b26:	7bfa      	ldrb	r2, [r7, #15]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b3c:	7bfa      	ldrb	r2, [r7, #15]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b52:	7bfa      	ldrb	r2, [r7, #15]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	73fb      	strb	r3, [r7, #15]
 8003b6e:	7bfa      	ldrb	r2, [r7, #15]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d3b5      	bcc.n	8003ae4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	603b      	str	r3, [r7, #0]
 8003b7e:	687e      	ldr	r6, [r7, #4]
 8003b80:	466d      	mov	r5, sp
 8003b82:	f106 0410 	add.w	r4, r6, #16
 8003b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b92:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b96:	1d33      	adds	r3, r6, #4
 8003b98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b9a:	6838      	ldr	r0, [r7, #0]
 8003b9c:	f003 fcc2 	bl	8007524 <USB_DevInit>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e014      	b.n	8003bdc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d102      	bne.n	8003bd0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f80a 	bl	8003be4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f003 fe6e 	bl	80078b6 <USB_DevDisconnect>

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003be4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c16:	f043 0303 	orr.w	r3, r3, #3
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c30:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a04      	ldr	r2, [pc, #16]	; (8003c48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c3a:	6013      	str	r3, [r2, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40007000 	.word	0x40007000

08003c4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c50:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40007000 	.word	0x40007000

08003c68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c76:	d130      	bne.n	8003cda <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c78:	4b23      	ldr	r3, [pc, #140]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c84:	d038      	beq.n	8003cf8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c86:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c8e:	4a1e      	ldr	r2, [pc, #120]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c96:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2232      	movs	r2, #50	; 0x32
 8003c9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ca0:	4a1b      	ldr	r2, [pc, #108]	; (8003d10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	0c9b      	lsrs	r3, r3, #18
 8003ca8:	3301      	adds	r3, #1
 8003caa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cac:	e002      	b.n	8003cb4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cb4:	4b14      	ldr	r3, [pc, #80]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc0:	d102      	bne.n	8003cc8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f2      	bne.n	8003cae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cc8:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd4:	d110      	bne.n	8003cf8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e00f      	b.n	8003cfa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cda:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce6:	d007      	beq.n	8003cf8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ce8:	4b07      	ldr	r3, [pc, #28]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cf0:	4a05      	ldr	r2, [pc, #20]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cf6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40007000 	.word	0x40007000
 8003d0c:	20000000 	.word	0x20000000
 8003d10:	431bde83 	.word	0x431bde83

08003d14 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003d18:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	4a04      	ldr	r2, [pc, #16]	; (8003d30 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d22:	6053      	str	r3, [r2, #4]
}
 8003d24:	bf00      	nop
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40007000 	.word	0x40007000

08003d34 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003d3c:	f7fd ffea 	bl	8001d14 <HAL_GetTick>
 8003d40:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e063      	b.n	8003e14 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10b      	bne.n	8003d70 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7fd fa43 	bl	80011ec <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003d66:	f241 3188 	movw	r1, #5000	; 0x1388
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f858 	bl	8003e20 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	021a      	lsls	r2, r3, #8
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	2120      	movs	r1, #32
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f850 	bl	8003e3c <QSPI_WaitFlagStateUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003da0:	7afb      	ldrb	r3, [r7, #11]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d131      	bne.n	8003e0a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003db0:	f023 0310 	bic.w	r3, r3, #16
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6852      	ldr	r2, [r2, #4]
 8003db8:	0611      	lsls	r1, r2, #24
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68d2      	ldr	r2, [r2, #12]
 8003dbe:	4311      	orrs	r1, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <HAL_QSPI_Init+0xe8>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6912      	ldr	r2, [r2, #16]
 8003dd6:	0411      	lsls	r1, r2, #16
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6952      	ldr	r2, [r2, #20]
 8003ddc:	4311      	orrs	r1, r2
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6992      	ldr	r2, [r2, #24]
 8003de2:	4311      	orrs	r1, r2
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	430b      	orrs	r3, r1
 8003dea:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003e12:	7afb      	ldrb	r3, [r7, #11]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	ffe0f8fe 	.word	0xffe0f8fe

08003e20 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003e4c:	e01a      	b.n	8003e84 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d016      	beq.n	8003e84 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e56:	f7fd ff5d 	bl	8001d14 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d302      	bcc.n	8003e6c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10b      	bne.n	8003e84 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2204      	movs	r2, #4
 8003e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e78:	f043 0201 	orr.w	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e00e      	b.n	8003ea2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bf14      	ite	ne
 8003e92:	2301      	movne	r3, #1
 8003e94:	2300      	moveq	r3, #0
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	461a      	mov	r2, r3
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d1d6      	bne.n	8003e4e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e3ca      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ebe:	4b97      	ldr	r3, [pc, #604]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
 8003ec6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ec8:	4b94      	ldr	r3, [pc, #592]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0303 	and.w	r3, r3, #3
 8003ed0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0310 	and.w	r3, r3, #16
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 80e4 	beq.w	80040a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x4a>
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	2b0c      	cmp	r3, #12
 8003eea:	f040 808b 	bne.w	8004004 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	f040 8087 	bne.w	8004004 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ef6:	4b89      	ldr	r3, [pc, #548]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d005      	beq.n	8003f0e <HAL_RCC_OscConfig+0x62>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e3a2      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1a      	ldr	r2, [r3, #32]
 8003f12:	4b82      	ldr	r3, [pc, #520]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d004      	beq.n	8003f28 <HAL_RCC_OscConfig+0x7c>
 8003f1e:	4b7f      	ldr	r3, [pc, #508]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f26:	e005      	b.n	8003f34 <HAL_RCC_OscConfig+0x88>
 8003f28:	4b7c      	ldr	r3, [pc, #496]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f2e:	091b      	lsrs	r3, r3, #4
 8003f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d223      	bcs.n	8003f80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fd55 	bl	80049ec <RCC_SetFlashLatencyFromMSIRange>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e383      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f4c:	4b73      	ldr	r3, [pc, #460]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a72      	ldr	r2, [pc, #456]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f52:	f043 0308 	orr.w	r3, r3, #8
 8003f56:	6013      	str	r3, [r2, #0]
 8003f58:	4b70      	ldr	r3, [pc, #448]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	496d      	ldr	r1, [pc, #436]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f6a:	4b6c      	ldr	r3, [pc, #432]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	4968      	ldr	r1, [pc, #416]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	604b      	str	r3, [r1, #4]
 8003f7e:	e025      	b.n	8003fcc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f80:	4b66      	ldr	r3, [pc, #408]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a65      	ldr	r2, [pc, #404]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f86:	f043 0308 	orr.w	r3, r3, #8
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	4b63      	ldr	r3, [pc, #396]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	4960      	ldr	r1, [pc, #384]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f9e:	4b5f      	ldr	r3, [pc, #380]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	495b      	ldr	r1, [pc, #364]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d109      	bne.n	8003fcc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fd15 	bl	80049ec <RCC_SetFlashLatencyFromMSIRange>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e343      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fcc:	f000 fc4a 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	4b52      	ldr	r3, [pc, #328]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	091b      	lsrs	r3, r3, #4
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	4950      	ldr	r1, [pc, #320]	; (8004120 <HAL_RCC_OscConfig+0x274>)
 8003fde:	5ccb      	ldrb	r3, [r1, r3]
 8003fe0:	f003 031f 	and.w	r3, r3, #31
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe8:	4a4e      	ldr	r2, [pc, #312]	; (8004124 <HAL_RCC_OscConfig+0x278>)
 8003fea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003fec:	4b4e      	ldr	r3, [pc, #312]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fd fe3f 	bl	8001c74 <HAL_InitTick>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d052      	beq.n	80040a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	e327      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d032      	beq.n	8004072 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800400c:	4b43      	ldr	r3, [pc, #268]	; (800411c <HAL_RCC_OscConfig+0x270>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a42      	ldr	r2, [pc, #264]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004018:	f7fd fe7c 	bl	8001d14 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004020:	f7fd fe78 	bl	8001d14 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e310      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004032:	4b3a      	ldr	r3, [pc, #232]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800403e:	4b37      	ldr	r3, [pc, #220]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a36      	ldr	r2, [pc, #216]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004044:	f043 0308 	orr.w	r3, r3, #8
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	4b34      	ldr	r3, [pc, #208]	; (800411c <HAL_RCC_OscConfig+0x270>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	4931      	ldr	r1, [pc, #196]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004058:	4313      	orrs	r3, r2
 800405a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800405c:	4b2f      	ldr	r3, [pc, #188]	; (800411c <HAL_RCC_OscConfig+0x270>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	021b      	lsls	r3, r3, #8
 800406a:	492c      	ldr	r1, [pc, #176]	; (800411c <HAL_RCC_OscConfig+0x270>)
 800406c:	4313      	orrs	r3, r2
 800406e:	604b      	str	r3, [r1, #4]
 8004070:	e01a      	b.n	80040a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004072:	4b2a      	ldr	r3, [pc, #168]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a29      	ldr	r2, [pc, #164]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004078:	f023 0301 	bic.w	r3, r3, #1
 800407c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800407e:	f7fd fe49 	bl	8001d14 <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004086:	f7fd fe45 	bl	8001d14 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e2dd      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004098:	4b20      	ldr	r3, [pc, #128]	; (800411c <HAL_RCC_OscConfig+0x270>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1f0      	bne.n	8004086 <HAL_RCC_OscConfig+0x1da>
 80040a4:	e000      	b.n	80040a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d074      	beq.n	800419e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d005      	beq.n	80040c6 <HAL_RCC_OscConfig+0x21a>
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	2b0c      	cmp	r3, #12
 80040be:	d10e      	bne.n	80040de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d10b      	bne.n	80040de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c6:	4b15      	ldr	r3, [pc, #84]	; (800411c <HAL_RCC_OscConfig+0x270>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d064      	beq.n	800419c <HAL_RCC_OscConfig+0x2f0>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d160      	bne.n	800419c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e2ba      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e6:	d106      	bne.n	80040f6 <HAL_RCC_OscConfig+0x24a>
 80040e8:	4b0c      	ldr	r3, [pc, #48]	; (800411c <HAL_RCC_OscConfig+0x270>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a0b      	ldr	r2, [pc, #44]	; (800411c <HAL_RCC_OscConfig+0x270>)
 80040ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	e026      	b.n	8004144 <HAL_RCC_OscConfig+0x298>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040fe:	d115      	bne.n	800412c <HAL_RCC_OscConfig+0x280>
 8004100:	4b06      	ldr	r3, [pc, #24]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a05      	ldr	r2, [pc, #20]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	4b03      	ldr	r3, [pc, #12]	; (800411c <HAL_RCC_OscConfig+0x270>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a02      	ldr	r2, [pc, #8]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	e014      	b.n	8004144 <HAL_RCC_OscConfig+0x298>
 800411a:	bf00      	nop
 800411c:	40021000 	.word	0x40021000
 8004120:	0800e260 	.word	0x0800e260
 8004124:	20000000 	.word	0x20000000
 8004128:	20000004 	.word	0x20000004
 800412c:	4ba0      	ldr	r3, [pc, #640]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a9f      	ldr	r2, [pc, #636]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	4b9d      	ldr	r3, [pc, #628]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a9c      	ldr	r2, [pc, #624]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 800413e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d013      	beq.n	8004174 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fd fde2 	bl	8001d14 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004154:	f7fd fdde 	bl	8001d14 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b64      	cmp	r3, #100	; 0x64
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e276      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004166:	4b92      	ldr	r3, [pc, #584]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x2a8>
 8004172:	e014      	b.n	800419e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fd fdce 	bl	8001d14 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800417c:	f7fd fdca 	bl	8001d14 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b64      	cmp	r3, #100	; 0x64
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e262      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800418e:	4b88      	ldr	r3, [pc, #544]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x2d0>
 800419a:	e000      	b.n	800419e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800419c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d060      	beq.n	800426c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d005      	beq.n	80041bc <HAL_RCC_OscConfig+0x310>
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b0c      	cmp	r3, #12
 80041b4:	d119      	bne.n	80041ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d116      	bne.n	80041ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041bc:	4b7c      	ldr	r3, [pc, #496]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <HAL_RCC_OscConfig+0x328>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e23f      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d4:	4b76      	ldr	r3, [pc, #472]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	061b      	lsls	r3, r3, #24
 80041e2:	4973      	ldr	r1, [pc, #460]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041e8:	e040      	b.n	800426c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d023      	beq.n	800423a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f2:	4b6f      	ldr	r3, [pc, #444]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a6e      	ldr	r2, [pc, #440]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80041f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fe:	f7fd fd89 	bl	8001d14 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004206:	f7fd fd85 	bl	8001d14 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e21d      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004218:	4b65      	ldr	r3, [pc, #404]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004224:	4b62      	ldr	r3, [pc, #392]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	061b      	lsls	r3, r3, #24
 8004232:	495f      	ldr	r1, [pc, #380]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004234:	4313      	orrs	r3, r2
 8004236:	604b      	str	r3, [r1, #4]
 8004238:	e018      	b.n	800426c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800423a:	4b5d      	ldr	r3, [pc, #372]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a5c      	ldr	r2, [pc, #368]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004246:	f7fd fd65 	bl	8001d14 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800424e:	f7fd fd61 	bl	8001d14 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e1f9      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004260:	4b53      	ldr	r3, [pc, #332]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1f0      	bne.n	800424e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d03c      	beq.n	80042f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01c      	beq.n	80042ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004280:	4b4b      	ldr	r3, [pc, #300]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004286:	4a4a      	ldr	r2, [pc, #296]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004290:	f7fd fd40 	bl	8001d14 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004298:	f7fd fd3c 	bl	8001d14 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e1d4      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042aa:	4b41      	ldr	r3, [pc, #260]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80042ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0ef      	beq.n	8004298 <HAL_RCC_OscConfig+0x3ec>
 80042b8:	e01b      	b.n	80042f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ba:	4b3d      	ldr	r3, [pc, #244]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80042bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c0:	4a3b      	ldr	r2, [pc, #236]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80042c2:	f023 0301 	bic.w	r3, r3, #1
 80042c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ca:	f7fd fd23 	bl	8001d14 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d2:	f7fd fd1f 	bl	8001d14 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e1b7      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042e4:	4b32      	ldr	r3, [pc, #200]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80042e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1ef      	bne.n	80042d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80a6 	beq.w	800444c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004300:	2300      	movs	r3, #0
 8004302:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004304:	4b2a      	ldr	r3, [pc, #168]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10d      	bne.n	800432c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004310:	4b27      	ldr	r3, [pc, #156]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004314:	4a26      	ldr	r2, [pc, #152]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431a:	6593      	str	r3, [r2, #88]	; 0x58
 800431c:	4b24      	ldr	r3, [pc, #144]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 800431e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004328:	2301      	movs	r3, #1
 800432a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800432c:	4b21      	ldr	r3, [pc, #132]	; (80043b4 <HAL_RCC_OscConfig+0x508>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004334:	2b00      	cmp	r3, #0
 8004336:	d118      	bne.n	800436a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004338:	4b1e      	ldr	r3, [pc, #120]	; (80043b4 <HAL_RCC_OscConfig+0x508>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1d      	ldr	r2, [pc, #116]	; (80043b4 <HAL_RCC_OscConfig+0x508>)
 800433e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004342:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004344:	f7fd fce6 	bl	8001d14 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800434c:	f7fd fce2 	bl	8001d14 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e17a      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800435e:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <HAL_RCC_OscConfig+0x508>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d108      	bne.n	8004384 <HAL_RCC_OscConfig+0x4d8>
 8004372:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004378:	4a0d      	ldr	r2, [pc, #52]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 800437a:	f043 0301 	orr.w	r3, r3, #1
 800437e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004382:	e029      	b.n	80043d8 <HAL_RCC_OscConfig+0x52c>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b05      	cmp	r3, #5
 800438a:	d115      	bne.n	80043b8 <HAL_RCC_OscConfig+0x50c>
 800438c:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004392:	4a07      	ldr	r2, [pc, #28]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004394:	f043 0304 	orr.w	r3, r3, #4
 8004398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800439c:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a2:	4a03      	ldr	r2, [pc, #12]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043ac:	e014      	b.n	80043d8 <HAL_RCC_OscConfig+0x52c>
 80043ae:	bf00      	nop
 80043b0:	40021000 	.word	0x40021000
 80043b4:	40007000 	.word	0x40007000
 80043b8:	4b9c      	ldr	r3, [pc, #624]	; (800462c <HAL_RCC_OscConfig+0x780>)
 80043ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043be:	4a9b      	ldr	r2, [pc, #620]	; (800462c <HAL_RCC_OscConfig+0x780>)
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043c8:	4b98      	ldr	r3, [pc, #608]	; (800462c <HAL_RCC_OscConfig+0x780>)
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	4a97      	ldr	r2, [pc, #604]	; (800462c <HAL_RCC_OscConfig+0x780>)
 80043d0:	f023 0304 	bic.w	r3, r3, #4
 80043d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d016      	beq.n	800440e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e0:	f7fd fc98 	bl	8001d14 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e6:	e00a      	b.n	80043fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e8:	f7fd fc94 	bl	8001d14 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e12a      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043fe:	4b8b      	ldr	r3, [pc, #556]	; (800462c <HAL_RCC_OscConfig+0x780>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0ed      	beq.n	80043e8 <HAL_RCC_OscConfig+0x53c>
 800440c:	e015      	b.n	800443a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440e:	f7fd fc81 	bl	8001d14 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004414:	e00a      	b.n	800442c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004416:	f7fd fc7d 	bl	8001d14 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f241 3288 	movw	r2, #5000	; 0x1388
 8004424:	4293      	cmp	r3, r2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e113      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800442c:	4b7f      	ldr	r3, [pc, #508]	; (800462c <HAL_RCC_OscConfig+0x780>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1ed      	bne.n	8004416 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800443a:	7ffb      	ldrb	r3, [r7, #31]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d105      	bne.n	800444c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004440:	4b7a      	ldr	r3, [pc, #488]	; (800462c <HAL_RCC_OscConfig+0x780>)
 8004442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004444:	4a79      	ldr	r2, [pc, #484]	; (800462c <HAL_RCC_OscConfig+0x780>)
 8004446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800444a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80fe 	beq.w	8004652 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	2b02      	cmp	r3, #2
 800445c:	f040 80d0 	bne.w	8004600 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004460:	4b72      	ldr	r3, [pc, #456]	; (800462c <HAL_RCC_OscConfig+0x780>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f003 0203 	and.w	r2, r3, #3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	429a      	cmp	r2, r3
 8004472:	d130      	bne.n	80044d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	3b01      	subs	r3, #1
 8004480:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004482:	429a      	cmp	r2, r3
 8004484:	d127      	bne.n	80044d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004490:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004492:	429a      	cmp	r2, r3
 8004494:	d11f      	bne.n	80044d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044a0:	2a07      	cmp	r2, #7
 80044a2:	bf14      	ite	ne
 80044a4:	2201      	movne	r2, #1
 80044a6:	2200      	moveq	r2, #0
 80044a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d113      	bne.n	80044d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b8:	085b      	lsrs	r3, r3, #1
 80044ba:	3b01      	subs	r3, #1
 80044bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80044be:	429a      	cmp	r2, r3
 80044c0:	d109      	bne.n	80044d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	085b      	lsrs	r3, r3, #1
 80044ce:	3b01      	subs	r3, #1
 80044d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d06e      	beq.n	80045b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	2b0c      	cmp	r3, #12
 80044da:	d069      	beq.n	80045b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044dc:	4b53      	ldr	r3, [pc, #332]	; (800462c <HAL_RCC_OscConfig+0x780>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d105      	bne.n	80044f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80044e8:	4b50      	ldr	r3, [pc, #320]	; (800462c <HAL_RCC_OscConfig+0x780>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0ad      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044f8:	4b4c      	ldr	r3, [pc, #304]	; (800462c <HAL_RCC_OscConfig+0x780>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a4b      	ldr	r2, [pc, #300]	; (800462c <HAL_RCC_OscConfig+0x780>)
 80044fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004502:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004504:	f7fd fc06 	bl	8001d14 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450c:	f7fd fc02 	bl	8001d14 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e09a      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800451e:	4b43      	ldr	r3, [pc, #268]	; (800462c <HAL_RCC_OscConfig+0x780>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800452a:	4b40      	ldr	r3, [pc, #256]	; (800462c <HAL_RCC_OscConfig+0x780>)
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	4b40      	ldr	r3, [pc, #256]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 8004530:	4013      	ands	r3, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800453a:	3a01      	subs	r2, #1
 800453c:	0112      	lsls	r2, r2, #4
 800453e:	4311      	orrs	r1, r2
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004544:	0212      	lsls	r2, r2, #8
 8004546:	4311      	orrs	r1, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800454c:	0852      	lsrs	r2, r2, #1
 800454e:	3a01      	subs	r2, #1
 8004550:	0552      	lsls	r2, r2, #21
 8004552:	4311      	orrs	r1, r2
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004558:	0852      	lsrs	r2, r2, #1
 800455a:	3a01      	subs	r2, #1
 800455c:	0652      	lsls	r2, r2, #25
 800455e:	4311      	orrs	r1, r2
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004564:	0912      	lsrs	r2, r2, #4
 8004566:	0452      	lsls	r2, r2, #17
 8004568:	430a      	orrs	r2, r1
 800456a:	4930      	ldr	r1, [pc, #192]	; (800462c <HAL_RCC_OscConfig+0x780>)
 800456c:	4313      	orrs	r3, r2
 800456e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004570:	4b2e      	ldr	r3, [pc, #184]	; (800462c <HAL_RCC_OscConfig+0x780>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a2d      	ldr	r2, [pc, #180]	; (800462c <HAL_RCC_OscConfig+0x780>)
 8004576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800457a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800457c:	4b2b      	ldr	r3, [pc, #172]	; (800462c <HAL_RCC_OscConfig+0x780>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4a2a      	ldr	r2, [pc, #168]	; (800462c <HAL_RCC_OscConfig+0x780>)
 8004582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004586:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004588:	f7fd fbc4 	bl	8001d14 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004590:	f7fd fbc0 	bl	8001d14 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e058      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a2:	4b22      	ldr	r3, [pc, #136]	; (800462c <HAL_RCC_OscConfig+0x780>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045ae:	e050      	b.n	8004652 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e04f      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b4:	4b1d      	ldr	r3, [pc, #116]	; (800462c <HAL_RCC_OscConfig+0x780>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d148      	bne.n	8004652 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045c0:	4b1a      	ldr	r3, [pc, #104]	; (800462c <HAL_RCC_OscConfig+0x780>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a19      	ldr	r2, [pc, #100]	; (800462c <HAL_RCC_OscConfig+0x780>)
 80045c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045cc:	4b17      	ldr	r3, [pc, #92]	; (800462c <HAL_RCC_OscConfig+0x780>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	4a16      	ldr	r2, [pc, #88]	; (800462c <HAL_RCC_OscConfig+0x780>)
 80045d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045d8:	f7fd fb9c 	bl	8001d14 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e0:	f7fd fb98 	bl	8001d14 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e030      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f2:	4b0e      	ldr	r3, [pc, #56]	; (800462c <HAL_RCC_OscConfig+0x780>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x734>
 80045fe:	e028      	b.n	8004652 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b0c      	cmp	r3, #12
 8004604:	d023      	beq.n	800464e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004606:	4b09      	ldr	r3, [pc, #36]	; (800462c <HAL_RCC_OscConfig+0x780>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a08      	ldr	r2, [pc, #32]	; (800462c <HAL_RCC_OscConfig+0x780>)
 800460c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004612:	f7fd fb7f 	bl	8001d14 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004618:	e00c      	b.n	8004634 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461a:	f7fd fb7b 	bl	8001d14 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d905      	bls.n	8004634 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e013      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
 800462c:	40021000 	.word	0x40021000
 8004630:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004634:	4b09      	ldr	r3, [pc, #36]	; (800465c <HAL_RCC_OscConfig+0x7b0>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1ec      	bne.n	800461a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004640:	4b06      	ldr	r3, [pc, #24]	; (800465c <HAL_RCC_OscConfig+0x7b0>)
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	4905      	ldr	r1, [pc, #20]	; (800465c <HAL_RCC_OscConfig+0x7b0>)
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <HAL_RCC_OscConfig+0x7b4>)
 8004648:	4013      	ands	r3, r2
 800464a:	60cb      	str	r3, [r1, #12]
 800464c:	e001      	b.n	8004652 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3720      	adds	r7, #32
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40021000 	.word	0x40021000
 8004660:	feeefffc 	.word	0xfeeefffc

08004664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e0e7      	b.n	8004848 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004678:	4b75      	ldr	r3, [pc, #468]	; (8004850 <HAL_RCC_ClockConfig+0x1ec>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d910      	bls.n	80046a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004686:	4b72      	ldr	r3, [pc, #456]	; (8004850 <HAL_RCC_ClockConfig+0x1ec>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f023 0207 	bic.w	r2, r3, #7
 800468e:	4970      	ldr	r1, [pc, #448]	; (8004850 <HAL_RCC_ClockConfig+0x1ec>)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	4313      	orrs	r3, r2
 8004694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004696:	4b6e      	ldr	r3, [pc, #440]	; (8004850 <HAL_RCC_ClockConfig+0x1ec>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d001      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e0cf      	b.n	8004848 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d010      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	4b66      	ldr	r3, [pc, #408]	; (8004854 <HAL_RCC_ClockConfig+0x1f0>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d908      	bls.n	80046d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c4:	4b63      	ldr	r3, [pc, #396]	; (8004854 <HAL_RCC_ClockConfig+0x1f0>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	4960      	ldr	r1, [pc, #384]	; (8004854 <HAL_RCC_ClockConfig+0x1f0>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d04c      	beq.n	800477c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d107      	bne.n	80046fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ea:	4b5a      	ldr	r3, [pc, #360]	; (8004854 <HAL_RCC_ClockConfig+0x1f0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d121      	bne.n	800473a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e0a6      	b.n	8004848 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d107      	bne.n	8004712 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004702:	4b54      	ldr	r3, [pc, #336]	; (8004854 <HAL_RCC_ClockConfig+0x1f0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d115      	bne.n	800473a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e09a      	b.n	8004848 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d107      	bne.n	800472a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800471a:	4b4e      	ldr	r3, [pc, #312]	; (8004854 <HAL_RCC_ClockConfig+0x1f0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d109      	bne.n	800473a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e08e      	b.n	8004848 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800472a:	4b4a      	ldr	r3, [pc, #296]	; (8004854 <HAL_RCC_ClockConfig+0x1f0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e086      	b.n	8004848 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800473a:	4b46      	ldr	r3, [pc, #280]	; (8004854 <HAL_RCC_ClockConfig+0x1f0>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f023 0203 	bic.w	r2, r3, #3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	4943      	ldr	r1, [pc, #268]	; (8004854 <HAL_RCC_ClockConfig+0x1f0>)
 8004748:	4313      	orrs	r3, r2
 800474a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800474c:	f7fd fae2 	bl	8001d14 <HAL_GetTick>
 8004750:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004752:	e00a      	b.n	800476a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004754:	f7fd fade 	bl	8001d14 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e06e      	b.n	8004848 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476a:	4b3a      	ldr	r3, [pc, #232]	; (8004854 <HAL_RCC_ClockConfig+0x1f0>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 020c 	and.w	r2, r3, #12
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	429a      	cmp	r2, r3
 800477a:	d1eb      	bne.n	8004754 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d010      	beq.n	80047aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	4b31      	ldr	r3, [pc, #196]	; (8004854 <HAL_RCC_ClockConfig+0x1f0>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004794:	429a      	cmp	r2, r3
 8004796:	d208      	bcs.n	80047aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004798:	4b2e      	ldr	r3, [pc, #184]	; (8004854 <HAL_RCC_ClockConfig+0x1f0>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	492b      	ldr	r1, [pc, #172]	; (8004854 <HAL_RCC_ClockConfig+0x1f0>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047aa:	4b29      	ldr	r3, [pc, #164]	; (8004850 <HAL_RCC_ClockConfig+0x1ec>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d210      	bcs.n	80047da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b8:	4b25      	ldr	r3, [pc, #148]	; (8004850 <HAL_RCC_ClockConfig+0x1ec>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f023 0207 	bic.w	r2, r3, #7
 80047c0:	4923      	ldr	r1, [pc, #140]	; (8004850 <HAL_RCC_ClockConfig+0x1ec>)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c8:	4b21      	ldr	r3, [pc, #132]	; (8004850 <HAL_RCC_ClockConfig+0x1ec>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d001      	beq.n	80047da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e036      	b.n	8004848 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d008      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047e6:	4b1b      	ldr	r3, [pc, #108]	; (8004854 <HAL_RCC_ClockConfig+0x1f0>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	4918      	ldr	r1, [pc, #96]	; (8004854 <HAL_RCC_ClockConfig+0x1f0>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d009      	beq.n	8004818 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004804:	4b13      	ldr	r3, [pc, #76]	; (8004854 <HAL_RCC_ClockConfig+0x1f0>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	4910      	ldr	r1, [pc, #64]	; (8004854 <HAL_RCC_ClockConfig+0x1f0>)
 8004814:	4313      	orrs	r3, r2
 8004816:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004818:	f000 f824 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b0d      	ldr	r3, [pc, #52]	; (8004854 <HAL_RCC_ClockConfig+0x1f0>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	091b      	lsrs	r3, r3, #4
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	490b      	ldr	r1, [pc, #44]	; (8004858 <HAL_RCC_ClockConfig+0x1f4>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
 8004834:	4a09      	ldr	r2, [pc, #36]	; (800485c <HAL_RCC_ClockConfig+0x1f8>)
 8004836:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004838:	4b09      	ldr	r3, [pc, #36]	; (8004860 <HAL_RCC_ClockConfig+0x1fc>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f7fd fa19 	bl	8001c74 <HAL_InitTick>
 8004842:	4603      	mov	r3, r0
 8004844:	72fb      	strb	r3, [r7, #11]

  return status;
 8004846:	7afb      	ldrb	r3, [r7, #11]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40022000 	.word	0x40022000
 8004854:	40021000 	.word	0x40021000
 8004858:	0800e260 	.word	0x0800e260
 800485c:	20000000 	.word	0x20000000
 8004860:	20000004 	.word	0x20000004

08004864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004864:	b480      	push	{r7}
 8004866:	b089      	sub	sp, #36	; 0x24
 8004868:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
 800486e:	2300      	movs	r3, #0
 8004870:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004872:	4b3e      	ldr	r3, [pc, #248]	; (800496c <HAL_RCC_GetSysClockFreq+0x108>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 030c 	and.w	r3, r3, #12
 800487a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800487c:	4b3b      	ldr	r3, [pc, #236]	; (800496c <HAL_RCC_GetSysClockFreq+0x108>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f003 0303 	and.w	r3, r3, #3
 8004884:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_RCC_GetSysClockFreq+0x34>
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2b0c      	cmp	r3, #12
 8004890:	d121      	bne.n	80048d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d11e      	bne.n	80048d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004898:	4b34      	ldr	r3, [pc, #208]	; (800496c <HAL_RCC_GetSysClockFreq+0x108>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d107      	bne.n	80048b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048a4:	4b31      	ldr	r3, [pc, #196]	; (800496c <HAL_RCC_GetSysClockFreq+0x108>)
 80048a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048aa:	0a1b      	lsrs	r3, r3, #8
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	61fb      	str	r3, [r7, #28]
 80048b2:	e005      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048b4:	4b2d      	ldr	r3, [pc, #180]	; (800496c <HAL_RCC_GetSysClockFreq+0x108>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048c0:	4a2b      	ldr	r2, [pc, #172]	; (8004970 <HAL_RCC_GetSysClockFreq+0x10c>)
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10d      	bne.n	80048ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048d4:	e00a      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d102      	bne.n	80048e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048dc:	4b25      	ldr	r3, [pc, #148]	; (8004974 <HAL_RCC_GetSysClockFreq+0x110>)
 80048de:	61bb      	str	r3, [r7, #24]
 80048e0:	e004      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d101      	bne.n	80048ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048e8:	4b23      	ldr	r3, [pc, #140]	; (8004978 <HAL_RCC_GetSysClockFreq+0x114>)
 80048ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	2b0c      	cmp	r3, #12
 80048f0:	d134      	bne.n	800495c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048f2:	4b1e      	ldr	r3, [pc, #120]	; (800496c <HAL_RCC_GetSysClockFreq+0x108>)
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d003      	beq.n	800490a <HAL_RCC_GetSysClockFreq+0xa6>
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b03      	cmp	r3, #3
 8004906:	d003      	beq.n	8004910 <HAL_RCC_GetSysClockFreq+0xac>
 8004908:	e005      	b.n	8004916 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800490a:	4b1a      	ldr	r3, [pc, #104]	; (8004974 <HAL_RCC_GetSysClockFreq+0x110>)
 800490c:	617b      	str	r3, [r7, #20]
      break;
 800490e:	e005      	b.n	800491c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004910:	4b19      	ldr	r3, [pc, #100]	; (8004978 <HAL_RCC_GetSysClockFreq+0x114>)
 8004912:	617b      	str	r3, [r7, #20]
      break;
 8004914:	e002      	b.n	800491c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	617b      	str	r3, [r7, #20]
      break;
 800491a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800491c:	4b13      	ldr	r3, [pc, #76]	; (800496c <HAL_RCC_GetSysClockFreq+0x108>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	3301      	adds	r3, #1
 8004928:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800492a:	4b10      	ldr	r3, [pc, #64]	; (800496c <HAL_RCC_GetSysClockFreq+0x108>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	0a1b      	lsrs	r3, r3, #8
 8004930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	fb03 f202 	mul.w	r2, r3, r2
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004942:	4b0a      	ldr	r3, [pc, #40]	; (800496c <HAL_RCC_GetSysClockFreq+0x108>)
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	0e5b      	lsrs	r3, r3, #25
 8004948:	f003 0303 	and.w	r3, r3, #3
 800494c:	3301      	adds	r3, #1
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	fbb2 f3f3 	udiv	r3, r2, r3
 800495a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800495c:	69bb      	ldr	r3, [r7, #24]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3724      	adds	r7, #36	; 0x24
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40021000 	.word	0x40021000
 8004970:	0800e278 	.word	0x0800e278
 8004974:	00f42400 	.word	0x00f42400
 8004978:	007a1200 	.word	0x007a1200

0800497c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004980:	4b03      	ldr	r3, [pc, #12]	; (8004990 <HAL_RCC_GetHCLKFreq+0x14>)
 8004982:	681b      	ldr	r3, [r3, #0]
}
 8004984:	4618      	mov	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	20000000 	.word	0x20000000

08004994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004998:	f7ff fff0 	bl	800497c <HAL_RCC_GetHCLKFreq>
 800499c:	4602      	mov	r2, r0
 800499e:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	0a1b      	lsrs	r3, r3, #8
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	4904      	ldr	r1, [pc, #16]	; (80049bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80049aa:	5ccb      	ldrb	r3, [r1, r3]
 80049ac:	f003 031f 	and.w	r3, r3, #31
 80049b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40021000 	.word	0x40021000
 80049bc:	0800e270 	.word	0x0800e270

080049c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049c4:	f7ff ffda 	bl	800497c <HAL_RCC_GetHCLKFreq>
 80049c8:	4602      	mov	r2, r0
 80049ca:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	0adb      	lsrs	r3, r3, #11
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	4904      	ldr	r1, [pc, #16]	; (80049e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049d6:	5ccb      	ldrb	r3, [r1, r3]
 80049d8:	f003 031f 	and.w	r3, r3, #31
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40021000 	.word	0x40021000
 80049e8:	0800e270 	.word	0x0800e270

080049ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80049f4:	2300      	movs	r3, #0
 80049f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049f8:	4b2a      	ldr	r3, [pc, #168]	; (8004aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a04:	f7ff f922 	bl	8003c4c <HAL_PWREx_GetVoltageRange>
 8004a08:	6178      	str	r0, [r7, #20]
 8004a0a:	e014      	b.n	8004a36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a0c:	4b25      	ldr	r3, [pc, #148]	; (8004aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a10:	4a24      	ldr	r2, [pc, #144]	; (8004aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a16:	6593      	str	r3, [r2, #88]	; 0x58
 8004a18:	4b22      	ldr	r3, [pc, #136]	; (8004aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a24:	f7ff f912 	bl	8003c4c <HAL_PWREx_GetVoltageRange>
 8004a28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a2a:	4b1e      	ldr	r3, [pc, #120]	; (8004aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2e:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a3c:	d10b      	bne.n	8004a56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b80      	cmp	r3, #128	; 0x80
 8004a42:	d919      	bls.n	8004a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2ba0      	cmp	r3, #160	; 0xa0
 8004a48:	d902      	bls.n	8004a50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	613b      	str	r3, [r7, #16]
 8004a4e:	e013      	b.n	8004a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a50:	2301      	movs	r3, #1
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	e010      	b.n	8004a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b80      	cmp	r3, #128	; 0x80
 8004a5a:	d902      	bls.n	8004a62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	613b      	str	r3, [r7, #16]
 8004a60:	e00a      	b.n	8004a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b80      	cmp	r3, #128	; 0x80
 8004a66:	d102      	bne.n	8004a6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a68:	2302      	movs	r3, #2
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	e004      	b.n	8004a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b70      	cmp	r3, #112	; 0x70
 8004a72:	d101      	bne.n	8004a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a74:	2301      	movs	r3, #1
 8004a76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a78:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f023 0207 	bic.w	r2, r3, #7
 8004a80:	4909      	ldr	r1, [pc, #36]	; (8004aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a88:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d001      	beq.n	8004a9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	40022000 	.word	0x40022000

08004aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ab8:	2300      	movs	r3, #0
 8004aba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d041      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004acc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ad0:	d02a      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004ad2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ad6:	d824      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ad8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004adc:	d008      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ade:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ae2:	d81e      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aec:	d010      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004aee:	e018      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004af0:	4b86      	ldr	r3, [pc, #536]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	4a85      	ldr	r2, [pc, #532]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004afa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004afc:	e015      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3304      	adds	r3, #4
 8004b02:	2100      	movs	r1, #0
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 facb 	bl	80050a0 <RCCEx_PLLSAI1_Config>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b0e:	e00c      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3320      	adds	r3, #32
 8004b14:	2100      	movs	r1, #0
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fbb6 	bl	8005288 <RCCEx_PLLSAI2_Config>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b20:	e003      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	74fb      	strb	r3, [r7, #19]
      break;
 8004b26:	e000      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b2a:	7cfb      	ldrb	r3, [r7, #19]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10b      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b30:	4b76      	ldr	r3, [pc, #472]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b3e:	4973      	ldr	r1, [pc, #460]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b46:	e001      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b48:	7cfb      	ldrb	r3, [r7, #19]
 8004b4a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d041      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b60:	d02a      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004b62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b66:	d824      	bhi.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004b68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b6c:	d008      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b72:	d81e      	bhi.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b7c:	d010      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b7e:	e018      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b80:	4b62      	ldr	r3, [pc, #392]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	4a61      	ldr	r2, [pc, #388]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b8a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b8c:	e015      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3304      	adds	r3, #4
 8004b92:	2100      	movs	r1, #0
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 fa83 	bl	80050a0 <RCCEx_PLLSAI1_Config>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b9e:	e00c      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3320      	adds	r3, #32
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fb6e 	bl	8005288 <RCCEx_PLLSAI2_Config>
 8004bac:	4603      	mov	r3, r0
 8004bae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bb0:	e003      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	74fb      	strb	r3, [r7, #19]
      break;
 8004bb6:	e000      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004bb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bba:	7cfb      	ldrb	r3, [r7, #19]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10b      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004bc0:	4b52      	ldr	r3, [pc, #328]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bce:	494f      	ldr	r1, [pc, #316]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bd6:	e001      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd8:	7cfb      	ldrb	r3, [r7, #19]
 8004bda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80a0 	beq.w	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bea:	2300      	movs	r3, #0
 8004bec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bee:	4b47      	ldr	r3, [pc, #284]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00d      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c04:	4b41      	ldr	r3, [pc, #260]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c08:	4a40      	ldr	r2, [pc, #256]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c0e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c10:	4b3e      	ldr	r3, [pc, #248]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c18:	60bb      	str	r3, [r7, #8]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c20:	4b3b      	ldr	r3, [pc, #236]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a3a      	ldr	r2, [pc, #232]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c2c:	f7fd f872 	bl	8001d14 <HAL_GetTick>
 8004c30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c32:	e009      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c34:	f7fd f86e 	bl	8001d14 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d902      	bls.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	74fb      	strb	r3, [r7, #19]
        break;
 8004c46:	e005      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c48:	4b31      	ldr	r3, [pc, #196]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0ef      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004c54:	7cfb      	ldrb	r3, [r7, #19]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d15c      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c5a:	4b2c      	ldr	r3, [pc, #176]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01f      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d019      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c78:	4b24      	ldr	r3, [pc, #144]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c84:	4b21      	ldr	r3, [pc, #132]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8a:	4a20      	ldr	r2, [pc, #128]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c94:	4b1d      	ldr	r3, [pc, #116]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9a:	4a1c      	ldr	r2, [pc, #112]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ca4:	4a19      	ldr	r2, [pc, #100]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d016      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb6:	f7fd f82d 	bl	8001d14 <HAL_GetTick>
 8004cba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cbc:	e00b      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cbe:	f7fd f829 	bl	8001d14 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d902      	bls.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	74fb      	strb	r3, [r7, #19]
            break;
 8004cd4:	e006      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0ec      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004ce4:	7cfb      	ldrb	r3, [r7, #19]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10c      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cea:	4b08      	ldr	r3, [pc, #32]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfa:	4904      	ldr	r1, [pc, #16]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d02:	e009      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d04:	7cfb      	ldrb	r3, [r7, #19]
 8004d06:	74bb      	strb	r3, [r7, #18]
 8004d08:	e006      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004d0a:	bf00      	nop
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d14:	7cfb      	ldrb	r3, [r7, #19]
 8004d16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d18:	7c7b      	ldrb	r3, [r7, #17]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d105      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d1e:	4b9e      	ldr	r3, [pc, #632]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d22:	4a9d      	ldr	r2, [pc, #628]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d36:	4b98      	ldr	r3, [pc, #608]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3c:	f023 0203 	bic.w	r2, r3, #3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d44:	4994      	ldr	r1, [pc, #592]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d58:	4b8f      	ldr	r3, [pc, #572]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5e:	f023 020c 	bic.w	r2, r3, #12
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d66:	498c      	ldr	r1, [pc, #560]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d7a:	4b87      	ldr	r3, [pc, #540]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	4983      	ldr	r1, [pc, #524]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0308 	and.w	r3, r3, #8
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d9c:	4b7e      	ldr	r3, [pc, #504]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004daa:	497b      	ldr	r1, [pc, #492]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0310 	and.w	r3, r3, #16
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004dbe:	4b76      	ldr	r3, [pc, #472]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dcc:	4972      	ldr	r1, [pc, #456]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004de0:	4b6d      	ldr	r3, [pc, #436]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dee:	496a      	ldr	r1, [pc, #424]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e02:	4b65      	ldr	r3, [pc, #404]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e10:	4961      	ldr	r1, [pc, #388]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00a      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e24:	4b5c      	ldr	r3, [pc, #368]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e32:	4959      	ldr	r1, [pc, #356]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e46:	4b54      	ldr	r3, [pc, #336]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e54:	4950      	ldr	r1, [pc, #320]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e68:	4b4b      	ldr	r3, [pc, #300]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e76:	4948      	ldr	r1, [pc, #288]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e8a:	4b43      	ldr	r3, [pc, #268]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e98:	493f      	ldr	r1, [pc, #252]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d028      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eac:	4b3a      	ldr	r3, [pc, #232]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eba:	4937      	ldr	r1, [pc, #220]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ec6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eca:	d106      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ecc:	4b32      	ldr	r3, [pc, #200]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4a31      	ldr	r2, [pc, #196]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ed6:	60d3      	str	r3, [r2, #12]
 8004ed8:	e011      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ede:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ee2:	d10c      	bne.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	2101      	movs	r1, #1
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 f8d8 	bl	80050a0 <RCCEx_PLLSAI1_Config>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ef4:	7cfb      	ldrb	r3, [r7, #19]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004efa:	7cfb      	ldrb	r3, [r7, #19]
 8004efc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d028      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f0a:	4b23      	ldr	r3, [pc, #140]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f18:	491f      	ldr	r1, [pc, #124]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f28:	d106      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f2a:	4b1b      	ldr	r3, [pc, #108]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	4a1a      	ldr	r2, [pc, #104]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f34:	60d3      	str	r3, [r2, #12]
 8004f36:	e011      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f40:	d10c      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3304      	adds	r3, #4
 8004f46:	2101      	movs	r1, #1
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 f8a9 	bl	80050a0 <RCCEx_PLLSAI1_Config>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f52:	7cfb      	ldrb	r3, [r7, #19]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004f58:	7cfb      	ldrb	r3, [r7, #19]
 8004f5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d02b      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f68:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f76:	4908      	ldr	r1, [pc, #32]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f86:	d109      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f88:	4b03      	ldr	r3, [pc, #12]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	4a02      	ldr	r2, [pc, #8]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f92:	60d3      	str	r3, [r2, #12]
 8004f94:	e014      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004f96:	bf00      	nop
 8004f98:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fa4:	d10c      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	2101      	movs	r1, #1
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 f877 	bl	80050a0 <RCCEx_PLLSAI1_Config>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fb6:	7cfb      	ldrb	r3, [r7, #19]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004fbc:	7cfb      	ldrb	r3, [r7, #19]
 8004fbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d02f      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fcc:	4b2b      	ldr	r3, [pc, #172]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fda:	4928      	ldr	r1, [pc, #160]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fea:	d10d      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	2102      	movs	r1, #2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 f854 	bl	80050a0 <RCCEx_PLLSAI1_Config>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ffc:	7cfb      	ldrb	r3, [r7, #19]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d014      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005002:	7cfb      	ldrb	r3, [r7, #19]
 8005004:	74bb      	strb	r3, [r7, #18]
 8005006:	e011      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800500c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005010:	d10c      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3320      	adds	r3, #32
 8005016:	2102      	movs	r1, #2
 8005018:	4618      	mov	r0, r3
 800501a:	f000 f935 	bl	8005288 <RCCEx_PLLSAI2_Config>
 800501e:	4603      	mov	r3, r0
 8005020:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005022:	7cfb      	ldrb	r3, [r7, #19]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005028:	7cfb      	ldrb	r3, [r7, #19]
 800502a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005038:	4b10      	ldr	r3, [pc, #64]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005046:	490d      	ldr	r1, [pc, #52]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00b      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800505a:	4b08      	ldr	r3, [pc, #32]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005060:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800506a:	4904      	ldr	r1, [pc, #16]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005072:	7cbb      	ldrb	r3, [r7, #18]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40021000 	.word	0x40021000

08005080 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005084:	4b05      	ldr	r3, [pc, #20]	; (800509c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a04      	ldr	r2, [pc, #16]	; (800509c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800508a:	f043 0304 	orr.w	r3, r3, #4
 800508e:	6013      	str	r3, [r2, #0]
}
 8005090:	bf00      	nop
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40021000 	.word	0x40021000

080050a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050ae:	4b75      	ldr	r3, [pc, #468]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d018      	beq.n	80050ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80050ba:	4b72      	ldr	r3, [pc, #456]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f003 0203 	and.w	r2, r3, #3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d10d      	bne.n	80050e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
       ||
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d009      	beq.n	80050e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80050d2:	4b6c      	ldr	r3, [pc, #432]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	091b      	lsrs	r3, r3, #4
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
       ||
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d047      	beq.n	8005176 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	73fb      	strb	r3, [r7, #15]
 80050ea:	e044      	b.n	8005176 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d018      	beq.n	8005126 <RCCEx_PLLSAI1_Config+0x86>
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	d825      	bhi.n	8005144 <RCCEx_PLLSAI1_Config+0xa4>
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d002      	beq.n	8005102 <RCCEx_PLLSAI1_Config+0x62>
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d009      	beq.n	8005114 <RCCEx_PLLSAI1_Config+0x74>
 8005100:	e020      	b.n	8005144 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005102:	4b60      	ldr	r3, [pc, #384]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d11d      	bne.n	800514a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005112:	e01a      	b.n	800514a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005114:	4b5b      	ldr	r3, [pc, #364]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800511c:	2b00      	cmp	r3, #0
 800511e:	d116      	bne.n	800514e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005124:	e013      	b.n	800514e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005126:	4b57      	ldr	r3, [pc, #348]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10f      	bne.n	8005152 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005132:	4b54      	ldr	r3, [pc, #336]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005142:	e006      	b.n	8005152 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	73fb      	strb	r3, [r7, #15]
      break;
 8005148:	e004      	b.n	8005154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800514a:	bf00      	nop
 800514c:	e002      	b.n	8005154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800514e:	bf00      	nop
 8005150:	e000      	b.n	8005154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005152:	bf00      	nop
    }

    if(status == HAL_OK)
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10d      	bne.n	8005176 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800515a:	4b4a      	ldr	r3, [pc, #296]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6819      	ldr	r1, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	3b01      	subs	r3, #1
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	430b      	orrs	r3, r1
 8005170:	4944      	ldr	r1, [pc, #272]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005172:	4313      	orrs	r3, r2
 8005174:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005176:	7bfb      	ldrb	r3, [r7, #15]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d17d      	bne.n	8005278 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800517c:	4b41      	ldr	r3, [pc, #260]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a40      	ldr	r2, [pc, #256]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005182:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005186:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005188:	f7fc fdc4 	bl	8001d14 <HAL_GetTick>
 800518c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800518e:	e009      	b.n	80051a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005190:	f7fc fdc0 	bl	8001d14 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d902      	bls.n	80051a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	73fb      	strb	r3, [r7, #15]
        break;
 80051a2:	e005      	b.n	80051b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051a4:	4b37      	ldr	r3, [pc, #220]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1ef      	bne.n	8005190 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d160      	bne.n	8005278 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d111      	bne.n	80051e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051bc:	4b31      	ldr	r3, [pc, #196]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80051c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6892      	ldr	r2, [r2, #8]
 80051cc:	0211      	lsls	r1, r2, #8
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	68d2      	ldr	r2, [r2, #12]
 80051d2:	0912      	lsrs	r2, r2, #4
 80051d4:	0452      	lsls	r2, r2, #17
 80051d6:	430a      	orrs	r2, r1
 80051d8:	492a      	ldr	r1, [pc, #168]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	610b      	str	r3, [r1, #16]
 80051de:	e027      	b.n	8005230 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d112      	bne.n	800520c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051e6:	4b27      	ldr	r3, [pc, #156]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80051ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6892      	ldr	r2, [r2, #8]
 80051f6:	0211      	lsls	r1, r2, #8
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6912      	ldr	r2, [r2, #16]
 80051fc:	0852      	lsrs	r2, r2, #1
 80051fe:	3a01      	subs	r2, #1
 8005200:	0552      	lsls	r2, r2, #21
 8005202:	430a      	orrs	r2, r1
 8005204:	491f      	ldr	r1, [pc, #124]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005206:	4313      	orrs	r3, r2
 8005208:	610b      	str	r3, [r1, #16]
 800520a:	e011      	b.n	8005230 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800520c:	4b1d      	ldr	r3, [pc, #116]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005214:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6892      	ldr	r2, [r2, #8]
 800521c:	0211      	lsls	r1, r2, #8
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6952      	ldr	r2, [r2, #20]
 8005222:	0852      	lsrs	r2, r2, #1
 8005224:	3a01      	subs	r2, #1
 8005226:	0652      	lsls	r2, r2, #25
 8005228:	430a      	orrs	r2, r1
 800522a:	4916      	ldr	r1, [pc, #88]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800522c:	4313      	orrs	r3, r2
 800522e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005230:	4b14      	ldr	r3, [pc, #80]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a13      	ldr	r2, [pc, #76]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005236:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800523a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523c:	f7fc fd6a 	bl	8001d14 <HAL_GetTick>
 8005240:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005242:	e009      	b.n	8005258 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005244:	f7fc fd66 	bl	8001d14 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d902      	bls.n	8005258 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	73fb      	strb	r3, [r7, #15]
          break;
 8005256:	e005      	b.n	8005264 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005258:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0ef      	beq.n	8005244 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800526a:	4b06      	ldr	r3, [pc, #24]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	4904      	ldr	r1, [pc, #16]	; (8005284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005274:	4313      	orrs	r3, r2
 8005276:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005278:	7bfb      	ldrb	r3, [r7, #15]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	40021000 	.word	0x40021000

08005288 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005296:	4b6a      	ldr	r3, [pc, #424]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d018      	beq.n	80052d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80052a2:	4b67      	ldr	r3, [pc, #412]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f003 0203 	and.w	r2, r3, #3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d10d      	bne.n	80052ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
       ||
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d009      	beq.n	80052ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80052ba:	4b61      	ldr	r3, [pc, #388]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	091b      	lsrs	r3, r3, #4
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
       ||
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d047      	beq.n	800535e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	73fb      	strb	r3, [r7, #15]
 80052d2:	e044      	b.n	800535e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d018      	beq.n	800530e <RCCEx_PLLSAI2_Config+0x86>
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d825      	bhi.n	800532c <RCCEx_PLLSAI2_Config+0xa4>
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d002      	beq.n	80052ea <RCCEx_PLLSAI2_Config+0x62>
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d009      	beq.n	80052fc <RCCEx_PLLSAI2_Config+0x74>
 80052e8:	e020      	b.n	800532c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052ea:	4b55      	ldr	r3, [pc, #340]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d11d      	bne.n	8005332 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052fa:	e01a      	b.n	8005332 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052fc:	4b50      	ldr	r3, [pc, #320]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005304:	2b00      	cmp	r3, #0
 8005306:	d116      	bne.n	8005336 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800530c:	e013      	b.n	8005336 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800530e:	4b4c      	ldr	r3, [pc, #304]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10f      	bne.n	800533a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800531a:	4b49      	ldr	r3, [pc, #292]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d109      	bne.n	800533a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800532a:	e006      	b.n	800533a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	73fb      	strb	r3, [r7, #15]
      break;
 8005330:	e004      	b.n	800533c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005332:	bf00      	nop
 8005334:	e002      	b.n	800533c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005336:	bf00      	nop
 8005338:	e000      	b.n	800533c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800533a:	bf00      	nop
    }

    if(status == HAL_OK)
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10d      	bne.n	800535e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005342:	4b3f      	ldr	r3, [pc, #252]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6819      	ldr	r1, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	3b01      	subs	r3, #1
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	430b      	orrs	r3, r1
 8005358:	4939      	ldr	r1, [pc, #228]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 800535a:	4313      	orrs	r3, r2
 800535c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d167      	bne.n	8005434 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005364:	4b36      	ldr	r3, [pc, #216]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a35      	ldr	r2, [pc, #212]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 800536a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800536e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005370:	f7fc fcd0 	bl	8001d14 <HAL_GetTick>
 8005374:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005376:	e009      	b.n	800538c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005378:	f7fc fccc 	bl	8001d14 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d902      	bls.n	800538c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	73fb      	strb	r3, [r7, #15]
        break;
 800538a:	e005      	b.n	8005398 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800538c:	4b2c      	ldr	r3, [pc, #176]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1ef      	bne.n	8005378 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005398:	7bfb      	ldrb	r3, [r7, #15]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d14a      	bne.n	8005434 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d111      	bne.n	80053c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053a4:	4b26      	ldr	r3, [pc, #152]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80053ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6892      	ldr	r2, [r2, #8]
 80053b4:	0211      	lsls	r1, r2, #8
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	68d2      	ldr	r2, [r2, #12]
 80053ba:	0912      	lsrs	r2, r2, #4
 80053bc:	0452      	lsls	r2, r2, #17
 80053be:	430a      	orrs	r2, r1
 80053c0:	491f      	ldr	r1, [pc, #124]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	614b      	str	r3, [r1, #20]
 80053c6:	e011      	b.n	80053ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053c8:	4b1d      	ldr	r3, [pc, #116]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80053d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6892      	ldr	r2, [r2, #8]
 80053d8:	0211      	lsls	r1, r2, #8
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6912      	ldr	r2, [r2, #16]
 80053de:	0852      	lsrs	r2, r2, #1
 80053e0:	3a01      	subs	r2, #1
 80053e2:	0652      	lsls	r2, r2, #25
 80053e4:	430a      	orrs	r2, r1
 80053e6:	4916      	ldr	r1, [pc, #88]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80053ec:	4b14      	ldr	r3, [pc, #80]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a13      	ldr	r2, [pc, #76]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f8:	f7fc fc8c 	bl	8001d14 <HAL_GetTick>
 80053fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053fe:	e009      	b.n	8005414 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005400:	f7fc fc88 	bl	8001d14 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d902      	bls.n	8005414 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	73fb      	strb	r3, [r7, #15]
          break;
 8005412:	e005      	b.n	8005420 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005414:	4b0a      	ldr	r3, [pc, #40]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0ef      	beq.n	8005400 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005420:	7bfb      	ldrb	r3, [r7, #15]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005426:	4b06      	ldr	r3, [pc, #24]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005428:	695a      	ldr	r2, [r3, #20]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	4904      	ldr	r1, [pc, #16]	; (8005440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005430:	4313      	orrs	r3, r2
 8005432:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005434:	7bfb      	ldrb	r3, [r7, #15]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	40021000 	.word	0x40021000

08005444 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e095      	b.n	8005582 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	2b00      	cmp	r3, #0
 800545c:	d108      	bne.n	8005470 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005466:	d009      	beq.n	800547c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	61da      	str	r2, [r3, #28]
 800546e:	e005      	b.n	800547c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d106      	bne.n	800549c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7fb feec 	bl	8001274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054bc:	d902      	bls.n	80054c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054be:	2300      	movs	r3, #0
 80054c0:	60fb      	str	r3, [r7, #12]
 80054c2:	e002      	b.n	80054ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80054c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80054d2:	d007      	beq.n	80054e4 <HAL_SPI_Init+0xa0>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054dc:	d002      	beq.n	80054e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005526:	ea42 0103 	orr.w	r1, r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	0c1b      	lsrs	r3, r3, #16
 8005540:	f003 0204 	and.w	r2, r3, #4
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005560:	ea42 0103 	orr.w	r1, r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e01a      	b.n	80055d2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7fb fea1 	bl	80012fc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b088      	sub	sp, #32
 80055de:	af02      	add	r7, sp, #8
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	603b      	str	r3, [r7, #0]
 80055e6:	4613      	mov	r3, r2
 80055e8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055f6:	d112      	bne.n	800561e <HAL_SPI_Receive+0x44>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10e      	bne.n	800561e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2204      	movs	r2, #4
 8005604:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005608:	88fa      	ldrh	r2, [r7, #6]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	4613      	mov	r3, r2
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 f910 	bl	800583a <HAL_SPI_TransmitReceive>
 800561a:	4603      	mov	r3, r0
 800561c:	e109      	b.n	8005832 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005624:	2b01      	cmp	r3, #1
 8005626:	d101      	bne.n	800562c <HAL_SPI_Receive+0x52>
 8005628:	2302      	movs	r3, #2
 800562a:	e102      	b.n	8005832 <HAL_SPI_Receive+0x258>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005634:	f7fc fb6e 	bl	8001d14 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b01      	cmp	r3, #1
 8005644:	d002      	beq.n	800564c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005646:	2302      	movs	r3, #2
 8005648:	75fb      	strb	r3, [r7, #23]
    goto error;
 800564a:	e0e9      	b.n	8005820 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <HAL_SPI_Receive+0x7e>
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d102      	bne.n	800565e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800565c:	e0e0      	b.n	8005820 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2204      	movs	r2, #4
 8005662:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	88fa      	ldrh	r2, [r7, #6]
 8005676:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	88fa      	ldrh	r2, [r7, #6]
 800567e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056a8:	d908      	bls.n	80056bc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056b8:	605a      	str	r2, [r3, #4]
 80056ba:	e007      	b.n	80056cc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056ca:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d4:	d10f      	bne.n	80056f6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005700:	2b40      	cmp	r3, #64	; 0x40
 8005702:	d007      	beq.n	8005714 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005712:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800571c:	d867      	bhi.n	80057ee <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800571e:	e030      	b.n	8005782 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b01      	cmp	r3, #1
 800572c:	d117      	bne.n	800575e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f103 020c 	add.w	r2, r3, #12
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	7812      	ldrb	r2, [r2, #0]
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	1c5a      	adds	r2, r3, #1
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800575c:	e011      	b.n	8005782 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800575e:	f7fc fad9 	bl	8001d14 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d803      	bhi.n	8005776 <HAL_SPI_Receive+0x19c>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005774:	d102      	bne.n	800577c <HAL_SPI_Receive+0x1a2>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d102      	bne.n	8005782 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005780:	e04e      	b.n	8005820 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005788:	b29b      	uxth	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1c8      	bne.n	8005720 <HAL_SPI_Receive+0x146>
 800578e:	e034      	b.n	80057fa <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b01      	cmp	r3, #1
 800579c:	d115      	bne.n	80057ca <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a8:	b292      	uxth	r2, r2
 80057aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b0:	1c9a      	adds	r2, r3, #2
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80057c8:	e011      	b.n	80057ee <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ca:	f7fc faa3 	bl	8001d14 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d803      	bhi.n	80057e2 <HAL_SPI_Receive+0x208>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e0:	d102      	bne.n	80057e8 <HAL_SPI_Receive+0x20e>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d102      	bne.n	80057ee <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80057ec:	e018      	b.n	8005820 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1ca      	bne.n	8005790 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	6839      	ldr	r1, [r7, #0]
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f001 f802 	bl	8006808 <SPI_EndRxTransaction>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2220      	movs	r2, #32
 800580e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	75fb      	strb	r3, [r7, #23]
 800581c:	e000      	b.n	8005820 <HAL_SPI_Receive+0x246>
  }

error :
 800581e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005830:	7dfb      	ldrb	r3, [r7, #23]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b08a      	sub	sp, #40	; 0x28
 800583e:	af00      	add	r7, sp, #0
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	607a      	str	r2, [r7, #4]
 8005846:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005848:	2301      	movs	r3, #1
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800584c:	2300      	movs	r3, #0
 800584e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_SPI_TransmitReceive+0x26>
 800585c:	2302      	movs	r3, #2
 800585e:	e1fb      	b.n	8005c58 <HAL_SPI_TransmitReceive+0x41e>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005868:	f7fc fa54 	bl	8001d14 <HAL_GetTick>
 800586c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005874:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800587c:	887b      	ldrh	r3, [r7, #2]
 800587e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005880:	887b      	ldrh	r3, [r7, #2]
 8005882:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005884:	7efb      	ldrb	r3, [r7, #27]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d00e      	beq.n	80058a8 <HAL_SPI_TransmitReceive+0x6e>
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005890:	d106      	bne.n	80058a0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d102      	bne.n	80058a0 <HAL_SPI_TransmitReceive+0x66>
 800589a:	7efb      	ldrb	r3, [r7, #27]
 800589c:	2b04      	cmp	r3, #4
 800589e:	d003      	beq.n	80058a8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80058a0:	2302      	movs	r3, #2
 80058a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80058a6:	e1cd      	b.n	8005c44 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d005      	beq.n	80058ba <HAL_SPI_TransmitReceive+0x80>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <HAL_SPI_TransmitReceive+0x80>
 80058b4:	887b      	ldrh	r3, [r7, #2]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d103      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80058c0:	e1c0      	b.n	8005c44 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d003      	beq.n	80058d6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2205      	movs	r2, #5
 80058d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	887a      	ldrh	r2, [r7, #2]
 80058e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	887a      	ldrh	r2, [r7, #2]
 80058ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	887a      	ldrh	r2, [r7, #2]
 80058fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	887a      	ldrh	r2, [r7, #2]
 8005902:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005918:	d802      	bhi.n	8005920 <HAL_SPI_TransmitReceive+0xe6>
 800591a:	8a3b      	ldrh	r3, [r7, #16]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d908      	bls.n	8005932 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800592e:	605a      	str	r2, [r3, #4]
 8005930:	e007      	b.n	8005942 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005940:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594c:	2b40      	cmp	r3, #64	; 0x40
 800594e:	d007      	beq.n	8005960 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800595e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005968:	d97c      	bls.n	8005a64 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <HAL_SPI_TransmitReceive+0x13e>
 8005972:	8a7b      	ldrh	r3, [r7, #18]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d169      	bne.n	8005a4c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597c:	881a      	ldrh	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005988:	1c9a      	adds	r2, r3, #2
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005992:	b29b      	uxth	r3, r3
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800599c:	e056      	b.n	8005a4c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d11b      	bne.n	80059e4 <HAL_SPI_TransmitReceive+0x1aa>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d016      	beq.n	80059e4 <HAL_SPI_TransmitReceive+0x1aa>
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d113      	bne.n	80059e4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c0:	881a      	ldrh	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	1c9a      	adds	r2, r3, #2
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3b01      	subs	r3, #1
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d11c      	bne.n	8005a2c <HAL_SPI_TransmitReceive+0x1f2>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d016      	beq.n	8005a2c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a08:	b292      	uxth	r2, r2
 8005a0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a10:	1c9a      	adds	r2, r3, #2
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a2c:	f7fc f972 	bl	8001d14 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d807      	bhi.n	8005a4c <HAL_SPI_TransmitReceive+0x212>
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a42:	d003      	beq.n	8005a4c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005a4a:	e0fb      	b.n	8005c44 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1a3      	bne.n	800599e <HAL_SPI_TransmitReceive+0x164>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d19d      	bne.n	800599e <HAL_SPI_TransmitReceive+0x164>
 8005a62:	e0df      	b.n	8005c24 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <HAL_SPI_TransmitReceive+0x23a>
 8005a6c:	8a7b      	ldrh	r3, [r7, #18]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	f040 80cb 	bne.w	8005c0a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d912      	bls.n	8005aa4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a82:	881a      	ldrh	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	1c9a      	adds	r2, r3, #2
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	3b02      	subs	r3, #2
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005aa2:	e0b2      	b.n	8005c0a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	330c      	adds	r3, #12
 8005aae:	7812      	ldrb	r2, [r2, #0]
 8005ab0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aca:	e09e      	b.n	8005c0a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d134      	bne.n	8005b44 <HAL_SPI_TransmitReceive+0x30a>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d02f      	beq.n	8005b44 <HAL_SPI_TransmitReceive+0x30a>
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d12c      	bne.n	8005b44 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d912      	bls.n	8005b1a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	881a      	ldrh	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	1c9a      	adds	r2, r3, #2
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b02      	subs	r3, #2
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b18:	e012      	b.n	8005b40 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	330c      	adds	r3, #12
 8005b24:	7812      	ldrb	r2, [r2, #0]
 8005b26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d148      	bne.n	8005be4 <HAL_SPI_TransmitReceive+0x3aa>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d042      	beq.n	8005be4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d923      	bls.n	8005bb2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	b292      	uxth	r2, r2
 8005b76:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	1c9a      	adds	r2, r3, #2
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	3b02      	subs	r3, #2
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d81f      	bhi.n	8005be0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bae:	605a      	str	r2, [r3, #4]
 8005bb0:	e016      	b.n	8005be0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f103 020c 	add.w	r2, r3, #12
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	7812      	ldrb	r2, [r2, #0]
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005be0:	2301      	movs	r3, #1
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005be4:	f7fc f896 	bl	8001d14 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d803      	bhi.n	8005bfc <HAL_SPI_TransmitReceive+0x3c2>
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfa:	d102      	bne.n	8005c02 <HAL_SPI_TransmitReceive+0x3c8>
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d103      	bne.n	8005c0a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005c08:	e01c      	b.n	8005c44 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f47f af5b 	bne.w	8005acc <HAL_SPI_TransmitReceive+0x292>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f47f af54 	bne.w	8005acc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c24:	69fa      	ldr	r2, [r7, #28]
 8005c26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 fe45 	bl	80068b8 <SPI_EndRxTxTransaction>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d006      	beq.n	8005c42 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	661a      	str	r2, [r3, #96]	; 0x60
 8005c40:	e000      	b.n	8005c44 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005c42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3728      	adds	r7, #40	; 0x28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_SPI_Transmit_IT+0x20>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e072      	b.n	8005d66 <HAL_SPI_Transmit_IT+0x106>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <HAL_SPI_Transmit_IT+0x34>
 8005c8e:	88fb      	ldrh	r3, [r7, #6]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d102      	bne.n	8005c9a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c98:	e060      	b.n	8005d5c <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d002      	beq.n	8005cac <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005caa:	e057      	b.n	8005d5c <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2203      	movs	r2, #3
 8005cb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	88fa      	ldrh	r2, [r7, #6]
 8005cc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	88fa      	ldrh	r2, [r7, #6]
 8005cca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cf0:	d903      	bls.n	8005cfa <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4a1f      	ldr	r2, [pc, #124]	; (8005d74 <HAL_SPI_Transmit_IT+0x114>)
 8005cf6:	651a      	str	r2, [r3, #80]	; 0x50
 8005cf8:	e002      	b.n	8005d00 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4a1e      	ldr	r2, [pc, #120]	; (8005d78 <HAL_SPI_Transmit_IT+0x118>)
 8005cfe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d08:	d10f      	bne.n	8005d2a <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8005d38:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d44:	2b40      	cmp	r3, #64	; 0x40
 8005d46:	d008      	beq.n	8005d5a <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	e000      	b.n	8005d5c <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8005d5a:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	08006587 	.word	0x08006587
 8005d78:	08006541 	.word	0x08006541

08005d7c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	4613      	mov	r3, r2
 8005d88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d110      	bne.n	8005db8 <HAL_SPI_Receive_IT+0x3c>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d9e:	d10b      	bne.n	8005db8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2204      	movs	r2, #4
 8005da4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8005da8:	88fb      	ldrh	r3, [r7, #6]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	68b9      	ldr	r1, [r7, #8]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f894 	bl	8005edc <HAL_SPI_TransmitReceive_IT>
 8005db4:	4603      	mov	r3, r0
 8005db6:	e089      	b.n	8005ecc <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <HAL_SPI_Receive_IT+0x4a>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e082      	b.n	8005ecc <HAL_SPI_Receive_IT+0x150>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d002      	beq.n	8005de0 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8005dda:	2302      	movs	r3, #2
 8005ddc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005dde:	e070      	b.n	8005ec2 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <HAL_SPI_Receive_IT+0x70>
 8005de6:	88fb      	ldrh	r3, [r7, #6]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d102      	bne.n	8005df2 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005df0:	e067      	b.n	8005ec2 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2204      	movs	r2, #4
 8005df6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	88fa      	ldrh	r2, [r7, #6]
 8005e0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	88fa      	ldrh	r2, [r7, #6]
 8005e12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e36:	d90b      	bls.n	8005e50 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e46:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4a22      	ldr	r2, [pc, #136]	; (8005ed4 <HAL_SPI_Receive_IT+0x158>)
 8005e4c:	64da      	str	r2, [r3, #76]	; 0x4c
 8005e4e:	e00a      	b.n	8005e66 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e5e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4a1d      	ldr	r2, [pc, #116]	; (8005ed8 <HAL_SPI_Receive_IT+0x15c>)
 8005e64:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e6e:	d10f      	bne.n	8005e90 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e8e:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005e9e:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eaa:	2b40      	cmp	r3, #64	; 0x40
 8005eac:	d008      	beq.n	8005ec0 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	e000      	b.n	8005ec2 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8005ec0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3718      	adds	r7, #24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	080064f5 	.word	0x080064f5
 8005ed8:	080064a5 	.word	0x080064a5

08005edc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d101      	bne.n	8005efc <HAL_SPI_TransmitReceive_IT+0x20>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e091      	b.n	8006020 <HAL_SPI_TransmitReceive_IT+0x144>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f0a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f12:	7dbb      	ldrb	r3, [r7, #22]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d00d      	beq.n	8005f34 <HAL_SPI_TransmitReceive_IT+0x58>
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f1e:	d106      	bne.n	8005f2e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d102      	bne.n	8005f2e <HAL_SPI_TransmitReceive_IT+0x52>
 8005f28:	7dbb      	ldrb	r3, [r7, #22]
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d002      	beq.n	8005f34 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8005f2e:	2302      	movs	r3, #2
 8005f30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f32:	e070      	b.n	8006016 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d005      	beq.n	8005f46 <HAL_SPI_TransmitReceive_IT+0x6a>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <HAL_SPI_TransmitReceive_IT+0x6a>
 8005f40:	887b      	ldrh	r3, [r7, #2]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d102      	bne.n	8005f4c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f4a:	e064      	b.n	8006016 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d003      	beq.n	8005f60 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2205      	movs	r2, #5
 8005f5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	887a      	ldrh	r2, [r7, #2]
 8005f70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	887a      	ldrh	r2, [r7, #2]
 8005f76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	887a      	ldrh	r2, [r7, #2]
 8005f82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	887a      	ldrh	r2, [r7, #2]
 8005f8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f96:	d906      	bls.n	8005fa6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4a24      	ldr	r2, [pc, #144]	; (800602c <HAL_SPI_TransmitReceive_IT+0x150>)
 8005f9c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	4a23      	ldr	r2, [pc, #140]	; (8006030 <HAL_SPI_TransmitReceive_IT+0x154>)
 8005fa2:	651a      	str	r2, [r3, #80]	; 0x50
 8005fa4:	e005      	b.n	8005fb2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4a22      	ldr	r2, [pc, #136]	; (8006034 <HAL_SPI_TransmitReceive_IT+0x158>)
 8005faa:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4a22      	ldr	r2, [pc, #136]	; (8006038 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8005fb0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fba:	d802      	bhi.n	8005fc2 <HAL_SPI_TransmitReceive_IT+0xe6>
 8005fbc:	887b      	ldrh	r3, [r7, #2]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d908      	bls.n	8005fd4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fd0:	605a      	str	r2, [r3, #4]
 8005fd2:	e007      	b.n	8005fe4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fe2:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8005ff2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffe:	2b40      	cmp	r3, #64	; 0x40
 8006000:	d008      	beq.n	8006014 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	e000      	b.n	8006016 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8006014:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800601e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006020:	4618      	mov	r0, r3
 8006022:	371c      	adds	r7, #28
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	080063df 	.word	0x080063df
 8006030:	08006445 	.word	0x08006445
 8006034:	0800628f 	.word	0x0800628f
 8006038:	0800634d 	.word	0x0800634d

0800603c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	099b      	lsrs	r3, r3, #6
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10f      	bne.n	8006080 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	099b      	lsrs	r3, r3, #6
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d004      	beq.n	8006080 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	4798      	blx	r3
    return;
 800607e:	e0d7      	b.n	8006230 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	085b      	lsrs	r3, r3, #1
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00a      	beq.n	80060a2 <HAL_SPI_IRQHandler+0x66>
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	09db      	lsrs	r3, r3, #7
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	d004      	beq.n	80060a2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	4798      	blx	r3
    return;
 80060a0:	e0c6      	b.n	8006230 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	095b      	lsrs	r3, r3, #5
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10c      	bne.n	80060c8 <HAL_SPI_IRQHandler+0x8c>
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	099b      	lsrs	r3, r3, #6
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d106      	bne.n	80060c8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	0a1b      	lsrs	r3, r3, #8
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 80b4 	beq.w	8006230 <HAL_SPI_IRQHandler+0x1f4>
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	095b      	lsrs	r3, r3, #5
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 80ad 	beq.w	8006230 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	099b      	lsrs	r3, r3, #6
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d023      	beq.n	800612a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d011      	beq.n	8006112 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f2:	f043 0204 	orr.w	r2, r3, #4
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060fa:	2300      	movs	r3, #0
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	617b      	str	r3, [r7, #20]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	617b      	str	r3, [r7, #20]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	e00b      	b.n	800612a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006112:	2300      	movs	r3, #0
 8006114:	613b      	str	r3, [r7, #16]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	613b      	str	r3, [r7, #16]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	613b      	str	r3, [r7, #16]
 8006126:	693b      	ldr	r3, [r7, #16]
        return;
 8006128:	e082      	b.n	8006230 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	095b      	lsrs	r3, r3, #5
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d014      	beq.n	8006160 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800613a:	f043 0201 	orr.w	r2, r3, #1
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006142:	2300      	movs	r3, #0
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	0a1b      	lsrs	r3, r3, #8
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00c      	beq.n	8006186 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006170:	f043 0208 	orr.w	r2, r3, #8
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006178:	2300      	movs	r3, #0
 800617a:	60bb      	str	r3, [r7, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	60bb      	str	r3, [r7, #8]
 8006184:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800618a:	2b00      	cmp	r3, #0
 800618c:	d04f      	beq.n	800622e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800619c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d104      	bne.n	80061ba <HAL_SPI_IRQHandler+0x17e>
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d034      	beq.n	8006224 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0203 	bic.w	r2, r2, #3
 80061c8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d011      	beq.n	80061f6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d6:	4a18      	ldr	r2, [pc, #96]	; (8006238 <HAL_SPI_IRQHandler+0x1fc>)
 80061d8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fc ff8e 	bl	8003100 <HAL_DMA_Abort_IT>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d005      	beq.n	80061f6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d016      	beq.n	800622c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006202:	4a0d      	ldr	r2, [pc, #52]	; (8006238 <HAL_SPI_IRQHandler+0x1fc>)
 8006204:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620a:	4618      	mov	r0, r3
 800620c:	f7fc ff78 	bl	8003100 <HAL_DMA_Abort_IT>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800621a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006222:	e003      	b.n	800622c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f813 	bl	8006250 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800622a:	e000      	b.n	800622e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800622c:	bf00      	nop
    return;
 800622e:	bf00      	nop
  }
}
 8006230:	3720      	adds	r7, #32
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	08006265 	.word	0x08006265

0800623c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7ff ffe5 	bl	8006250 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006286:	bf00      	nop
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800629c:	b29b      	uxth	r3, r3
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d923      	bls.n	80062ea <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ac:	b292      	uxth	r2, r2
 80062ae:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b4:	1c9a      	adds	r2, r3, #2
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	3b02      	subs	r3, #2
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d11f      	bne.n	8006318 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062e6:	605a      	str	r2, [r3, #4]
 80062e8:	e016      	b.n	8006318 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f103 020c 	add.w	r2, r3, #12
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f6:	7812      	ldrb	r2, [r2, #0]
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800630c:	b29b      	uxth	r3, r3
 800630e:	3b01      	subs	r3, #1
 8006310:	b29a      	uxth	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800631e:	b29b      	uxth	r3, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10f      	bne.n	8006344 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006332:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006338:	b29b      	uxth	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d102      	bne.n	8006344 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fb00 	bl	8006944 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006344:	bf00      	nop
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006358:	b29b      	uxth	r3, r3
 800635a:	2b01      	cmp	r3, #1
 800635c:	d912      	bls.n	8006384 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006362:	881a      	ldrh	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636e:	1c9a      	adds	r2, r3, #2
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006378:	b29b      	uxth	r3, r3
 800637a:	3b02      	subs	r3, #2
 800637c:	b29a      	uxth	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006382:	e012      	b.n	80063aa <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	330c      	adds	r3, #12
 800638e:	7812      	ldrb	r2, [r2, #0]
 8006390:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d110      	bne.n	80063d6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063c2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d102      	bne.n	80063d6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fab7 	bl	8006944 <SPI_CloseRxTx_ISR>
    }
  }
}
 80063d6:	bf00      	nop
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b082      	sub	sp, #8
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68da      	ldr	r2, [r3, #12]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f0:	b292      	uxth	r2, r2
 80063f2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f8:	1c9a      	adds	r2, r3, #2
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006416:	b29b      	uxth	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10f      	bne.n	800643c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800642a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006430:	b29b      	uxth	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d102      	bne.n	800643c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fa84 	bl	8006944 <SPI_CloseRxTx_ISR>
    }
  }
}
 800643c:	bf00      	nop
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	881a      	ldrh	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645c:	1c9a      	adds	r2, r3, #2
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006466:	b29b      	uxth	r3, r3
 8006468:	3b01      	subs	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d110      	bne.n	800649c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006488:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006490:	b29b      	uxth	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d102      	bne.n	800649c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fa54 	bl	8006944 <SPI_CloseRxTx_ISR>
    }
  }
}
 800649c:	bf00      	nop
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f103 020c 	add.w	r2, r3, #12
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b8:	7812      	ldrb	r2, [r2, #0]
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d102      	bne.n	80064ec <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fa6e 	bl	80069c8 <SPI_CloseRx_ISR>
  }
}
 80064ec:	bf00      	nop
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	b292      	uxth	r2, r2
 8006508:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	1c9a      	adds	r2, r3, #2
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800651a:	b29b      	uxth	r3, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d102      	bne.n	8006538 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fa48 	bl	80069c8 <SPI_CloseRx_ISR>
  }
}
 8006538:	bf00      	nop
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	330c      	adds	r3, #12
 8006552:	7812      	ldrb	r2, [r2, #0]
 8006554:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655a:	1c5a      	adds	r2, r3, #1
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006564:	b29b      	uxth	r3, r3
 8006566:	3b01      	subs	r3, #1
 8006568:	b29a      	uxth	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006572:	b29b      	uxth	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	d102      	bne.n	800657e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fa55 	bl	8006a28 <SPI_CloseTx_ISR>
  }
}
 800657e:	bf00      	nop
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b082      	sub	sp, #8
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006592:	881a      	ldrh	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659e:	1c9a      	adds	r2, r3, #2
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	3b01      	subs	r3, #1
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d102      	bne.n	80065c2 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fa33 	bl	8006a28 <SPI_CloseTx_ISR>
  }
}
 80065c2:	bf00      	nop
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
	...

080065cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	603b      	str	r3, [r7, #0]
 80065d8:	4613      	mov	r3, r2
 80065da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065dc:	f7fb fb9a 	bl	8001d14 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	1a9b      	subs	r3, r3, r2
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	4413      	add	r3, r2
 80065ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065ec:	f7fb fb92 	bl	8001d14 <HAL_GetTick>
 80065f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065f2:	4b39      	ldr	r3, [pc, #228]	; (80066d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	015b      	lsls	r3, r3, #5
 80065f8:	0d1b      	lsrs	r3, r3, #20
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	fb02 f303 	mul.w	r3, r2, r3
 8006600:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006602:	e054      	b.n	80066ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660a:	d050      	beq.n	80066ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800660c:	f7fb fb82 	bl	8001d14 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	69fa      	ldr	r2, [r7, #28]
 8006618:	429a      	cmp	r2, r3
 800661a:	d902      	bls.n	8006622 <SPI_WaitFlagStateUntilTimeout+0x56>
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d13d      	bne.n	800669e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006630:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800663a:	d111      	bne.n	8006660 <SPI_WaitFlagStateUntilTimeout+0x94>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006644:	d004      	beq.n	8006650 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800664e:	d107      	bne.n	8006660 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800665e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006668:	d10f      	bne.n	800668a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006688:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e017      	b.n	80066ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	4013      	ands	r3, r2
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	bf0c      	ite	eq
 80066be:	2301      	moveq	r3, #1
 80066c0:	2300      	movne	r3, #0
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	461a      	mov	r2, r3
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d19b      	bne.n	8006604 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3720      	adds	r7, #32
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	20000000 	.word	0x20000000

080066dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08a      	sub	sp, #40	; 0x28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80066ea:	2300      	movs	r3, #0
 80066ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80066ee:	f7fb fb11 	bl	8001d14 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f6:	1a9b      	subs	r3, r3, r2
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	4413      	add	r3, r2
 80066fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80066fe:	f7fb fb09 	bl	8001d14 <HAL_GetTick>
 8006702:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	330c      	adds	r3, #12
 800670a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800670c:	4b3d      	ldr	r3, [pc, #244]	; (8006804 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	4613      	mov	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	00da      	lsls	r2, r3, #3
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	0d1b      	lsrs	r3, r3, #20
 800671c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800671e:	fb02 f303 	mul.w	r3, r2, r3
 8006722:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006724:	e060      	b.n	80067e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800672c:	d107      	bne.n	800673e <SPI_WaitFifoStateUntilTimeout+0x62>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d104      	bne.n	800673e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	b2db      	uxtb	r3, r3
 800673a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800673c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006744:	d050      	beq.n	80067e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006746:	f7fb fae5 	bl	8001d14 <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006752:	429a      	cmp	r2, r3
 8006754:	d902      	bls.n	800675c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	2b00      	cmp	r3, #0
 800675a:	d13d      	bne.n	80067d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800676a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006774:	d111      	bne.n	800679a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800677e:	d004      	beq.n	800678a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006788:	d107      	bne.n	800679a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006798:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a2:	d10f      	bne.n	80067c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e010      	b.n	80067fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689a      	ldr	r2, [r3, #8]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	4013      	ands	r3, r2
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d196      	bne.n	8006726 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3728      	adds	r7, #40	; 0x28
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	20000000 	.word	0x20000000

08006808 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af02      	add	r7, sp, #8
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800681c:	d111      	bne.n	8006842 <SPI_EndRxTransaction+0x3a>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006826:	d004      	beq.n	8006832 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006830:	d107      	bne.n	8006842 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006840:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2200      	movs	r2, #0
 800684a:	2180      	movs	r1, #128	; 0x80
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f7ff febd 	bl	80065cc <SPI_WaitFlagStateUntilTimeout>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d007      	beq.n	8006868 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800685c:	f043 0220 	orr.w	r2, r3, #32
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e023      	b.n	80068b0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006870:	d11d      	bne.n	80068ae <SPI_EndRxTransaction+0xa6>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800687a:	d004      	beq.n	8006886 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006884:	d113      	bne.n	80068ae <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2200      	movs	r2, #0
 800688e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f7ff ff22 	bl	80066dc <SPI_WaitFifoStateUntilTimeout>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d007      	beq.n	80068ae <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a2:	f043 0220 	orr.w	r2, r3, #32
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e000      	b.n	80068b0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af02      	add	r7, sp, #8
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f7ff ff03 	bl	80066dc <SPI_WaitFifoStateUntilTimeout>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d007      	beq.n	80068ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068e0:	f043 0220 	orr.w	r2, r3, #32
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e027      	b.n	800693c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2200      	movs	r2, #0
 80068f4:	2180      	movs	r1, #128	; 0x80
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f7ff fe68 	bl	80065cc <SPI_WaitFlagStateUntilTimeout>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d007      	beq.n	8006912 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006906:	f043 0220 	orr.w	r2, r3, #32
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e014      	b.n	800693c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2200      	movs	r2, #0
 800691a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f7ff fedc 	bl	80066dc <SPI_WaitFifoStateUntilTimeout>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d007      	beq.n	800693a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800692e:	f043 0220 	orr.w	r2, r3, #32
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e000      	b.n	800693c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800694c:	f7fb f9e2 	bl	8001d14 <HAL_GetTick>
 8006950:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 0220 	bic.w	r2, r2, #32
 8006960:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	2164      	movs	r1, #100	; 0x64
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7ff ffa6 	bl	80068b8 <SPI_EndRxTxTransaction>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d005      	beq.n	800697e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006976:	f043 0220 	orr.w	r2, r3, #32
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006982:	2b00      	cmp	r3, #0
 8006984:	d115      	bne.n	80069b2 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b04      	cmp	r3, #4
 8006990:	d107      	bne.n	80069a2 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f002 fc6a 	bl	8009274 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80069a0:	e00e      	b.n	80069c0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7ff fc46 	bl	800623c <HAL_SPI_TxRxCpltCallback>
}
 80069b0:	e006      	b.n	80069c0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7ff fc48 	bl	8006250 <HAL_SPI_ErrorCallback>
}
 80069c0:	bf00      	nop
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069de:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80069e0:	f7fb f998 	bl	8001d14 <HAL_GetTick>
 80069e4:	4603      	mov	r3, r0
 80069e6:	461a      	mov	r2, r3
 80069e8:	2164      	movs	r1, #100	; 0x64
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff ff0c 	bl	8006808 <SPI_EndRxTransaction>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d005      	beq.n	8006a02 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069fa:	f043 0220 	orr.w	r2, r3, #32
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d103      	bne.n	8006a1a <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f002 fc2e 	bl	8009274 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006a18:	e002      	b.n	8006a20 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7ff fc18 	bl	8006250 <HAL_SPI_ErrorCallback>
}
 8006a20:	bf00      	nop
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a30:	f7fb f970 	bl	8001d14 <HAL_GetTick>
 8006a34:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a44:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	2164      	movs	r1, #100	; 0x64
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff ff34 	bl	80068b8 <SPI_EndRxTxTransaction>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d005      	beq.n	8006a62 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a5a:	f043 0220 	orr.w	r2, r3, #32
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10a      	bne.n	8006a80 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60bb      	str	r3, [r7, #8]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	60bb      	str	r3, [r7, #8]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	60bb      	str	r3, [r7, #8]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7ff fbdd 	bl	8006250 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006a96:	e002      	b.n	8006a9e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f002 fbff 	bl	800929c <HAL_SPI_TxCpltCallback>
}
 8006a9e:	bf00      	nop
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b082      	sub	sp, #8
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e040      	b.n	8006b3a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d106      	bne.n	8006ace <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7fa fc35 	bl	8001338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2224      	movs	r2, #36	; 0x24
 8006ad2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f022 0201 	bic.w	r2, r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f82d 	bl	8006b44 <UART_SetConfig>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d101      	bne.n	8006af4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e022      	b.n	8006b3a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fad9 	bl	80070b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f042 0201 	orr.w	r2, r2, #1
 8006b30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fb60 	bl	80071f8 <UART_CheckIdleState>
 8006b38:	4603      	mov	r3, r0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
	...

08006b44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b48:	b08a      	sub	sp, #40	; 0x28
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	431a      	orrs	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4ba4      	ldr	r3, [pc, #656]	; (8006e04 <UART_SetConfig+0x2c0>)
 8006b74:	4013      	ands	r3, r2
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	6812      	ldr	r2, [r2, #0]
 8006b7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b7c:	430b      	orrs	r3, r1
 8006b7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a99      	ldr	r2, [pc, #612]	; (8006e08 <UART_SetConfig+0x2c4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d004      	beq.n	8006bb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bac:	4313      	orrs	r3, r2
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a90      	ldr	r2, [pc, #576]	; (8006e0c <UART_SetConfig+0x2c8>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d126      	bne.n	8006c1c <UART_SetConfig+0xd8>
 8006bce:	4b90      	ldr	r3, [pc, #576]	; (8006e10 <UART_SetConfig+0x2cc>)
 8006bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd4:	f003 0303 	and.w	r3, r3, #3
 8006bd8:	2b03      	cmp	r3, #3
 8006bda:	d81b      	bhi.n	8006c14 <UART_SetConfig+0xd0>
 8006bdc:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <UART_SetConfig+0xa0>)
 8006bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be2:	bf00      	nop
 8006be4:	08006bf5 	.word	0x08006bf5
 8006be8:	08006c05 	.word	0x08006c05
 8006bec:	08006bfd 	.word	0x08006bfd
 8006bf0:	08006c0d 	.word	0x08006c0d
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bfa:	e116      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c02:	e112      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006c04:	2304      	movs	r3, #4
 8006c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c0a:	e10e      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006c0c:	2308      	movs	r3, #8
 8006c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c12:	e10a      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006c14:	2310      	movs	r3, #16
 8006c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c1a:	e106      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a7c      	ldr	r2, [pc, #496]	; (8006e14 <UART_SetConfig+0x2d0>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d138      	bne.n	8006c98 <UART_SetConfig+0x154>
 8006c26:	4b7a      	ldr	r3, [pc, #488]	; (8006e10 <UART_SetConfig+0x2cc>)
 8006c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c2c:	f003 030c 	and.w	r3, r3, #12
 8006c30:	2b0c      	cmp	r3, #12
 8006c32:	d82d      	bhi.n	8006c90 <UART_SetConfig+0x14c>
 8006c34:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <UART_SetConfig+0xf8>)
 8006c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006c71 	.word	0x08006c71
 8006c40:	08006c91 	.word	0x08006c91
 8006c44:	08006c91 	.word	0x08006c91
 8006c48:	08006c91 	.word	0x08006c91
 8006c4c:	08006c81 	.word	0x08006c81
 8006c50:	08006c91 	.word	0x08006c91
 8006c54:	08006c91 	.word	0x08006c91
 8006c58:	08006c91 	.word	0x08006c91
 8006c5c:	08006c79 	.word	0x08006c79
 8006c60:	08006c91 	.word	0x08006c91
 8006c64:	08006c91 	.word	0x08006c91
 8006c68:	08006c91 	.word	0x08006c91
 8006c6c:	08006c89 	.word	0x08006c89
 8006c70:	2300      	movs	r3, #0
 8006c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c76:	e0d8      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7e:	e0d4      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006c80:	2304      	movs	r3, #4
 8006c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c86:	e0d0      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006c88:	2308      	movs	r3, #8
 8006c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c8e:	e0cc      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006c90:	2310      	movs	r3, #16
 8006c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c96:	e0c8      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a5e      	ldr	r2, [pc, #376]	; (8006e18 <UART_SetConfig+0x2d4>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d125      	bne.n	8006cee <UART_SetConfig+0x1aa>
 8006ca2:	4b5b      	ldr	r3, [pc, #364]	; (8006e10 <UART_SetConfig+0x2cc>)
 8006ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006cac:	2b30      	cmp	r3, #48	; 0x30
 8006cae:	d016      	beq.n	8006cde <UART_SetConfig+0x19a>
 8006cb0:	2b30      	cmp	r3, #48	; 0x30
 8006cb2:	d818      	bhi.n	8006ce6 <UART_SetConfig+0x1a2>
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	d00a      	beq.n	8006cce <UART_SetConfig+0x18a>
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	d814      	bhi.n	8006ce6 <UART_SetConfig+0x1a2>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <UART_SetConfig+0x182>
 8006cc0:	2b10      	cmp	r3, #16
 8006cc2:	d008      	beq.n	8006cd6 <UART_SetConfig+0x192>
 8006cc4:	e00f      	b.n	8006ce6 <UART_SetConfig+0x1a2>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ccc:	e0ad      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd4:	e0a9      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006cd6:	2304      	movs	r3, #4
 8006cd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cdc:	e0a5      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006cde:	2308      	movs	r3, #8
 8006ce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce4:	e0a1      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006ce6:	2310      	movs	r3, #16
 8006ce8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cec:	e09d      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a4a      	ldr	r2, [pc, #296]	; (8006e1c <UART_SetConfig+0x2d8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d125      	bne.n	8006d44 <UART_SetConfig+0x200>
 8006cf8:	4b45      	ldr	r3, [pc, #276]	; (8006e10 <UART_SetConfig+0x2cc>)
 8006cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d02:	2bc0      	cmp	r3, #192	; 0xc0
 8006d04:	d016      	beq.n	8006d34 <UART_SetConfig+0x1f0>
 8006d06:	2bc0      	cmp	r3, #192	; 0xc0
 8006d08:	d818      	bhi.n	8006d3c <UART_SetConfig+0x1f8>
 8006d0a:	2b80      	cmp	r3, #128	; 0x80
 8006d0c:	d00a      	beq.n	8006d24 <UART_SetConfig+0x1e0>
 8006d0e:	2b80      	cmp	r3, #128	; 0x80
 8006d10:	d814      	bhi.n	8006d3c <UART_SetConfig+0x1f8>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <UART_SetConfig+0x1d8>
 8006d16:	2b40      	cmp	r3, #64	; 0x40
 8006d18:	d008      	beq.n	8006d2c <UART_SetConfig+0x1e8>
 8006d1a:	e00f      	b.n	8006d3c <UART_SetConfig+0x1f8>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d22:	e082      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006d24:	2302      	movs	r3, #2
 8006d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d2a:	e07e      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d32:	e07a      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006d34:	2308      	movs	r3, #8
 8006d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d3a:	e076      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d42:	e072      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a35      	ldr	r2, [pc, #212]	; (8006e20 <UART_SetConfig+0x2dc>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d12a      	bne.n	8006da4 <UART_SetConfig+0x260>
 8006d4e:	4b30      	ldr	r3, [pc, #192]	; (8006e10 <UART_SetConfig+0x2cc>)
 8006d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d5c:	d01a      	beq.n	8006d94 <UART_SetConfig+0x250>
 8006d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d62:	d81b      	bhi.n	8006d9c <UART_SetConfig+0x258>
 8006d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d68:	d00c      	beq.n	8006d84 <UART_SetConfig+0x240>
 8006d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d6e:	d815      	bhi.n	8006d9c <UART_SetConfig+0x258>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <UART_SetConfig+0x238>
 8006d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d78:	d008      	beq.n	8006d8c <UART_SetConfig+0x248>
 8006d7a:	e00f      	b.n	8006d9c <UART_SetConfig+0x258>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d82:	e052      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006d84:	2302      	movs	r3, #2
 8006d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d8a:	e04e      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d92:	e04a      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006d94:	2308      	movs	r3, #8
 8006d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d9a:	e046      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006da2:	e042      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a17      	ldr	r2, [pc, #92]	; (8006e08 <UART_SetConfig+0x2c4>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d13a      	bne.n	8006e24 <UART_SetConfig+0x2e0>
 8006dae:	4b18      	ldr	r3, [pc, #96]	; (8006e10 <UART_SetConfig+0x2cc>)
 8006db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006db8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dbc:	d01a      	beq.n	8006df4 <UART_SetConfig+0x2b0>
 8006dbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dc2:	d81b      	bhi.n	8006dfc <UART_SetConfig+0x2b8>
 8006dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dc8:	d00c      	beq.n	8006de4 <UART_SetConfig+0x2a0>
 8006dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dce:	d815      	bhi.n	8006dfc <UART_SetConfig+0x2b8>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <UART_SetConfig+0x298>
 8006dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd8:	d008      	beq.n	8006dec <UART_SetConfig+0x2a8>
 8006dda:	e00f      	b.n	8006dfc <UART_SetConfig+0x2b8>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006de2:	e022      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006de4:	2302      	movs	r3, #2
 8006de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dea:	e01e      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006dec:	2304      	movs	r3, #4
 8006dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006df2:	e01a      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006df4:	2308      	movs	r3, #8
 8006df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dfa:	e016      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006dfc:	2310      	movs	r3, #16
 8006dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e02:	e012      	b.n	8006e2a <UART_SetConfig+0x2e6>
 8006e04:	efff69f3 	.word	0xefff69f3
 8006e08:	40008000 	.word	0x40008000
 8006e0c:	40013800 	.word	0x40013800
 8006e10:	40021000 	.word	0x40021000
 8006e14:	40004400 	.word	0x40004400
 8006e18:	40004800 	.word	0x40004800
 8006e1c:	40004c00 	.word	0x40004c00
 8006e20:	40005000 	.word	0x40005000
 8006e24:	2310      	movs	r3, #16
 8006e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a9f      	ldr	r2, [pc, #636]	; (80070ac <UART_SetConfig+0x568>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d17a      	bne.n	8006f2a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e38:	2b08      	cmp	r3, #8
 8006e3a:	d824      	bhi.n	8006e86 <UART_SetConfig+0x342>
 8006e3c:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <UART_SetConfig+0x300>)
 8006e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e42:	bf00      	nop
 8006e44:	08006e69 	.word	0x08006e69
 8006e48:	08006e87 	.word	0x08006e87
 8006e4c:	08006e71 	.word	0x08006e71
 8006e50:	08006e87 	.word	0x08006e87
 8006e54:	08006e77 	.word	0x08006e77
 8006e58:	08006e87 	.word	0x08006e87
 8006e5c:	08006e87 	.word	0x08006e87
 8006e60:	08006e87 	.word	0x08006e87
 8006e64:	08006e7f 	.word	0x08006e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e68:	f7fd fd94 	bl	8004994 <HAL_RCC_GetPCLK1Freq>
 8006e6c:	61f8      	str	r0, [r7, #28]
        break;
 8006e6e:	e010      	b.n	8006e92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e70:	4b8f      	ldr	r3, [pc, #572]	; (80070b0 <UART_SetConfig+0x56c>)
 8006e72:	61fb      	str	r3, [r7, #28]
        break;
 8006e74:	e00d      	b.n	8006e92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e76:	f7fd fcf5 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8006e7a:	61f8      	str	r0, [r7, #28]
        break;
 8006e7c:	e009      	b.n	8006e92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e82:	61fb      	str	r3, [r7, #28]
        break;
 8006e84:	e005      	b.n	8006e92 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 80fb 	beq.w	8007090 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	4413      	add	r3, r2
 8006ea4:	69fa      	ldr	r2, [r7, #28]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d305      	bcc.n	8006eb6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006eb0:	69fa      	ldr	r2, [r7, #28]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d903      	bls.n	8006ebe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ebc:	e0e8      	b.n	8007090 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	461c      	mov	r4, r3
 8006ec4:	4615      	mov	r5, r2
 8006ec6:	f04f 0200 	mov.w	r2, #0
 8006eca:	f04f 0300 	mov.w	r3, #0
 8006ece:	022b      	lsls	r3, r5, #8
 8006ed0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006ed4:	0222      	lsls	r2, r4, #8
 8006ed6:	68f9      	ldr	r1, [r7, #12]
 8006ed8:	6849      	ldr	r1, [r1, #4]
 8006eda:	0849      	lsrs	r1, r1, #1
 8006edc:	2000      	movs	r0, #0
 8006ede:	4688      	mov	r8, r1
 8006ee0:	4681      	mov	r9, r0
 8006ee2:	eb12 0a08 	adds.w	sl, r2, r8
 8006ee6:	eb43 0b09 	adc.w	fp, r3, r9
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	603b      	str	r3, [r7, #0]
 8006ef2:	607a      	str	r2, [r7, #4]
 8006ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ef8:	4650      	mov	r0, sl
 8006efa:	4659      	mov	r1, fp
 8006efc:	f7f9 f9c0 	bl	8000280 <__aeabi_uldivmod>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	4613      	mov	r3, r2
 8006f06:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f0e:	d308      	bcc.n	8006f22 <UART_SetConfig+0x3de>
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f16:	d204      	bcs.n	8006f22 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	69ba      	ldr	r2, [r7, #24]
 8006f1e:	60da      	str	r2, [r3, #12]
 8006f20:	e0b6      	b.n	8007090 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f28:	e0b2      	b.n	8007090 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f32:	d15e      	bne.n	8006ff2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006f34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f38:	2b08      	cmp	r3, #8
 8006f3a:	d828      	bhi.n	8006f8e <UART_SetConfig+0x44a>
 8006f3c:	a201      	add	r2, pc, #4	; (adr r2, 8006f44 <UART_SetConfig+0x400>)
 8006f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f42:	bf00      	nop
 8006f44:	08006f69 	.word	0x08006f69
 8006f48:	08006f71 	.word	0x08006f71
 8006f4c:	08006f79 	.word	0x08006f79
 8006f50:	08006f8f 	.word	0x08006f8f
 8006f54:	08006f7f 	.word	0x08006f7f
 8006f58:	08006f8f 	.word	0x08006f8f
 8006f5c:	08006f8f 	.word	0x08006f8f
 8006f60:	08006f8f 	.word	0x08006f8f
 8006f64:	08006f87 	.word	0x08006f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f68:	f7fd fd14 	bl	8004994 <HAL_RCC_GetPCLK1Freq>
 8006f6c:	61f8      	str	r0, [r7, #28]
        break;
 8006f6e:	e014      	b.n	8006f9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f70:	f7fd fd26 	bl	80049c0 <HAL_RCC_GetPCLK2Freq>
 8006f74:	61f8      	str	r0, [r7, #28]
        break;
 8006f76:	e010      	b.n	8006f9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f78:	4b4d      	ldr	r3, [pc, #308]	; (80070b0 <UART_SetConfig+0x56c>)
 8006f7a:	61fb      	str	r3, [r7, #28]
        break;
 8006f7c:	e00d      	b.n	8006f9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f7e:	f7fd fc71 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8006f82:	61f8      	str	r0, [r7, #28]
        break;
 8006f84:	e009      	b.n	8006f9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f8a:	61fb      	str	r3, [r7, #28]
        break;
 8006f8c:	e005      	b.n	8006f9a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d077      	beq.n	8007090 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	005a      	lsls	r2, r3, #1
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	085b      	lsrs	r3, r3, #1
 8006faa:	441a      	add	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	2b0f      	cmp	r3, #15
 8006fba:	d916      	bls.n	8006fea <UART_SetConfig+0x4a6>
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc2:	d212      	bcs.n	8006fea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	f023 030f 	bic.w	r3, r3, #15
 8006fcc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	085b      	lsrs	r3, r3, #1
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	f003 0307 	and.w	r3, r3, #7
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	8afb      	ldrh	r3, [r7, #22]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	8afa      	ldrh	r2, [r7, #22]
 8006fe6:	60da      	str	r2, [r3, #12]
 8006fe8:	e052      	b.n	8007090 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ff0:	e04e      	b.n	8007090 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ff2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ff6:	2b08      	cmp	r3, #8
 8006ff8:	d827      	bhi.n	800704a <UART_SetConfig+0x506>
 8006ffa:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <UART_SetConfig+0x4bc>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	08007025 	.word	0x08007025
 8007004:	0800702d 	.word	0x0800702d
 8007008:	08007035 	.word	0x08007035
 800700c:	0800704b 	.word	0x0800704b
 8007010:	0800703b 	.word	0x0800703b
 8007014:	0800704b 	.word	0x0800704b
 8007018:	0800704b 	.word	0x0800704b
 800701c:	0800704b 	.word	0x0800704b
 8007020:	08007043 	.word	0x08007043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007024:	f7fd fcb6 	bl	8004994 <HAL_RCC_GetPCLK1Freq>
 8007028:	61f8      	str	r0, [r7, #28]
        break;
 800702a:	e014      	b.n	8007056 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800702c:	f7fd fcc8 	bl	80049c0 <HAL_RCC_GetPCLK2Freq>
 8007030:	61f8      	str	r0, [r7, #28]
        break;
 8007032:	e010      	b.n	8007056 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007034:	4b1e      	ldr	r3, [pc, #120]	; (80070b0 <UART_SetConfig+0x56c>)
 8007036:	61fb      	str	r3, [r7, #28]
        break;
 8007038:	e00d      	b.n	8007056 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800703a:	f7fd fc13 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 800703e:	61f8      	str	r0, [r7, #28]
        break;
 8007040:	e009      	b.n	8007056 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007046:	61fb      	str	r3, [r7, #28]
        break;
 8007048:	e005      	b.n	8007056 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007054:	bf00      	nop
    }

    if (pclk != 0U)
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d019      	beq.n	8007090 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	085a      	lsrs	r2, r3, #1
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	441a      	add	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	fbb2 f3f3 	udiv	r3, r2, r3
 800706e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	2b0f      	cmp	r3, #15
 8007074:	d909      	bls.n	800708a <UART_SetConfig+0x546>
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800707c:	d205      	bcs.n	800708a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	b29a      	uxth	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	60da      	str	r2, [r3, #12]
 8007088:	e002      	b.n	8007090 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800709c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3728      	adds	r7, #40	; 0x28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070aa:	bf00      	nop
 80070ac:	40008000 	.word	0x40008000
 80070b0:	00f42400 	.word	0x00f42400

080070b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00a      	beq.n	80070de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00a      	beq.n	8007100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00a      	beq.n	8007122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007126:	f003 0308 	and.w	r3, r3, #8
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	f003 0310 	and.w	r3, r3, #16
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00a      	beq.n	8007166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00a      	beq.n	8007188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007190:	2b00      	cmp	r3, #0
 8007192:	d01a      	beq.n	80071ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071b2:	d10a      	bne.n	80071ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	605a      	str	r2, [r3, #4]
  }
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007208:	f7fa fd84 	bl	8001d14 <HAL_GetTick>
 800720c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0308 	and.w	r3, r3, #8
 8007218:	2b08      	cmp	r3, #8
 800721a:	d10e      	bne.n	800723a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800721c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f82d 	bl	800728a <UART_WaitOnFlagUntilTimeout>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e023      	b.n	8007282 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b04      	cmp	r3, #4
 8007246:	d10e      	bne.n	8007266 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007248:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f817 	bl	800728a <UART_WaitOnFlagUntilTimeout>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e00d      	b.n	8007282 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2220      	movs	r2, #32
 800726a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2220      	movs	r2, #32
 8007270:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b09c      	sub	sp, #112	; 0x70
 800728e:	af00      	add	r7, sp, #0
 8007290:	60f8      	str	r0, [r7, #12]
 8007292:	60b9      	str	r1, [r7, #8]
 8007294:	603b      	str	r3, [r7, #0]
 8007296:	4613      	mov	r3, r2
 8007298:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800729a:	e0a5      	b.n	80073e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800729c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800729e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a2:	f000 80a1 	beq.w	80073e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072a6:	f7fa fd35 	bl	8001d14 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d302      	bcc.n	80072bc <UART_WaitOnFlagUntilTimeout+0x32>
 80072b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d13e      	bne.n	800733a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072c4:	e853 3f00 	ldrex	r3, [r3]
 80072c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072d0:	667b      	str	r3, [r7, #100]	; 0x64
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072e2:	e841 2300 	strex	r3, r2, [r1]
 80072e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1e6      	bne.n	80072bc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3308      	adds	r3, #8
 80072f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f8:	e853 3f00 	ldrex	r3, [r3]
 80072fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007300:	f023 0301 	bic.w	r3, r3, #1
 8007304:	663b      	str	r3, [r7, #96]	; 0x60
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3308      	adds	r3, #8
 800730c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800730e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007310:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007312:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007316:	e841 2300 	strex	r3, r2, [r1]
 800731a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800731c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1e5      	bne.n	80072ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2220      	movs	r2, #32
 8007326:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2220      	movs	r2, #32
 800732c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e067      	b.n	800740a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	d04f      	beq.n	80073e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007356:	d147      	bne.n	80073e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007360:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	e853 3f00 	ldrex	r3, [r3]
 800736e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007376:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	461a      	mov	r2, r3
 800737e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007380:	637b      	str	r3, [r7, #52]	; 0x34
 8007382:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007384:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007388:	e841 2300 	strex	r3, r2, [r1]
 800738c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800738e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1e6      	bne.n	8007362 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3308      	adds	r3, #8
 800739a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	e853 3f00 	ldrex	r3, [r3]
 80073a2:	613b      	str	r3, [r7, #16]
   return(result);
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f023 0301 	bic.w	r3, r3, #1
 80073aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3308      	adds	r3, #8
 80073b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073b4:	623a      	str	r2, [r7, #32]
 80073b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b8:	69f9      	ldr	r1, [r7, #28]
 80073ba:	6a3a      	ldr	r2, [r7, #32]
 80073bc:	e841 2300 	strex	r3, r2, [r1]
 80073c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1e5      	bne.n	8007394 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2220      	movs	r2, #32
 80073cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2220      	movs	r2, #32
 80073d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2220      	movs	r2, #32
 80073d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e010      	b.n	800740a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	69da      	ldr	r2, [r3, #28]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	4013      	ands	r3, r2
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	bf0c      	ite	eq
 80073f8:	2301      	moveq	r3, #1
 80073fa:	2300      	movne	r3, #0
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	461a      	mov	r2, r3
 8007400:	79fb      	ldrb	r3, [r7, #7]
 8007402:	429a      	cmp	r2, r3
 8007404:	f43f af4a 	beq.w	800729c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3770      	adds	r7, #112	; 0x70
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007412:	b084      	sub	sp, #16
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	f107 001c 	add.w	r0, r7, #28
 8007420:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fa6f 	bl	8007914 <USB_CoreReset>
 8007436:	4603      	mov	r3, r0
 8007438:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800743a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800743c:	2b00      	cmp	r3, #0
 800743e:	d106      	bne.n	800744e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007444:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	639a      	str	r2, [r3, #56]	; 0x38
 800744c:	e005      	b.n	800745a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007452:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800745a:	7bfb      	ldrb	r3, [r7, #15]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007466:	b004      	add	sp, #16
 8007468:	4770      	bx	lr

0800746a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f023 0201 	bic.w	r2, r3, #1
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074a8:	78fb      	ldrb	r3, [r7, #3]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d115      	bne.n	80074da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80074ba:	2001      	movs	r0, #1
 80074bc:	f7fa fc36 	bl	8001d2c <HAL_Delay>
      ms++;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	3301      	adds	r3, #1
 80074c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fa16 	bl	80078f8 <USB_GetMode>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d01e      	beq.n	8007510 <USB_SetCurrentMode+0x84>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2b31      	cmp	r3, #49	; 0x31
 80074d6:	d9f0      	bls.n	80074ba <USB_SetCurrentMode+0x2e>
 80074d8:	e01a      	b.n	8007510 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074da:	78fb      	ldrb	r3, [r7, #3]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d115      	bne.n	800750c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80074ec:	2001      	movs	r0, #1
 80074ee:	f7fa fc1d 	bl	8001d2c <HAL_Delay>
      ms++;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3301      	adds	r3, #1
 80074f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f9fd 	bl	80078f8 <USB_GetMode>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d005      	beq.n	8007510 <USB_SetCurrentMode+0x84>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b31      	cmp	r3, #49	; 0x31
 8007508:	d9f0      	bls.n	80074ec <USB_SetCurrentMode+0x60>
 800750a:	e001      	b.n	8007510 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e005      	b.n	800751c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b32      	cmp	r3, #50	; 0x32
 8007514:	d101      	bne.n	800751a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e000      	b.n	800751c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007524:	b084      	sub	sp, #16
 8007526:	b580      	push	{r7, lr}
 8007528:	b086      	sub	sp, #24
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800753e:	2300      	movs	r3, #0
 8007540:	613b      	str	r3, [r7, #16]
 8007542:	e009      	b.n	8007558 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	3340      	adds	r3, #64	; 0x40
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	2200      	movs	r2, #0
 8007550:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	3301      	adds	r3, #1
 8007556:	613b      	str	r3, [r7, #16]
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	2b0e      	cmp	r3, #14
 800755c:	d9f2      	bls.n	8007544 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800755e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007560:	2b00      	cmp	r3, #0
 8007562:	d11c      	bne.n	800759e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007572:	f043 0302 	orr.w	r3, r3, #2
 8007576:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	e005      	b.n	80075aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075b0:	461a      	mov	r2, r3
 80075b2:	2300      	movs	r3, #0
 80075b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075bc:	4619      	mov	r1, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c4:	461a      	mov	r2, r3
 80075c6:	680b      	ldr	r3, [r1, #0]
 80075c8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075ca:	2103      	movs	r1, #3
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f959 	bl	8007884 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075d2:	2110      	movs	r1, #16
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f8f1 	bl	80077bc <USB_FlushTxFifo>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f91d 	bl	8007824 <USB_FlushRxFifo>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075fa:	461a      	mov	r2, r3
 80075fc:	2300      	movs	r3, #0
 80075fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007606:	461a      	mov	r2, r3
 8007608:	2300      	movs	r3, #0
 800760a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007612:	461a      	mov	r2, r3
 8007614:	2300      	movs	r3, #0
 8007616:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007618:	2300      	movs	r3, #0
 800761a:	613b      	str	r3, [r7, #16]
 800761c:	e043      	b.n	80076a6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	4413      	add	r3, r2
 8007626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007630:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007634:	d118      	bne.n	8007668 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10a      	bne.n	8007652 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4413      	add	r3, r2
 8007644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007648:	461a      	mov	r2, r3
 800764a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	e013      	b.n	800767a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	4413      	add	r3, r2
 800765a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765e:	461a      	mov	r2, r3
 8007660:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007664:	6013      	str	r3, [r2, #0]
 8007666:	e008      	b.n	800767a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	4413      	add	r3, r2
 8007670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007674:	461a      	mov	r2, r3
 8007676:	2300      	movs	r3, #0
 8007678:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007686:	461a      	mov	r2, r3
 8007688:	2300      	movs	r3, #0
 800768a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	015a      	lsls	r2, r3, #5
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	4413      	add	r3, r2
 8007694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007698:	461a      	mov	r2, r3
 800769a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800769e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	3301      	adds	r3, #1
 80076a4:	613b      	str	r3, [r7, #16]
 80076a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d3b7      	bcc.n	800761e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076ae:	2300      	movs	r3, #0
 80076b0:	613b      	str	r3, [r7, #16]
 80076b2:	e043      	b.n	800773c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	015a      	lsls	r2, r3, #5
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	4413      	add	r3, r2
 80076bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076ca:	d118      	bne.n	80076fe <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10a      	bne.n	80076e8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	015a      	lsls	r2, r3, #5
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	4413      	add	r3, r2
 80076da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076de:	461a      	mov	r2, r3
 80076e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	e013      	b.n	8007710 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f4:	461a      	mov	r2, r3
 80076f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80076fa:	6013      	str	r3, [r2, #0]
 80076fc:	e008      	b.n	8007710 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	4413      	add	r3, r2
 8007706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800770a:	461a      	mov	r2, r3
 800770c:	2300      	movs	r3, #0
 800770e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	4413      	add	r3, r2
 8007718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771c:	461a      	mov	r2, r3
 800771e:	2300      	movs	r3, #0
 8007720:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4413      	add	r3, r2
 800772a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772e:	461a      	mov	r2, r3
 8007730:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007734:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	3301      	adds	r3, #1
 800773a:	613b      	str	r3, [r7, #16]
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	429a      	cmp	r2, r3
 8007742:	d3b7      	bcc.n	80076b4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007752:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007756:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007764:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	f043 0210 	orr.w	r2, r3, #16
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	699a      	ldr	r2, [r3, #24]
 8007776:	4b10      	ldr	r3, [pc, #64]	; (80077b8 <USB_DevInit+0x294>)
 8007778:	4313      	orrs	r3, r2
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800777e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007780:	2b00      	cmp	r3, #0
 8007782:	d005      	beq.n	8007790 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	f043 0208 	orr.w	r2, r3, #8
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007792:	2b01      	cmp	r3, #1
 8007794:	d107      	bne.n	80077a6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800779e:	f043 0304 	orr.w	r3, r3, #4
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077b2:	b004      	add	sp, #16
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	803c3800 	.word	0x803c3800

080077bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3301      	adds	r3, #1
 80077ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4a13      	ldr	r2, [pc, #76]	; (8007820 <USB_FlushTxFifo+0x64>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d901      	bls.n	80077dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e01b      	b.n	8007814 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	daf2      	bge.n	80077ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	019b      	lsls	r3, r3, #6
 80077ec:	f043 0220 	orr.w	r2, r3, #32
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	3301      	adds	r3, #1
 80077f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	4a08      	ldr	r2, [pc, #32]	; (8007820 <USB_FlushTxFifo+0x64>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d901      	bls.n	8007806 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e006      	b.n	8007814 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	f003 0320 	and.w	r3, r3, #32
 800780e:	2b20      	cmp	r3, #32
 8007810:	d0f0      	beq.n	80077f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	00030d40 	.word	0x00030d40

08007824 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3301      	adds	r3, #1
 8007834:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	4a11      	ldr	r2, [pc, #68]	; (8007880 <USB_FlushRxFifo+0x5c>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d901      	bls.n	8007842 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e018      	b.n	8007874 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	daf2      	bge.n	8007830 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800784a:	2300      	movs	r3, #0
 800784c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2210      	movs	r2, #16
 8007852:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3301      	adds	r3, #1
 8007858:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4a08      	ldr	r2, [pc, #32]	; (8007880 <USB_FlushRxFifo+0x5c>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d901      	bls.n	8007866 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e006      	b.n	8007874 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	f003 0310 	and.w	r3, r3, #16
 800786e:	2b10      	cmp	r3, #16
 8007870:	d0f0      	beq.n	8007854 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	00030d40 	.word	0x00030d40

08007884 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	460b      	mov	r3, r1
 800788e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	78fb      	ldrb	r3, [r7, #3]
 800789e:	68f9      	ldr	r1, [r7, #12]
 80078a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078a4:	4313      	orrs	r3, r2
 80078a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b085      	sub	sp, #20
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078d0:	f023 0303 	bic.w	r3, r3, #3
 80078d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078e4:	f043 0302 	orr.w	r3, r3, #2
 80078e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	f003 0301 	and.w	r3, r3, #1
}
 8007908:	4618      	mov	r0, r3
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800791c:	2300      	movs	r3, #0
 800791e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	3301      	adds	r3, #1
 8007924:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	4a13      	ldr	r2, [pc, #76]	; (8007978 <USB_CoreReset+0x64>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d901      	bls.n	8007932 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e01b      	b.n	800796a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	daf2      	bge.n	8007920 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f043 0201 	orr.w	r2, r3, #1
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3301      	adds	r3, #1
 800794e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4a09      	ldr	r2, [pc, #36]	; (8007978 <USB_CoreReset+0x64>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d901      	bls.n	800795c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	e006      	b.n	800796a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b01      	cmp	r3, #1
 8007966:	d0f0      	beq.n	800794a <USB_CoreReset+0x36>

  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	00030d40 	.word	0x00030d40

0800797c <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	4603      	mov	r3, r0
 8007984:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8007986:	79fb      	ldrb	r3, [r7, #7]
 8007988:	2b2f      	cmp	r3, #47	; 0x2f
 800798a:	d906      	bls.n	800799a <Hex2Num+0x1e>
 800798c:	79fb      	ldrb	r3, [r7, #7]
 800798e:	2b39      	cmp	r3, #57	; 0x39
 8007990:	d803      	bhi.n	800799a <Hex2Num+0x1e>
        return a - '0';
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	3b30      	subs	r3, #48	; 0x30
 8007996:	b2db      	uxtb	r3, r3
 8007998:	e014      	b.n	80079c4 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	2b60      	cmp	r3, #96	; 0x60
 800799e:	d906      	bls.n	80079ae <Hex2Num+0x32>
 80079a0:	79fb      	ldrb	r3, [r7, #7]
 80079a2:	2b66      	cmp	r3, #102	; 0x66
 80079a4:	d803      	bhi.n	80079ae <Hex2Num+0x32>
        return (a - 'a') + 10;
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	3b57      	subs	r3, #87	; 0x57
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	e00a      	b.n	80079c4 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 80079ae:	79fb      	ldrb	r3, [r7, #7]
 80079b0:	2b40      	cmp	r3, #64	; 0x40
 80079b2:	d906      	bls.n	80079c2 <Hex2Num+0x46>
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	2b46      	cmp	r3, #70	; 0x46
 80079b8:	d803      	bhi.n	80079c2 <Hex2Num+0x46>
        return (a - 'A') + 10;
 80079ba:	79fb      	ldrb	r3, [r7, #7]
 80079bc:	3b37      	subs	r3, #55	; 0x37
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	e000      	b.n	80079c4 <Hex2Num+0x48>
    }

    return 0;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 80079da:	2300      	movs	r3, #0
 80079dc:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 80079de:	2300      	movs	r3, #0
 80079e0:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80079e2:	e012      	b.n	8007a0a <ParseHexNumber+0x3a>
        sum <<= 4;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	011b      	lsls	r3, r3, #4
 80079e8:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7ff ffc4 	bl	800797c <Hex2Num>
 80079f4:	4603      	mov	r3, r0
 80079f6:	461a      	mov	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4413      	add	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]
        ptr++;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	3301      	adds	r3, #1
 8007a02:	607b      	str	r3, [r7, #4]
        i++;
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	3301      	adds	r3, #1
 8007a08:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	2b2f      	cmp	r3, #47	; 0x2f
 8007a10:	d903      	bls.n	8007a1a <ParseHexNumber+0x4a>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	2b39      	cmp	r3, #57	; 0x39
 8007a18:	d9e4      	bls.n	80079e4 <ParseHexNumber+0x14>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	2b60      	cmp	r3, #96	; 0x60
 8007a20:	d903      	bls.n	8007a2a <ParseHexNumber+0x5a>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	2b66      	cmp	r3, #102	; 0x66
 8007a28:	d9dc      	bls.n	80079e4 <ParseHexNumber+0x14>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	2b40      	cmp	r3, #64	; 0x40
 8007a30:	d903      	bls.n	8007a3a <ParseHexNumber+0x6a>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2b46      	cmp	r3, #70	; 0x46
 8007a38:	d9d4      	bls.n	80079e4 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d002      	beq.n	8007a46 <ParseHexNumber+0x76>
        *cnt = i;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	7afa      	ldrb	r2, [r7, #11]
 8007a44:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8007a46:	68fb      	ldr	r3, [r7, #12]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]
 8007a5e:	2300      	movs	r3, #0
 8007a60:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8007a62:	2300      	movs	r3, #0
 8007a64:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	2b2d      	cmp	r3, #45	; 0x2d
 8007a6c:	d119      	bne.n	8007aa2 <ParseNumber+0x52>
        minus = 1;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	3301      	adds	r3, #1
 8007a76:	607b      	str	r3, [r7, #4]
        i++;
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8007a7e:	e010      	b.n	8007aa2 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	4613      	mov	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	3b30      	subs	r3, #48	; 0x30
 8007a92:	4413      	add	r3, r2
 8007a94:	60bb      	str	r3, [r7, #8]
        ptr++;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	607b      	str	r3, [r7, #4]
        i++;
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	2b2f      	cmp	r3, #47	; 0x2f
 8007aa8:	d903      	bls.n	8007ab2 <ParseNumber+0x62>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	2b39      	cmp	r3, #57	; 0x39
 8007ab0:	d9e6      	bls.n	8007a80 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d002      	beq.n	8007abe <ParseNumber+0x6e>
        *cnt = i;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	7bba      	ldrb	r2, [r7, #14]
 8007abc:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <ParseNumber+0x7a>
        return 0 - sum;
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	425b      	negs	r3, r3
 8007ac8:	e000      	b.n	8007acc <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8007aca:	68bb      	ldr	r3, [r7, #8]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8007ae6:	e019      	b.n	8007b1c <ParseMAC+0x44>
    hexcnt = 1;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	2b3a      	cmp	r3, #58	; 0x3a
 8007af2:	d00e      	beq.n	8007b12 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8007af4:	f107 030e 	add.w	r3, r7, #14
 8007af8:	4619      	mov	r1, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7ff ff68 	bl	80079d0 <ParseHexNumber>
 8007b00:	4601      	mov	r1, r0
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
 8007b04:	1c5a      	adds	r2, r3, #1
 8007b06:	73fa      	strb	r2, [r7, #15]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	b2ca      	uxtb	r2, r1
 8007b10:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	461a      	mov	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4413      	add	r3, r2
 8007b1a:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1e1      	bne.n	8007ae8 <ParseMAC+0x10>
  }
}
 8007b24:	bf00      	nop
 8007b26:	bf00      	nop
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b084      	sub	sp, #16
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8007b3c:	e019      	b.n	8007b72 <ParseIP+0x44>
    hexcnt = 1;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	2b2e      	cmp	r3, #46	; 0x2e
 8007b48:	d00e      	beq.n	8007b68 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8007b4a:	f107 030e 	add.w	r3, r7, #14
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff ff7d 	bl	8007a50 <ParseNumber>
 8007b56:	4601      	mov	r1, r0
 8007b58:	7bfb      	ldrb	r3, [r7, #15]
 8007b5a:	1c5a      	adds	r2, r3, #1
 8007b5c:	73fa      	strb	r2, [r7, #15]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	4413      	add	r3, r2
 8007b64:	b2ca      	uxtb	r2, r1
 8007b66:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8007b68:	7bbb      	ldrb	r3, [r7, #14]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4413      	add	r3, r2
 8007b70:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1e1      	bne.n	8007b3e <ParseIP+0x10>
  }
}
 8007b7a:	bf00      	nop
 8007b7c:	bf00      	nop
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	3302      	adds	r3, #2
 8007b96:	4934      	ldr	r1, [pc, #208]	; (8007c68 <AT_ParseInfo+0xe4>)
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f004 fcbb 	bl	800c514 <strtok>
 8007b9e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8007ba0:	e05a      	b.n	8007c58 <AT_ParseInfo+0xd4>
    switch (num++) {
 8007ba2:	7afb      	ldrb	r3, [r7, #11]
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	72fa      	strb	r2, [r7, #11]
 8007ba8:	2b06      	cmp	r3, #6
 8007baa:	d84f      	bhi.n	8007c4c <AT_ParseInfo+0xc8>
 8007bac:	a201      	add	r2, pc, #4	; (adr r2, 8007bb4 <AT_ParseInfo+0x30>)
 8007bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb2:	bf00      	nop
 8007bb4:	08007bd1 	.word	0x08007bd1
 8007bb8:	08007bdf 	.word	0x08007bdf
 8007bbc:	08007bef 	.word	0x08007bef
 8007bc0:	08007bff 	.word	0x08007bff
 8007bc4:	08007c0f 	.word	0x08007c0f
 8007bc8:	08007c1f 	.word	0x08007c1f
 8007bcc:	08007c33 	.word	0x08007c33
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	68f9      	ldr	r1, [r7, #12]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f004 fc72 	bl	800c4c0 <strncpy>
      break;
 8007bdc:	e037      	b.n	8007c4e <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	3320      	adds	r3, #32
 8007be2:	2218      	movs	r2, #24
 8007be4:	68f9      	ldr	r1, [r7, #12]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f004 fc6a 	bl	800c4c0 <strncpy>
      break;
 8007bec:	e02f      	b.n	8007c4e <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	3338      	adds	r3, #56	; 0x38
 8007bf2:	2210      	movs	r2, #16
 8007bf4:	68f9      	ldr	r1, [r7, #12]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f004 fc62 	bl	800c4c0 <strncpy>
      break;
 8007bfc:	e027      	b.n	8007c4e <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	3348      	adds	r3, #72	; 0x48
 8007c02:	2210      	movs	r2, #16
 8007c04:	68f9      	ldr	r1, [r7, #12]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f004 fc5a 	bl	800c4c0 <strncpy>
      break;
 8007c0c:	e01f      	b.n	8007c4e <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	3358      	adds	r3, #88	; 0x58
 8007c12:	2210      	movs	r2, #16
 8007c14:	68f9      	ldr	r1, [r7, #12]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f004 fc52 	bl	800c4c0 <strncpy>
      break;
 8007c1c:	e017      	b.n	8007c4e <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8007c1e:	2100      	movs	r1, #0
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f7ff ff15 	bl	8007a50 <ParseNumber>
 8007c26:	4603      	mov	r3, r0
 8007c28:	461a      	mov	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8007c30:	e00d      	b.n	8007c4e <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8007c32:	490e      	ldr	r1, [pc, #56]	; (8007c6c <AT_ParseInfo+0xe8>)
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f004 fc6d 	bl	800c514 <strtok>
 8007c3a:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3368      	adds	r3, #104	; 0x68
 8007c40:	2220      	movs	r2, #32
 8007c42:	68f9      	ldr	r1, [r7, #12]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f004 fc3b 	bl	800c4c0 <strncpy>
      break;
 8007c4a:	e000      	b.n	8007c4e <AT_ParseInfo+0xca>

    default: break;
 8007c4c:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8007c4e:	4906      	ldr	r1, [pc, #24]	; (8007c68 <AT_ParseInfo+0xe4>)
 8007c50:	2000      	movs	r0, #0
 8007c52:	f004 fc5f 	bl	800c514 <strtok>
 8007c56:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1a1      	bne.n	8007ba2 <AT_ParseInfo+0x1e>
  }
}
 8007c5e:	bf00      	nop
 8007c60:	bf00      	nop
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	0800dd90 	.word	0x0800dd90
 8007c6c:	0800dd94 	.word	0x0800dd94

08007c70 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	3302      	adds	r3, #2
 8007c82:	4952      	ldr	r1, [pc, #328]	; (8007dcc <AT_ParseConnSettings+0x15c>)
 8007c84:	4618      	mov	r0, r3
 8007c86:	f004 fc45 	bl	800c514 <strtok>
 8007c8a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8007c8c:	e095      	b.n	8007dba <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8007c8e:	7bfb      	ldrb	r3, [r7, #15]
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	73fa      	strb	r2, [r7, #15]
 8007c94:	2b0b      	cmp	r3, #11
 8007c96:	d87f      	bhi.n	8007d98 <AT_ParseConnSettings+0x128>
 8007c98:	a201      	add	r2, pc, #4	; (adr r2, 8007ca0 <AT_ParseConnSettings+0x30>)
 8007c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9e:	bf00      	nop
 8007ca0:	08007cd1 	.word	0x08007cd1
 8007ca4:	08007cdf 	.word	0x08007cdf
 8007ca8:	08007cef 	.word	0x08007cef
 8007cac:	08007d03 	.word	0x08007d03
 8007cb0:	08007d17 	.word	0x08007d17
 8007cb4:	08007d2b 	.word	0x08007d2b
 8007cb8:	08007d39 	.word	0x08007d39
 8007cbc:	08007d47 	.word	0x08007d47
 8007cc0:	08007d55 	.word	0x08007d55
 8007cc4:	08007d63 	.word	0x08007d63
 8007cc8:	08007d71 	.word	0x08007d71
 8007ccc:	08007d85 	.word	0x08007d85
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2221      	movs	r2, #33	; 0x21
 8007cd4:	68b9      	ldr	r1, [r7, #8]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f004 fbf2 	bl	800c4c0 <strncpy>
      break;
 8007cdc:	e05d      	b.n	8007d9a <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	3321      	adds	r3, #33	; 0x21
 8007ce2:	2221      	movs	r2, #33	; 0x21
 8007ce4:	68b9      	ldr	r1, [r7, #8]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f004 fbea 	bl	800c4c0 <strncpy>
      break;
 8007cec:	e055      	b.n	8007d9a <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8007cee:	2100      	movs	r1, #0
 8007cf0:	68b8      	ldr	r0, [r7, #8]
 8007cf2:	f7ff fead 	bl	8007a50 <ParseNumber>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8007d00:	e04b      	b.n	8007d9a <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8007d02:	2100      	movs	r1, #0
 8007d04:	68b8      	ldr	r0, [r7, #8]
 8007d06:	f7ff fea3 	bl	8007a50 <ParseNumber>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8007d14:	e041      	b.n	8007d9a <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8007d16:	2100      	movs	r1, #0
 8007d18:	68b8      	ldr	r0, [r7, #8]
 8007d1a:	f7ff fe99 	bl	8007a50 <ParseNumber>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8007d28:	e037      	b.n	8007d9a <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	3348      	adds	r3, #72	; 0x48
 8007d2e:	4619      	mov	r1, r3
 8007d30:	68b8      	ldr	r0, [r7, #8]
 8007d32:	f7ff fefc 	bl	8007b2e <ParseIP>
      break;
 8007d36:	e030      	b.n	8007d9a <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	334c      	adds	r3, #76	; 0x4c
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	68b8      	ldr	r0, [r7, #8]
 8007d40:	f7ff fef5 	bl	8007b2e <ParseIP>
      break;
 8007d44:	e029      	b.n	8007d9a <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	3350      	adds	r3, #80	; 0x50
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	68b8      	ldr	r0, [r7, #8]
 8007d4e:	f7ff feee 	bl	8007b2e <ParseIP>
      break;
 8007d52:	e022      	b.n	8007d9a <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	3354      	adds	r3, #84	; 0x54
 8007d58:	4619      	mov	r1, r3
 8007d5a:	68b8      	ldr	r0, [r7, #8]
 8007d5c:	f7ff fee7 	bl	8007b2e <ParseIP>
      break;
 8007d60:	e01b      	b.n	8007d9a <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	3358      	adds	r3, #88	; 0x58
 8007d66:	4619      	mov	r1, r3
 8007d68:	68b8      	ldr	r0, [r7, #8]
 8007d6a:	f7ff fee0 	bl	8007b2e <ParseIP>
      break;
 8007d6e:	e014      	b.n	8007d9a <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8007d70:	2100      	movs	r1, #0
 8007d72:	68b8      	ldr	r0, [r7, #8]
 8007d74:	f7ff fe6c 	bl	8007a50 <ParseNumber>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8007d82:	e00a      	b.n	8007d9a <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8007d84:	2100      	movs	r1, #0
 8007d86:	68b8      	ldr	r0, [r7, #8]
 8007d88:	f7ff fe62 	bl	8007a50 <ParseNumber>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8007d96:	e000      	b.n	8007d9a <AT_ParseConnSettings+0x12a>

    default:
      break;
 8007d98:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8007d9a:	490c      	ldr	r1, [pc, #48]	; (8007dcc <AT_ParseConnSettings+0x15c>)
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	f004 fbb9 	bl	800c514 <strtok>
 8007da2:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d007      	beq.n	8007dba <AT_ParseConnSettings+0x14a>
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b2c      	cmp	r3, #44	; 0x2c
 8007db2:	d102      	bne.n	8007dba <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	3301      	adds	r3, #1
 8007db8:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f47f af66 	bne.w	8007c8e <AT_ParseConnSettings+0x1e>
    }
  }
}
 8007dc2:	bf00      	nop
 8007dc4:	bf00      	nop
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	0800dd90 	.word	0x0800dd90

08007dd0 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	3302      	adds	r3, #2
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	2b31      	cmp	r3, #49	; 0x31
 8007de2:	bf0c      	ite	eq
 8007de4:	2301      	moveq	r3, #1
 8007de6:	2300      	movne	r3, #0
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	461a      	mov	r2, r3
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	701a      	strb	r2, [r3, #0]
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8007dfc:	b590      	push	{r4, r7, lr}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8007e16:	68b8      	ldr	r0, [r7, #8]
 8007e18:	f7f8 f9da 	bl	80001d0 <strlen>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	b299      	uxth	r1, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8007e26:	461a      	mov	r2, r3
 8007e28:	68b8      	ldr	r0, [r7, #8]
 8007e2a:	47a0      	blx	r4
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	dd3e      	ble.n	8007eb4 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007e42:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	4798      	blx	r3
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8007e4e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	dd27      	ble.n	8007ea6 <AT_ExecuteCommand+0xaa>
 8007e56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007e5a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007e5e:	dc22      	bgt.n	8007ea6 <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8007e60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007e64:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007e68:	d105      	bne.n	8007e76 <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8007e6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	3b01      	subs	r3, #1
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8007e76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	2200      	movs	r2, #0
 8007e80:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8007e82:	490f      	ldr	r1, [pc, #60]	; (8007ec0 <AT_ExecuteCommand+0xc4>)
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f004 fb2e 	bl	800c4e6 <strstr>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	e010      	b.n	8007eb6 <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8007e94:	490b      	ldr	r1, [pc, #44]	; (8007ec4 <AT_ExecuteCommand+0xc8>)
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f004 fb25 	bl	800c4e6 <strstr>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d001      	beq.n	8007ea6 <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007ea2:	2305      	movs	r3, #5
 8007ea4:	e007      	b.n	8007eb6 <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8007ea6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007eaa:	f113 0f04 	cmn.w	r3, #4
 8007eae:	d101      	bne.n	8007eb4 <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8007eb0:	2306      	movs	r3, #6
 8007eb2:	e000      	b.n	8007eb6 <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8007eb4:	2304      	movs	r3, #4
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	371c      	adds	r7, #28
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd90      	pop	{r4, r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	0800dda4 	.word	0x0800dda4
 8007ec4:	0800ddb0 	.word	0x0800ddb0

08007ec8 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
 8007ed4:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 8007ee2:	68b8      	ldr	r0, [r7, #8]
 8007ee4:	f7f8 f974 	bl	80001d0 <strlen>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8007eec:	8a7b      	ldrh	r3, [r7, #18]
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <AT_RequestSendData+0x32>
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	e053      	b.n	8007fa2 <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007f06:	8a79      	ldrh	r1, [r7, #18]
 8007f08:	68b8      	ldr	r0, [r7, #8]
 8007f0a:	4798      	blx	r3
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8007f10:	8a3a      	ldrh	r2, [r7, #16]
 8007f12:	8a7b      	ldrh	r3, [r7, #18]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d143      	bne.n	8007fa0 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007f24:	8879      	ldrh	r1, [r7, #2]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	4798      	blx	r3
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8007f2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007f32:	887b      	ldrh	r3, [r7, #2]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d131      	bne.n	8007f9c <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007f44:	2100      	movs	r1, #0
 8007f46:	6a38      	ldr	r0, [r7, #32]
 8007f48:	4798      	blx	r3
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8007f4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	dd19      	ble.n	8007f8a <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8007f56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007f5a:	6a3a      	ldr	r2, [r7, #32]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	2200      	movs	r2, #0
 8007f60:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8007f62:	4912      	ldr	r1, [pc, #72]	; (8007fac <AT_RequestSendData+0xe4>)
 8007f64:	6a38      	ldr	r0, [r7, #32]
 8007f66:	f004 fabe 	bl	800c4e6 <strstr>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	e016      	b.n	8007fa2 <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8007f74:	490e      	ldr	r1, [pc, #56]	; (8007fb0 <AT_RequestSendData+0xe8>)
 8007f76:	6a38      	ldr	r0, [r7, #32]
 8007f78:	f004 fab5 	bl	800c4e6 <strstr>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007f82:	2305      	movs	r3, #5
 8007f84:	e00d      	b.n	8007fa2 <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8007f86:	2302      	movs	r3, #2
 8007f88:	e00b      	b.n	8007fa2 <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8007f8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007f8e:	f113 0f04 	cmn.w	r3, #4
 8007f92:	d101      	bne.n	8007f98 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8007f94:	2306      	movs	r3, #6
 8007f96:	e004      	b.n	8007fa2 <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8007f98:	2302      	movs	r3, #2
 8007f9a:	e002      	b.n	8007fa2 <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e000      	b.n	8007fa2 <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8007fa0:	2304      	movs	r3, #4
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	0800dda4 	.word	0x0800dda4
 8007fb0:	0800ddb0 	.word	0x0800ddb0

08007fb4 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8007fb4:	b590      	push	{r4, r7, lr}
 8007fb6:	b087      	sub	sp, #28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
 8007fc0:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007fc8:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8007fd0:	68b8      	ldr	r0, [r7, #8]
 8007fd2:	f7f8 f8fd 	bl	80001d0 <strlen>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	b299      	uxth	r1, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	68b8      	ldr	r0, [r7, #8]
 8007fe4:	47a0      	blx	r4
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	dd6f      	ble.n	80080cc <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	6938      	ldr	r0, [r7, #16]
 8007ffc:	4798      	blx	r3
 8007ffe:	4603      	mov	r3, r0
 8008000:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	2b0d      	cmp	r3, #13
 8008008:	d104      	bne.n	8008014 <AT_RequestReceiveData+0x60>
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	3301      	adds	r3, #1
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	2b0a      	cmp	r3, #10
 8008012:	d001      	beq.n	8008018 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 8008014:	2304      	movs	r3, #4
 8008016:	e05a      	b.n	80080ce <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	3b02      	subs	r3, #2
 800801c:	617b      	str	r3, [r7, #20]
    p+=2;
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	3302      	adds	r3, #2
 8008022:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	2b07      	cmp	r3, #7
 8008028:	d94a      	bls.n	80080c0 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 800802a:	e002      	b.n	8008032 <AT_RequestReceiveData+0x7e>
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	3b01      	subs	r3, #1
 8008030:	617b      	str	r3, [r7, #20]
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d006      	beq.n	8008046 <AT_RequestReceiveData+0x92>
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	3b01      	subs	r3, #1
 800803c:	693a      	ldr	r2, [r7, #16]
 800803e:	4413      	add	r3, r2
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	2b15      	cmp	r3, #21
 8008044:	d0f2      	beq.n	800802c <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	4413      	add	r3, r2
 800804c:	2200      	movs	r2, #0
 800804e:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	3b08      	subs	r3, #8
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	4413      	add	r3, r2
 8008058:	491f      	ldr	r1, [pc, #124]	; (80080d8 <AT_RequestReceiveData+0x124>)
 800805a:	4618      	mov	r0, r3
 800805c:	f004 fa43 	bl	800c4e6 <strstr>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d016      	beq.n	8008094 <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	b29b      	uxth	r3, r3
 800806a:	3b08      	subs	r3, #8
 800806c:	b29a      	uxth	r2, r3
 800806e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008070:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 8008072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	887a      	ldrh	r2, [r7, #2]
 8008078:	429a      	cmp	r2, r3
 800807a:	d202      	bcs.n	8008082 <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 800807c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807e:	887a      	ldrh	r2, [r7, #2]
 8008080:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	6939      	ldr	r1, [r7, #16]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f004 f940 	bl	800c310 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 8008090:	2300      	movs	r3, #0
 8008092:	e01c      	b.n	80080ce <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	3b04      	subs	r3, #4
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	4413      	add	r3, r2
 800809c:	2204      	movs	r2, #4
 800809e:	490f      	ldr	r1, [pc, #60]	; (80080dc <AT_RequestReceiveData+0x128>)
 80080a0:	4618      	mov	r0, r3
 80080a2:	f004 f925 	bl	800c2f0 <memcmp>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d104      	bne.n	80080b6 <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 80080ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ae:	2200      	movs	r2, #0
 80080b0:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80080b2:	2305      	movs	r3, #5
 80080b4:	e00b      	b.n	80080ce <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 80080b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b8:	2200      	movs	r2, #0
 80080ba:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80080bc:	2305      	movs	r3, #5
 80080be:	e006      	b.n	80080ce <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f113 0f04 	cmn.w	r3, #4
 80080c6:	d101      	bne.n	80080cc <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 80080c8:	2306      	movs	r3, #6
 80080ca:	e000      	b.n	80080ce <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80080cc:	2304      	movs	r3, #4
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd90      	pop	{r4, r7, pc}
 80080d6:	bf00      	nop
 80080d8:	0800dda4 	.word	0x0800dda4
 80080dc:	0800ddb8 	.word	0x0800ddb8

080080e0 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80080e8:	2302      	movs	r3, #2
 80080ea:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f247 5230 	movw	r2, #30000	; 0x7530
 80080f2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80080fc:	2000      	movs	r0, #0
 80080fe:	4798      	blx	r3
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d113      	bne.n	800812e <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800810c:	461a      	mov	r2, r3
 800810e:	490a      	ldr	r1, [pc, #40]	; (8008138 <ES_WIFI_Init+0x58>)
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7ff fe73 	bl	8007dfc <AT_ExecuteCommand>
 8008116:	4603      	mov	r3, r0
 8008118:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 800811a:	7bfb      	ldrb	r3, [r7, #15]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d106      	bne.n	800812e <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f7ff fd2b 	bl	8007b84 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800812e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	0800ddc0 	.word	0x0800ddc0

0800813c <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
 8008148:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00b      	beq.n	8008168 <ES_WIFI_RegisterBusIO+0x2c>
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d008      	beq.n	8008168 <ES_WIFI_RegisterBusIO+0x2c>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d005      	beq.n	8008168 <ES_WIFI_RegisterBusIO+0x2c>
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <ES_WIFI_RegisterBusIO+0x2c>
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8008168:	2302      	movs	r3, #2
 800816a:	e014      	b.n	8008196 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	69ba      	ldr	r2, [r7, #24]
 8008180:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	69fa      	ldr	r2, [r7, #28]
 8008188:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
	...

080081a4 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
 80081b0:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	4932      	ldr	r1, [pc, #200]	; (8008284 <ES_WIFI_Connect+0xe0>)
 80081bc:	4618      	mov	r0, r3
 80081be:	f004 f94b 	bl	800c458 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80081ce:	461a      	mov	r2, r3
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f7ff fe13 	bl	8007dfc <AT_ExecuteCommand>
 80081d6:	4603      	mov	r3, r0
 80081d8:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80081da:	7dfb      	ldrb	r3, [r7, #23]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d14b      	bne.n	8008278 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	4927      	ldr	r1, [pc, #156]	; (8008288 <ES_WIFI_Connect+0xe4>)
 80081ea:	4618      	mov	r0, r3
 80081ec:	f004 f934 	bl	800c458 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80081fc:	461a      	mov	r2, r3
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f7ff fdfc 	bl	8007dfc <AT_ExecuteCommand>
 8008204:	4603      	mov	r3, r0
 8008206:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8008208:	7dfb      	ldrb	r3, [r7, #23]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d134      	bne.n	8008278 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	78fa      	ldrb	r2, [r7, #3]
 8008212:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800821c:	78fa      	ldrb	r2, [r7, #3]
 800821e:	491b      	ldr	r1, [pc, #108]	; (800828c <ES_WIFI_Connect+0xe8>)
 8008220:	4618      	mov	r0, r3
 8008222:	f004 f919 	bl	800c458 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008232:	461a      	mov	r2, r3
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f7ff fde1 	bl	8007dfc <AT_ExecuteCommand>
 800823a:	4603      	mov	r3, r0
 800823c:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800823e:	7dfb      	ldrb	r3, [r7, #23]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d119      	bne.n	8008278 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800824a:	4911      	ldr	r1, [pc, #68]	; (8008290 <ES_WIFI_Connect+0xec>)
 800824c:	4618      	mov	r0, r3
 800824e:	f004 f903 	bl	800c458 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800825e:	461a      	mov	r2, r3
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f7ff fdcb 	bl	8007dfc <AT_ExecuteCommand>
 8008266:	4603      	mov	r3, r0
 8008268:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d103      	bne.n	8008278 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8008278:	7dfb      	ldrb	r3, [r7, #23]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3718      	adds	r7, #24
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	0800ddd8 	.word	0x0800ddd8
 8008288:	0800dde0 	.word	0x0800dde0
 800828c:	0800dde8 	.word	0x0800dde8
 8008290:	0800ddf0 	.word	0x0800ddf0

08008294 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80082a2:	4911      	ldr	r1, [pc, #68]	; (80082e8 <ES_WIFI_IsConnected+0x54>)
 80082a4:	4618      	mov	r0, r3
 80082a6:	f004 f8d7 	bl	800c458 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80082b6:	461a      	mov	r2, r3
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7ff fd9f 	bl	8007dfc <AT_ExecuteCommand>
 80082be:	4603      	mov	r3, r0
 80082c0:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d108      	bne.n	80082da <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	33d2      	adds	r3, #210	; 0xd2
 80082d2:	4619      	mov	r1, r3
 80082d4:	4610      	mov	r0, r2
 80082d6:	f7ff fd7b 	bl	8007dd0 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	0800ddf4 	.word	0x0800ddf4

080082ec <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80082fa:	4910      	ldr	r1, [pc, #64]	; (800833c <ES_WIFI_GetNetworkSettings+0x50>)
 80082fc:	4618      	mov	r0, r3
 80082fe:	f004 f8ab 	bl	800c458 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800830e:	461a      	mov	r2, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f7ff fd73 	bl	8007dfc <AT_ExecuteCommand>
 8008316:	4603      	mov	r3, r0
 8008318:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d108      	bne.n	8008332 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	338d      	adds	r3, #141	; 0x8d
 800832a:	4619      	mov	r1, r3
 800832c:	4610      	mov	r0, r2
 800832e:	f7ff fc9f 	bl	8007c70 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 8008332:	7bfb      	ldrb	r3, [r7, #15]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	0800ddfc 	.word	0x0800ddfc

08008340 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008350:	4912      	ldr	r1, [pc, #72]	; (800839c <ES_WIFI_GetMACAddress+0x5c>)
 8008352:	4618      	mov	r0, r3
 8008354:	f004 f880 	bl	800c458 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008364:	461a      	mov	r2, r3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7ff fd48 	bl	8007dfc <AT_ExecuteCommand>
 800836c:	4603      	mov	r3, r0
 800836e:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8008370:	7bfb      	ldrb	r3, [r7, #15]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10c      	bne.n	8008390 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800837c:	3302      	adds	r3, #2
 800837e:	4908      	ldr	r1, [pc, #32]	; (80083a0 <ES_WIFI_GetMACAddress+0x60>)
 8008380:	4618      	mov	r0, r3
 8008382:	f004 f8c7 	bl	800c514 <strtok>
 8008386:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	68b8      	ldr	r0, [r7, #8]
 800838c:	f7ff fba4 	bl	8007ad8 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8008390:	7bfb      	ldrb	r3, [r7, #15]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	0800de58 	.word	0x0800de58
 80083a0:	0800de5c 	.word	0x0800de5c

080083a4 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80083ae:	2300      	movs	r3, #0
 80083b0:	73fb      	strb	r3, [r7, #15]
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	785b      	ldrb	r3, [r3, #1]
 80083bc:	461a      	mov	r2, r3
 80083be:	4949      	ldr	r1, [pc, #292]	; (80084e4 <ES_WIFI_StartServerSingleConn+0x140>)
 80083c0:	f004 f84a 	bl	800c458 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80083d0:	461a      	mov	r2, r3
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f7ff fd12 	bl	8007dfc <AT_ExecuteCommand>
 80083d8:	4603      	mov	r3, r0
 80083da:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
 80083e4:	e079      	b.n	80084da <ES_WIFI_StartServerSingleConn+0x136>
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d016      	beq.n	800841c <ES_WIFI_StartServerSingleConn+0x78>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d012      	beq.n	800841c <ES_WIFI_StartServerSingleConn+0x78>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80083fc:	493a      	ldr	r1, [pc, #232]	; (80084e8 <ES_WIFI_StartServerSingleConn+0x144>)
 80083fe:	4618      	mov	r0, r3
 8008400:	f004 f82a 	bl	800c458 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008410:	461a      	mov	r2, r3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7ff fcf2 	bl	8007dfc <AT_ExecuteCommand>
 8008418:	4603      	mov	r3, r0
 800841a:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == ES_WIFI_STATUS_OK)
 800841c:	7bfb      	ldrb	r3, [r7, #15]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d15a      	bne.n	80084d8 <ES_WIFI_StartServerSingleConn+0x134>
  {
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	461a      	mov	r2, r3
 800842e:	492f      	ldr	r1, [pc, #188]	; (80084ec <ES_WIFI_StartServerSingleConn+0x148>)
 8008430:	f004 f812 	bl	800c458 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008440:	461a      	mov	r2, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff fcda 	bl	8007dfc <AT_ExecuteCommand>
 8008448:	4603      	mov	r3, r0
 800844a:	73fb      	strb	r3, [r7, #15]
      if(ret == ES_WIFI_STATUS_OK)
 800844c:	7bfb      	ldrb	r3, [r7, #15]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d142      	bne.n	80084d8 <ES_WIFI_StartServerSingleConn+0x134>
      {
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	7c1b      	ldrb	r3, [r3, #16]
 800845c:	461a      	mov	r2, r3
 800845e:	4924      	ldr	r1, [pc, #144]	; (80084f0 <ES_WIFI_StartServerSingleConn+0x14c>)
 8008460:	f003 fffa 	bl	800c458 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008470:	461a      	mov	r2, r3
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f7ff fcc2 	bl	8007dfc <AT_ExecuteCommand>
 8008478:	4603      	mov	r3, r0
 800847a:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)
 800847c:	7bfb      	ldrb	r3, [r7, #15]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d12a      	bne.n	80084d8 <ES_WIFI_StartServerSingleConn+0x134>
		    {
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	889b      	ldrh	r3, [r3, #4]
 800848c:	461a      	mov	r2, r3
 800848e:	4919      	ldr	r1, [pc, #100]	; (80084f4 <ES_WIFI_StartServerSingleConn+0x150>)
 8008490:	f003 ffe2 	bl	800c458 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084a0:	461a      	mov	r2, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7ff fcaa 	bl	8007dfc <AT_ExecuteCommand>
 80084a8:	4603      	mov	r3, r0
 80084aa:	73fb      	strb	r3, [r7, #15]
          if (ret == ES_WIFI_STATUS_OK)
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d112      	bne.n	80084d8 <ES_WIFI_StartServerSingleConn+0x134>
          {
            // multi accept mode
            sprintf((char*)Obj->CmdData,"P5=11\r");
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084b8:	490f      	ldr	r1, [pc, #60]	; (80084f8 <ES_WIFI_StartServerSingleConn+0x154>)
 80084ba:	4618      	mov	r0, r3
 80084bc:	f003 ffcc 	bl	800c458 <siprintf>
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084cc:	461a      	mov	r2, r3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7ff fc94 	bl	8007dfc <AT_ExecuteCommand>
 80084d4:	4603      	mov	r3, r0
 80084d6:	73fb      	strb	r3, [r7, #15]
          }
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	0800dec0 	.word	0x0800dec0
 80084e8:	0800df08 	.word	0x0800df08
 80084ec:	0800dec8 	.word	0x0800dec8
 80084f0:	0800df14 	.word	0x0800df14
 80084f4:	0800ded0 	.word	0x0800ded0
 80084f8:	0800df1c 	.word	0x0800df1c

080084fc <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,uint32_t timeout,ES_WIFI_Conn_t *conn)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b08a      	sub	sp, #40	; 0x28
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart=HAL_GetTick();
 800850e:	f7f9 fc01 	bl	8001d14 <HAL_GetTick>
 8008512:	6278      	str	r0, [r7, #36]	; 0x24
  tlast=tstart+timeout;
 8008514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	4413      	add	r3, r2
 800851a:	61fb      	str	r3, [r7, #28]
  if (tlast < tstart )
 800851c:	69fa      	ldr	r2, [r7, #28]
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	429a      	cmp	r2, r3
 8008522:	d201      	bcs.n	8008528 <ES_WIFI_WaitServerConnection+0x2c>
  {
	   tstart=0;
 8008524:	2300      	movs	r3, #0
 8008526:	627b      	str	r3, [r7, #36]	; 0x24

  do
  {
#if (ES_WIFI_USE_UART == 0)
    // mandatory to flush MR async messages
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800852e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008532:	2100      	movs	r1, #0
 8008534:	4618      	mov	r0, r3
 8008536:	f003 fef9 	bl	800c32c <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008540:	4972      	ldr	r1, [pc, #456]	; (800870c <ES_WIFI_WaitServerConnection+0x210>)
 8008542:	4618      	mov	r0, r3
 8008544:	f003 ff88 	bl	800c458 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008554:	461a      	mov	r2, r3
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f7ff fc50 	bl	8007dfc <AT_ExecuteCommand>
 800855c:	4603      	mov	r3, r0
 800855e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(ret == ES_WIFI_STATUS_OK)
 8008562:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008566:	2b00      	cmp	r3, #0
 8008568:	d136      	bne.n	80085d8 <ES_WIFI_WaitServerConnection+0xdc>
    {
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008570:	4967      	ldr	r1, [pc, #412]	; (8008710 <ES_WIFI_WaitServerConnection+0x214>)
 8008572:	4618      	mov	r0, r3
 8008574:	f003 ffb7 	bl	800c4e6 <strstr>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d03b      	beq.n	80085f6 <ES_WIFI_WaitServerConnection+0xfa>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008584:	4963      	ldr	r1, [pc, #396]	; (8008714 <ES_WIFI_WaitServerConnection+0x218>)
 8008586:	4618      	mov	r0, r3
 8008588:	f003 ffad 	bl	800c4e6 <strstr>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d031      	beq.n	80085f6 <ES_WIFI_WaitServerConnection+0xfa>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008598:	495f      	ldr	r1, [pc, #380]	; (8008718 <ES_WIFI_WaitServerConnection+0x21c>)
 800859a:	4618      	mov	r0, r3
 800859c:	f003 ffa3 	bl	800c4e6 <strstr>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d127      	bne.n	80085f6 <ES_WIFI_WaitServerConnection+0xfa>
        {
         //printf("SOMA Accepted\n");
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80085ac:	495b      	ldr	r1, [pc, #364]	; (800871c <ES_WIFI_WaitServerConnection+0x220>)
 80085ae:	4618      	mov	r0, r3
 80085b0:	f003 ff99 	bl	800c4e6 <strstr>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d11d      	bne.n	80085f6 <ES_WIFI_WaitServerConnection+0xfa>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);
 80085ba:	f240 7241 	movw	r2, #1857	; 0x741
 80085be:	4958      	ldr	r1, [pc, #352]	; (8008720 <ES_WIFI_WaitServerConnection+0x224>)
 80085c0:	4858      	ldr	r0, [pc, #352]	; (8008724 <ES_WIFI_WaitServerConnection+0x228>)
 80085c2:	f003 febb 	bl	800c33c <iprintf>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80085cc:	4619      	mov	r1, r3
 80085ce:	4856      	ldr	r0, [pc, #344]	; (8008728 <ES_WIFI_WaitServerConnection+0x22c>)
 80085d0:	f003 feb4 	bl	800c33c <iprintf>
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 80085d4:	2302      	movs	r3, #2
 80085d6:	e095      	b.n	8008704 <ES_WIFI_WaitServerConnection+0x208>
        }
      }
    }
    else
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);
 80085d8:	f240 7249 	movw	r2, #1865	; 0x749
 80085dc:	4950      	ldr	r1, [pc, #320]	; (8008720 <ES_WIFI_WaitServerConnection+0x224>)
 80085de:	4851      	ldr	r0, [pc, #324]	; (8008724 <ES_WIFI_WaitServerConnection+0x228>)
 80085e0:	f003 feac 	bl	800c33c <iprintf>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80085ea:	4619      	mov	r1, r3
 80085ec:	484f      	ldr	r0, [pc, #316]	; (800872c <ES_WIFI_WaitServerConnection+0x230>)
 80085ee:	f003 fea5 	bl	800c33c <iprintf>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
 80085f2:	2302      	movs	r3, #2
 80085f4:	e086      	b.n	8008704 <ES_WIFI_WaitServerConnection+0x208>
    }
#endif

    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80085fc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008600:	2100      	movs	r1, #0
 8008602:	4618      	mov	r0, r3
 8008604:	f003 fe92 	bl	800c32c <memset>
    sprintf((char*)Obj->CmdData,"P?\r");
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800860e:	4948      	ldr	r1, [pc, #288]	; (8008730 <ES_WIFI_WaitServerConnection+0x234>)
 8008610:	4618      	mov	r0, r3
 8008612:	f003 ff21 	bl	800c458 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008622:	461a      	mov	r2, r3
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f7ff fbe9 	bl	8007dfc <AT_ExecuteCommand>
 800862a:	4603      	mov	r3, r0
 800862c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(ret == ES_WIFI_STATUS_OK)
 8008630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008634:	2b00      	cmp	r3, #0
 8008636:	d13f      	bne.n	80086b8 <ES_WIFI_WaitServerConnection+0x1bc>
    {
      if (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800863e:	220c      	movs	r2, #12
 8008640:	493c      	ldr	r1, [pc, #240]	; (8008734 <ES_WIFI_WaitServerConnection+0x238>)
 8008642:	4618      	mov	r0, r3
 8008644:	f003 ff28 	bl	800c498 <strncmp>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d043      	beq.n	80086d6 <ES_WIFI_WaitServerConnection+0x1da>
      {
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008654:	3302      	adds	r3, #2
 8008656:	4938      	ldr	r1, [pc, #224]	; (8008738 <ES_WIFI_WaitServerConnection+0x23c>)
 8008658:	4618      	mov	r0, r3
 800865a:	f003 ff5b 	bl	800c514 <strtok>
 800865e:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); //port
 8008660:	4935      	ldr	r1, [pc, #212]	; (8008738 <ES_WIFI_WaitServerConnection+0x23c>)
 8008662:	2000      	movs	r0, #0
 8008664:	f003 ff56 	bl	800c514 <strtok>
 8008668:	6178      	str	r0, [r7, #20]
        ParseIP((char *)ptr, conn->RemoteIP);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	3306      	adds	r3, #6
 800866e:	4619      	mov	r1, r3
 8008670:	6978      	ldr	r0, [r7, #20]
 8008672:	f7ff fa5c 	bl	8007b2e <ParseIP>
        ptr = strtok(0, ","); //port
 8008676:	4930      	ldr	r1, [pc, #192]	; (8008738 <ES_WIFI_WaitServerConnection+0x23c>)
 8008678:	2000      	movs	r0, #0
 800867a:	f003 ff4b 	bl	800c514 <strtok>
 800867e:	6178      	str	r0, [r7, #20]
        conn->LocalPort=ParseNumber(ptr,0);
 8008680:	2100      	movs	r1, #0
 8008682:	6978      	ldr	r0, [r7, #20]
 8008684:	f7ff f9e4 	bl	8007a50 <ParseNumber>
 8008688:	4603      	mov	r3, r0
 800868a:	b29a      	uxth	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	809a      	strh	r2, [r3, #4]
        ptr = strtok(0, ","); //ip
 8008690:	4929      	ldr	r1, [pc, #164]	; (8008738 <ES_WIFI_WaitServerConnection+0x23c>)
 8008692:	2000      	movs	r0, #0
 8008694:	f003 ff3e 	bl	800c514 <strtok>
 8008698:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); //remote port
 800869a:	4927      	ldr	r1, [pc, #156]	; (8008738 <ES_WIFI_WaitServerConnection+0x23c>)
 800869c:	2000      	movs	r0, #0
 800869e:	f003 ff39 	bl	800c514 <strtok>
 80086a2:	6178      	str	r0, [r7, #20]
        conn->RemotePort=ParseNumber(ptr,0);
 80086a4:	2100      	movs	r1, #0
 80086a6:	6978      	ldr	r0, [r7, #20]
 80086a8:	f7ff f9d2 	bl	8007a50 <ParseNumber>
 80086ac:	4603      	mov	r3, r0
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	805a      	strh	r2, [r3, #2]
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	e025      	b.n	8008704 <ES_WIFI_WaitServerConnection+0x208>
      }
    }
    else
    {
      DEBUG("P? command failed %s\n", Obj->CmdData);
 80086b8:	f240 7264 	movw	r2, #1892	; 0x764
 80086bc:	4918      	ldr	r1, [pc, #96]	; (8008720 <ES_WIFI_WaitServerConnection+0x224>)
 80086be:	4819      	ldr	r0, [pc, #100]	; (8008724 <ES_WIFI_WaitServerConnection+0x228>)
 80086c0:	f003 fe3c 	bl	800c33c <iprintf>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80086ca:	4619      	mov	r1, r3
 80086cc:	481b      	ldr	r0, [pc, #108]	; (800873c <ES_WIFI_WaitServerConnection+0x240>)
 80086ce:	f003 fe35 	bl	800c33c <iprintf>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
 80086d2:	2302      	movs	r3, #2
 80086d4:	e016      	b.n	8008704 <ES_WIFI_WaitServerConnection+0x208>
    }

    UNLOCK_WIFI();
    Obj->fops.IO_Delay(100);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80086dc:	2064      	movs	r0, #100	; 0x64
 80086de:	4798      	blx	r3
    LOCK_WIFI();
    t = HAL_GetTick();
 80086e0:	f7f9 fb18 	bl	8001d14 <HAL_GetTick>
 80086e4:	61b8      	str	r0, [r7, #24]
  }
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f43f af1d 	beq.w	8008528 <ES_WIFI_WaitServerConnection+0x2c>
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	f4ff af18 	bcc.w	8008528 <ES_WIFI_WaitServerConnection+0x2c>
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	429a      	cmp	r2, r3
 80086fe:	f4ff af13 	bcc.w	8008528 <ES_WIFI_WaitServerConnection+0x2c>
  return ES_WIFI_STATUS_TIMEOUT;
 8008702:	2303      	movs	r3, #3
}
 8008704:	4618      	mov	r0, r3
 8008706:	3728      	adds	r7, #40	; 0x28
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	0800ddd0 	.word	0x0800ddd0
 8008710:	0800df24 	.word	0x0800df24
 8008714:	0800df2c 	.word	0x0800df2c
 8008718:	0800df34 	.word	0x0800df34
 800871c:	0800df40 	.word	0x0800df40
 8008720:	0800df50 	.word	0x0800df50
 8008724:	0800df6c 	.word	0x0800df6c
 8008728:	0800df74 	.word	0x0800df74
 800872c:	0800df8c 	.word	0x0800df8c
 8008730:	0800dfa4 	.word	0x0800dfa4
 8008734:	0800dfa8 	.word	0x0800dfa8
 8008738:	0800dd90 	.word	0x0800dd90
 800873c:	0800dfb8 	.word	0x0800dfb8

08008740 <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008750:	683a      	ldr	r2, [r7, #0]
 8008752:	4925      	ldr	r1, [pc, #148]	; (80087e8 <ES_WIFI_CloseServerConnection+0xa8>)
 8008754:	4618      	mov	r0, r3
 8008756:	f003 fe7f 	bl	800c458 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008766:	461a      	mov	r2, r3
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7ff fb47 	bl	8007dfc <AT_ExecuteCommand>
 800876e:	4603      	mov	r3, r0
 8008770:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8008772:	7bfb      	ldrb	r3, [r7, #15]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00e      	beq.n	8008796 <ES_WIFI_CloseServerConnection+0x56>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
 8008778:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800877c:	491b      	ldr	r1, [pc, #108]	; (80087ec <ES_WIFI_CloseServerConnection+0xac>)
 800877e:	481c      	ldr	r0, [pc, #112]	; (80087f0 <ES_WIFI_CloseServerConnection+0xb0>)
 8008780:	f003 fddc 	bl	800c33c <iprintf>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800878a:	4619      	mov	r1, r3
 800878c:	4819      	ldr	r0, [pc, #100]	; (80087f4 <ES_WIFI_CloseServerConnection+0xb4>)
 800878e:	f003 fdd5 	bl	800c33c <iprintf>
    UNLOCK_WIFI();
    return ret;
 8008792:	7bfb      	ldrb	r3, [r7, #15]
 8008794:	e023      	b.n	80087de <ES_WIFI_CloseServerConnection+0x9e>
  }

  sprintf((char*)Obj->CmdData,"P5=10\r");
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800879c:	4916      	ldr	r1, [pc, #88]	; (80087f8 <ES_WIFI_CloseServerConnection+0xb8>)
 800879e:	4618      	mov	r0, r3
 80087a0:	f003 fe5a 	bl	800c458 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80087b0:	461a      	mov	r2, r3
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7ff fb22 	bl	8007dfc <AT_ExecuteCommand>
 80087b8:	4603      	mov	r3, r0
 80087ba:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00c      	beq.n	80087dc <ES_WIFI_CloseServerConnection+0x9c>
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
 80087c2:	f240 7289 	movw	r2, #1929	; 0x789
 80087c6:	4909      	ldr	r1, [pc, #36]	; (80087ec <ES_WIFI_CloseServerConnection+0xac>)
 80087c8:	4809      	ldr	r0, [pc, #36]	; (80087f0 <ES_WIFI_CloseServerConnection+0xb0>)
 80087ca:	f003 fdb7 	bl	800c33c <iprintf>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80087d4:	4619      	mov	r1, r3
 80087d6:	4809      	ldr	r0, [pc, #36]	; (80087fc <ES_WIFI_CloseServerConnection+0xbc>)
 80087d8:	f003 fdb0 	bl	800c33c <iprintf>
  }

  UNLOCK_WIFI();
  return ret;
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	0800dec0 	.word	0x0800dec0
 80087ec:	0800df50 	.word	0x0800df50
 80087f0:	0800df6c 	.word	0x0800df6c
 80087f4:	0800dfd0 	.word	0x0800dfd0
 80087f8:	0800dfec 	.word	0x0800dfec
 80087fc:	0800dff4 	.word	0x0800dff4

08008800 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	4926      	ldr	r1, [pc, #152]	; (80088ac <ES_WIFI_StopServerSingleConn+0xac>)
 8008814:	4618      	mov	r0, r3
 8008816:	f003 fe1f 	bl	800c458 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008826:	461a      	mov	r2, r3
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7ff fae7 	bl	8007dfc <AT_ExecuteCommand>
 800882e:	4603      	mov	r3, r0
 8008830:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8008832:	7bfb      	ldrb	r3, [r7, #15]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00e      	beq.n	8008856 <ES_WIFI_StopServerSingleConn+0x56>
  {
    DEBUG("Selecting socket failed: %s\n", Obj->CmdData);
 8008838:	f240 729f 	movw	r2, #1951	; 0x79f
 800883c:	491c      	ldr	r1, [pc, #112]	; (80088b0 <ES_WIFI_StopServerSingleConn+0xb0>)
 800883e:	481d      	ldr	r0, [pc, #116]	; (80088b4 <ES_WIFI_StopServerSingleConn+0xb4>)
 8008840:	f003 fd7c 	bl	800c33c <iprintf>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800884a:	4619      	mov	r1, r3
 800884c:	481a      	ldr	r0, [pc, #104]	; (80088b8 <ES_WIFI_StopServerSingleConn+0xb8>)
 800884e:	f003 fd75 	bl	800c33c <iprintf>
    UNLOCK_WIFI();
    return ret;
 8008852:	7bfb      	ldrb	r3, [r7, #15]
 8008854:	e025      	b.n	80088a2 <ES_WIFI_StopServerSingleConn+0xa2>
  }

  sprintf((char*)Obj->CmdData,"P5=0\r");
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800885c:	4917      	ldr	r1, [pc, #92]	; (80088bc <ES_WIFI_StopServerSingleConn+0xbc>)
 800885e:	4618      	mov	r0, r3
 8008860:	f003 fdfa 	bl	800c458 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008870:	461a      	mov	r2, r3
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7ff fac2 	bl	8007dfc <AT_ExecuteCommand>
 8008878:	4603      	mov	r3, r0
 800887a:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 800887c:	7bfb      	ldrb	r3, [r7, #15]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00e      	beq.n	80088a0 <ES_WIFI_StopServerSingleConn+0xa0>
  {
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
 8008882:	f44f 62f5 	mov.w	r2, #1960	; 0x7a8
 8008886:	490a      	ldr	r1, [pc, #40]	; (80088b0 <ES_WIFI_StopServerSingleConn+0xb0>)
 8008888:	480a      	ldr	r0, [pc, #40]	; (80088b4 <ES_WIFI_StopServerSingleConn+0xb4>)
 800888a:	f003 fd57 	bl	800c33c <iprintf>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008894:	4619      	mov	r1, r3
 8008896:	480a      	ldr	r0, [pc, #40]	; (80088c0 <ES_WIFI_StopServerSingleConn+0xc0>)
 8008898:	f003 fd50 	bl	800c33c <iprintf>
    UNLOCK_WIFI();
    return ret;
 800889c:	7bfb      	ldrb	r3, [r7, #15]
 800889e:	e000      	b.n	80088a2 <ES_WIFI_StopServerSingleConn+0xa2>
  }

  UNLOCK_WIFI();
  return ret;
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	0800dec0 	.word	0x0800dec0
 80088b0:	0800df50 	.word	0x0800df50
 80088b4:	0800df6c 	.word	0x0800df6c
 80088b8:	0800e00c 	.word	0x0800e00c
 80088bc:	0800e02c 	.word	0x0800e02c
 80088c0:	0800e034 	.word	0x0800e034

080088c4 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af02      	add	r7, sp, #8
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	607a      	str	r2, [r7, #4]
 80088ce:	461a      	mov	r2, r3
 80088d0:	460b      	mov	r3, r1
 80088d2:	72fb      	strb	r3, [r7, #11]
 80088d4:	4613      	mov	r3, r2
 80088d6:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80088d8:	2302      	movs	r3, #2
 80088da:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d102      	bne.n	80088e8 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80088e2:	2301      	movs	r3, #1
 80088e4:	617b      	str	r3, [r7, #20]
 80088e6:	e001      	b.n	80088ec <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 80088ec:	893b      	ldrh	r3, [r7, #8]
 80088ee:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80088f2:	d302      	bcc.n	80088fa <ES_WIFI_SendData+0x36>
 80088f4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80088f8:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 80088fa:	6a3b      	ldr	r3, [r7, #32]
 80088fc:	893a      	ldrh	r2, [r7, #8]
 80088fe:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008906:	7afa      	ldrb	r2, [r7, #11]
 8008908:	4942      	ldr	r1, [pc, #264]	; (8008a14 <ES_WIFI_SendData+0x150>)
 800890a:	4618      	mov	r0, r3
 800890c:	f003 fda4 	bl	800c458 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800891c:	461a      	mov	r2, r3
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f7ff fa6c 	bl	8007dfc <AT_ExecuteCommand>
 8008924:	4603      	mov	r3, r0
 8008926:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 8008928:	7cfb      	ldrb	r3, [r7, #19]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d15e      	bne.n	80089ec <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	4938      	ldr	r1, [pc, #224]	; (8008a18 <ES_WIFI_SendData+0x154>)
 8008938:	4618      	mov	r0, r3
 800893a:	f003 fd8d 	bl	800c458 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800894a:	461a      	mov	r2, r3
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f7ff fa55 	bl	8007dfc <AT_ExecuteCommand>
 8008952:	4603      	mov	r3, r0
 8008954:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8008956:	7cfb      	ldrb	r3, [r7, #19]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d13d      	bne.n	80089d8 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008962:	893a      	ldrh	r2, [r7, #8]
 8008964:	492d      	ldr	r1, [pc, #180]	; (8008a1c <ES_WIFI_SendData+0x158>)
 8008966:	4618      	mov	r0, r3
 8008968:	f003 fd76 	bl	800c458 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008978:	893a      	ldrh	r2, [r7, #8]
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	4613      	mov	r3, r2
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f7ff faa1 	bl	8007ec8 <AT_RequestSendData>
 8008986:	4603      	mov	r3, r0
 8008988:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 800898a:	7cfb      	ldrb	r3, [r7, #19]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d119      	bne.n	80089c4 <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008996:	4922      	ldr	r1, [pc, #136]	; (8008a20 <ES_WIFI_SendData+0x15c>)
 8008998:	4618      	mov	r0, r3
 800899a:	f003 fda4 	bl	800c4e6 <strstr>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d02c      	beq.n	80089fe <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 80089a4:	f640 025c 	movw	r2, #2140	; 0x85c
 80089a8:	491e      	ldr	r1, [pc, #120]	; (8008a24 <ES_WIFI_SendData+0x160>)
 80089aa:	481f      	ldr	r0, [pc, #124]	; (8008a28 <ES_WIFI_SendData+0x164>)
 80089ac:	f003 fcc6 	bl	800c33c <iprintf>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80089b6:	4619      	mov	r1, r3
 80089b8:	481c      	ldr	r0, [pc, #112]	; (8008a2c <ES_WIFI_SendData+0x168>)
 80089ba:	f003 fcbf 	bl	800c33c <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 80089be:	2302      	movs	r3, #2
 80089c0:	74fb      	strb	r3, [r7, #19]
 80089c2:	e01c      	b.n	80089fe <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 80089c4:	f640 0262 	movw	r2, #2146	; 0x862
 80089c8:	4916      	ldr	r1, [pc, #88]	; (8008a24 <ES_WIFI_SendData+0x160>)
 80089ca:	4817      	ldr	r0, [pc, #92]	; (8008a28 <ES_WIFI_SendData+0x164>)
 80089cc:	f003 fcb6 	bl	800c33c <iprintf>
 80089d0:	4817      	ldr	r0, [pc, #92]	; (8008a30 <ES_WIFI_SendData+0x16c>)
 80089d2:	f003 fd39 	bl	800c448 <puts>
 80089d6:	e012      	b.n	80089fe <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 80089d8:	f640 0267 	movw	r2, #2151	; 0x867
 80089dc:	4911      	ldr	r1, [pc, #68]	; (8008a24 <ES_WIFI_SendData+0x160>)
 80089de:	4812      	ldr	r0, [pc, #72]	; (8008a28 <ES_WIFI_SendData+0x164>)
 80089e0:	f003 fcac 	bl	800c33c <iprintf>
 80089e4:	4813      	ldr	r0, [pc, #76]	; (8008a34 <ES_WIFI_SendData+0x170>)
 80089e6:	f003 fd2f 	bl	800c448 <puts>
 80089ea:	e008      	b.n	80089fe <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 80089ec:	f640 026c 	movw	r2, #2156	; 0x86c
 80089f0:	490c      	ldr	r1, [pc, #48]	; (8008a24 <ES_WIFI_SendData+0x160>)
 80089f2:	480d      	ldr	r0, [pc, #52]	; (8008a28 <ES_WIFI_SendData+0x164>)
 80089f4:	f003 fca2 	bl	800c33c <iprintf>
 80089f8:	480f      	ldr	r0, [pc, #60]	; (8008a38 <ES_WIFI_SendData+0x174>)
 80089fa:	f003 fd25 	bl	800c448 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80089fe:	7cfb      	ldrb	r3, [r7, #19]
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d102      	bne.n	8008a0a <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	2200      	movs	r2, #0
 8008a08:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 8008a0a:	7cfb      	ldrb	r3, [r7, #19]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3718      	adds	r7, #24
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	0800dec0 	.word	0x0800dec0
 8008a18:	0800e078 	.word	0x0800e078
 8008a1c:	0800e080 	.word	0x0800e080
 8008a20:	0800e08c 	.word	0x0800e08c
 8008a24:	0800df50 	.word	0x0800df50
 8008a28:	0800df6c 	.word	0x0800df6c
 8008a2c:	0800e094 	.word	0x0800e094
 8008a30:	0800e0b0 	.word	0x0800e0b0
 8008a34:	0800e0cc 	.word	0x0800e0cc
 8008a38:	0800e0e0 	.word	0x0800e0e0

08008a3c <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b088      	sub	sp, #32
 8008a40:	af02      	add	r7, sp, #8
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	607a      	str	r2, [r7, #4]
 8008a46:	461a      	mov	r2, r3
 8008a48:	460b      	mov	r3, r1
 8008a4a:	72fb      	strb	r3, [r7, #11]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008a50:	2302      	movs	r3, #2
 8008a52:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d102      	bne.n	8008a60 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	617b      	str	r3, [r7, #20]
 8008a5e:	e001      	b.n	8008a64 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8008a64:	893b      	ldrh	r3, [r7, #8]
 8008a66:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8008a6a:	f200 808b 	bhi.w	8008b84 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008a74:	7afa      	ldrb	r2, [r7, #11]
 8008a76:	4946      	ldr	r1, [pc, #280]	; (8008b90 <ES_WIFI_ReceiveData+0x154>)
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f003 fced 	bl	800c458 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f7ff f9b5 	bl	8007dfc <AT_ExecuteCommand>
 8008a92:	4603      	mov	r3, r0
 8008a94:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8008a96:	7cfb      	ldrb	r3, [r7, #19]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d165      	bne.n	8008b68 <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008aa2:	893a      	ldrh	r2, [r7, #8]
 8008aa4:	493b      	ldr	r1, [pc, #236]	; (8008b94 <ES_WIFI_ReceiveData+0x158>)
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f003 fcd6 	bl	800c458 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008ab8:	461a      	mov	r2, r3
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f7ff f99e 	bl	8007dfc <AT_ExecuteCommand>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 8008ac4:	7cfb      	ldrb	r3, [r7, #19]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d141      	bne.n	8008b4e <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	4931      	ldr	r1, [pc, #196]	; (8008b98 <ES_WIFI_ReceiveData+0x15c>)
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f003 fcbf 	bl	800c458 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f7ff f987 	bl	8007dfc <AT_ExecuteCommand>
 8008aee:	4603      	mov	r3, r0
 8008af0:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 8008af2:	7cfb      	ldrb	r3, [r7, #19]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d120      	bne.n	8008b3a <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008afe:	4927      	ldr	r1, [pc, #156]	; (8008b9c <ES_WIFI_ReceiveData+0x160>)
 8008b00:	4618      	mov	r0, r3
 8008b02:	f003 fca9 	bl	800c458 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008b0c:	893a      	ldrh	r2, [r7, #8]
 8008b0e:	6a3b      	ldr	r3, [r7, #32]
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	4613      	mov	r3, r2
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f7ff fa4c 	bl	8007fb4 <AT_RequestReceiveData>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8008b20:	7cfb      	ldrb	r3, [r7, #19]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d02e      	beq.n	8008b84 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 8008b26:	f640 02fd 	movw	r2, #2301	; 0x8fd
 8008b2a:	491d      	ldr	r1, [pc, #116]	; (8008ba0 <ES_WIFI_ReceiveData+0x164>)
 8008b2c:	481d      	ldr	r0, [pc, #116]	; (8008ba4 <ES_WIFI_ReceiveData+0x168>)
 8008b2e:	f003 fc05 	bl	800c33c <iprintf>
 8008b32:	481d      	ldr	r0, [pc, #116]	; (8008ba8 <ES_WIFI_ReceiveData+0x16c>)
 8008b34:	f003 fc88 	bl	800c448 <puts>
 8008b38:	e024      	b.n	8008b84 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 8008b3a:	f640 1202 	movw	r2, #2306	; 0x902
 8008b3e:	4918      	ldr	r1, [pc, #96]	; (8008ba0 <ES_WIFI_ReceiveData+0x164>)
 8008b40:	4818      	ldr	r0, [pc, #96]	; (8008ba4 <ES_WIFI_ReceiveData+0x168>)
 8008b42:	f003 fbfb 	bl	800c33c <iprintf>
 8008b46:	4819      	ldr	r0, [pc, #100]	; (8008bac <ES_WIFI_ReceiveData+0x170>)
 8008b48:	f003 fc7e 	bl	800c448 <puts>
 8008b4c:	e01a      	b.n	8008b84 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 8008b4e:	f640 1207 	movw	r2, #2311	; 0x907
 8008b52:	4913      	ldr	r1, [pc, #76]	; (8008ba0 <ES_WIFI_ReceiveData+0x164>)
 8008b54:	4813      	ldr	r0, [pc, #76]	; (8008ba4 <ES_WIFI_ReceiveData+0x168>)
 8008b56:	f003 fbf1 	bl	800c33c <iprintf>
 8008b5a:	4815      	ldr	r0, [pc, #84]	; (8008bb0 <ES_WIFI_ReceiveData+0x174>)
 8008b5c:	f003 fc74 	bl	800c448 <puts>
        *Receivedlen = 0;
 8008b60:	6a3b      	ldr	r3, [r7, #32]
 8008b62:	2200      	movs	r2, #0
 8008b64:	801a      	strh	r2, [r3, #0]
 8008b66:	e00d      	b.n	8008b84 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 8008b68:	f640 120d 	movw	r2, #2317	; 0x90d
 8008b6c:	490c      	ldr	r1, [pc, #48]	; (8008ba0 <ES_WIFI_ReceiveData+0x164>)
 8008b6e:	480d      	ldr	r0, [pc, #52]	; (8008ba4 <ES_WIFI_ReceiveData+0x168>)
 8008b70:	f003 fbe4 	bl	800c33c <iprintf>
 8008b74:	480f      	ldr	r0, [pc, #60]	; (8008bb4 <ES_WIFI_ReceiveData+0x178>)
 8008b76:	f003 fc67 	bl	800c448 <puts>
      issue15++;
 8008b7a:	4b0f      	ldr	r3, [pc, #60]	; (8008bb8 <ES_WIFI_ReceiveData+0x17c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	4a0d      	ldr	r2, [pc, #52]	; (8008bb8 <ES_WIFI_ReceiveData+0x17c>)
 8008b82:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 8008b84:	7cfb      	ldrb	r3, [r7, #19]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3718      	adds	r7, #24
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	0800dec0 	.word	0x0800dec0
 8008b94:	0800e104 	.word	0x0800e104
 8008b98:	0800e10c 	.word	0x0800e10c
 8008b9c:	0800e114 	.word	0x0800e114
 8008ba0:	0800df50 	.word	0x0800df50
 8008ba4:	0800df6c 	.word	0x0800df6c
 8008ba8:	0800e118 	.word	0x0800e118
 8008bac:	0800e138 	.word	0x0800e138
 8008bb0:	0800e150 	.word	0x0800e150
 8008bb4:	0800e170 	.word	0x0800e170
 8008bb8:	2000104c 	.word	0x2000104c

08008bbc <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b08c      	sub	sp, #48	; 0x30
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8008bc4:	4b57      	ldr	r3, [pc, #348]	; (8008d24 <SPI_WIFI_MspInit+0x168>)
 8008bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc8:	4a56      	ldr	r2, [pc, #344]	; (8008d24 <SPI_WIFI_MspInit+0x168>)
 8008bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bce:	6593      	str	r3, [r2, #88]	; 0x58
 8008bd0:	4b54      	ldr	r3, [pc, #336]	; (8008d24 <SPI_WIFI_MspInit+0x168>)
 8008bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bd8:	61bb      	str	r3, [r7, #24]
 8008bda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008bdc:	4b51      	ldr	r3, [pc, #324]	; (8008d24 <SPI_WIFI_MspInit+0x168>)
 8008bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008be0:	4a50      	ldr	r2, [pc, #320]	; (8008d24 <SPI_WIFI_MspInit+0x168>)
 8008be2:	f043 0302 	orr.w	r3, r3, #2
 8008be6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008be8:	4b4e      	ldr	r3, [pc, #312]	; (8008d24 <SPI_WIFI_MspInit+0x168>)
 8008bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bec:	f003 0302 	and.w	r3, r3, #2
 8008bf0:	617b      	str	r3, [r7, #20]
 8008bf2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008bf4:	4b4b      	ldr	r3, [pc, #300]	; (8008d24 <SPI_WIFI_MspInit+0x168>)
 8008bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bf8:	4a4a      	ldr	r2, [pc, #296]	; (8008d24 <SPI_WIFI_MspInit+0x168>)
 8008bfa:	f043 0304 	orr.w	r3, r3, #4
 8008bfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008c00:	4b48      	ldr	r3, [pc, #288]	; (8008d24 <SPI_WIFI_MspInit+0x168>)
 8008c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c04:	f003 0304 	and.w	r3, r3, #4
 8008c08:	613b      	str	r3, [r7, #16]
 8008c0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008c0c:	4b45      	ldr	r3, [pc, #276]	; (8008d24 <SPI_WIFI_MspInit+0x168>)
 8008c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c10:	4a44      	ldr	r2, [pc, #272]	; (8008d24 <SPI_WIFI_MspInit+0x168>)
 8008c12:	f043 0310 	orr.w	r3, r3, #16
 8008c16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008c18:	4b42      	ldr	r3, [pc, #264]	; (8008d24 <SPI_WIFI_MspInit+0x168>)
 8008c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c1c:	f003 0310 	and.w	r3, r3, #16
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8008c24:	2200      	movs	r2, #0
 8008c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008c2a:	483f      	ldr	r0, [pc, #252]	; (8008d28 <SPI_WIFI_MspInit+0x16c>)
 8008c2c:	f7fa fd60 	bl	80036f0 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8008c30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c34:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8008c36:	2301      	movs	r3, #1
 8008c38:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8008c42:	f107 031c 	add.w	r3, r7, #28
 8008c46:	4619      	mov	r1, r3
 8008c48:	4837      	ldr	r0, [pc, #220]	; (8008d28 <SPI_WIFI_MspInit+0x16c>)
 8008c4a:	f7fa fa9b 	bl	8003184 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8008c4e:	2302      	movs	r3, #2
 8008c50:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8008c52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008c56:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8008c60:	f107 031c 	add.w	r3, r7, #28
 8008c64:	4619      	mov	r1, r3
 8008c66:	4831      	ldr	r0, [pc, #196]	; (8008d2c <SPI_WIFI_MspInit+0x170>)
 8008c68:	f7fa fa8c 	bl	8003184 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8008c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c70:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8008c72:	2301      	movs	r3, #1
 8008c74:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008c76:	2300      	movs	r3, #0
 8008c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8008c82:	f107 031c 	add.w	r3, r7, #28
 8008c86:	4619      	mov	r1, r3
 8008c88:	4828      	ldr	r0, [pc, #160]	; (8008d2c <SPI_WIFI_MspInit+0x170>)
 8008c8a:	f7fa fa7b 	bl	8003184 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8008c8e:	2201      	movs	r2, #1
 8008c90:	2101      	movs	r1, #1
 8008c92:	4826      	ldr	r0, [pc, #152]	; (8008d2c <SPI_WIFI_MspInit+0x170>)
 8008c94:	f7fa fd2c 	bl	80036f0 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8008ca8:	f107 031c 	add.w	r3, r7, #28
 8008cac:	4619      	mov	r1, r3
 8008cae:	481f      	ldr	r0, [pc, #124]	; (8008d2c <SPI_WIFI_MspInit+0x170>)
 8008cb0:	f7fa fa68 	bl	8003184 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8008cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cb8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8008cba:	2302      	movs	r3, #2
 8008cbc:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8008cc6:	2306      	movs	r3, #6
 8008cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8008cca:	f107 031c 	add.w	r3, r7, #28
 8008cce:	4619      	mov	r1, r3
 8008cd0:	4817      	ldr	r0, [pc, #92]	; (8008d30 <SPI_WIFI_MspInit+0x174>)
 8008cd2:	f7fa fa57 	bl	8003184 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8008cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cda:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8008cdc:	2302      	movs	r3, #2
 8008cde:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8008ce8:	2306      	movs	r3, #6
 8008cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8008cec:	f107 031c 	add.w	r3, r7, #28
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	480f      	ldr	r0, [pc, #60]	; (8008d30 <SPI_WIFI_MspInit+0x174>)
 8008cf4:	f7fa fa46 	bl	8003184 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8008cf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cfc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8008cfe:	2302      	movs	r3, #2
 8008d00:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8008d02:	2301      	movs	r3, #1
 8008d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008d06:	2301      	movs	r3, #1
 8008d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8008d0a:	2306      	movs	r3, #6
 8008d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8008d0e:	f107 031c 	add.w	r3, r7, #28
 8008d12:	4619      	mov	r1, r3
 8008d14:	4806      	ldr	r0, [pc, #24]	; (8008d30 <SPI_WIFI_MspInit+0x174>)
 8008d16:	f7fa fa35 	bl	8003184 <HAL_GPIO_Init>
}
 8008d1a:	bf00      	nop
 8008d1c:	3730      	adds	r7, #48	; 0x30
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	40021000 	.word	0x40021000
 8008d28:	48000400 	.word	0x48000400
 8008d2c:	48001000 	.word	0x48001000
 8008d30:	48000800 	.word	0x48000800

08008d34 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8008d42:	88fb      	ldrh	r3, [r7, #6]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d145      	bne.n	8008dd4 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8008d48:	4b27      	ldr	r3, [pc, #156]	; (8008de8 <SPI_WIFI_Init+0xb4>)
 8008d4a:	4a28      	ldr	r2, [pc, #160]	; (8008dec <SPI_WIFI_Init+0xb8>)
 8008d4c:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8008d4e:	4826      	ldr	r0, [pc, #152]	; (8008de8 <SPI_WIFI_Init+0xb4>)
 8008d50:	f7ff ff34 	bl	8008bbc <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8008d54:	4b24      	ldr	r3, [pc, #144]	; (8008de8 <SPI_WIFI_Init+0xb4>)
 8008d56:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008d5a:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8008d5c:	4b22      	ldr	r3, [pc, #136]	; (8008de8 <SPI_WIFI_Init+0xb4>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8008d62:	4b21      	ldr	r3, [pc, #132]	; (8008de8 <SPI_WIFI_Init+0xb4>)
 8008d64:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008d68:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8008d6a:	4b1f      	ldr	r3, [pc, #124]	; (8008de8 <SPI_WIFI_Init+0xb4>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8008d70:	4b1d      	ldr	r3, [pc, #116]	; (8008de8 <SPI_WIFI_Init+0xb4>)
 8008d72:	2200      	movs	r2, #0
 8008d74:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8008d76:	4b1c      	ldr	r3, [pc, #112]	; (8008de8 <SPI_WIFI_Init+0xb4>)
 8008d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d7c:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8008d7e:	4b1a      	ldr	r3, [pc, #104]	; (8008de8 <SPI_WIFI_Init+0xb4>)
 8008d80:	2210      	movs	r2, #16
 8008d82:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8008d84:	4b18      	ldr	r3, [pc, #96]	; (8008de8 <SPI_WIFI_Init+0xb4>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8008d8a:	4b17      	ldr	r3, [pc, #92]	; (8008de8 <SPI_WIFI_Init+0xb4>)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8008d90:	4b15      	ldr	r3, [pc, #84]	; (8008de8 <SPI_WIFI_Init+0xb4>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8008d96:	4b14      	ldr	r3, [pc, #80]	; (8008de8 <SPI_WIFI_Init+0xb4>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8008d9c:	4812      	ldr	r0, [pc, #72]	; (8008de8 <SPI_WIFI_Init+0xb4>)
 8008d9e:	f7fc fb51 	bl	8005444 <HAL_SPI_Init>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d002      	beq.n	8008dae <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8008da8:	f04f 33ff 	mov.w	r3, #4294967295
 8008dac:	e018      	b.n	8008de0 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8008dae:	2200      	movs	r2, #0
 8008db0:	2100      	movs	r1, #0
 8008db2:	2007      	movs	r0, #7
 8008db4:	f7fa f861 	bl	8002e7a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8008db8:	2007      	movs	r0, #7
 8008dba:	f7fa f87a 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	2033      	movs	r0, #51	; 0x33
 8008dc4:	f7fa f859 	bl	8002e7a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8008dc8:	2033      	movs	r0, #51	; 0x33
 8008dca:	f7fa f872 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8008dce:	200a      	movs	r0, #10
 8008dd0:	f000 f9fe 	bl	80091d0 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8008dd4:	f000 f80c 	bl	8008df0 <SPI_WIFI_ResetModule>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73fb      	strb	r3, [r7, #15]

  return rc;
 8008ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	20001050 	.word	0x20001050
 8008dec:	40003c00 	.word	0x40003c00

08008df0 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8008df6:	f7f8 ff8d 	bl	8001d14 <HAL_GetTick>
 8008dfa:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8008e00:	2200      	movs	r2, #0
 8008e02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008e06:	4830      	ldr	r0, [pc, #192]	; (8008ec8 <SPI_WIFI_ResetModule+0xd8>)
 8008e08:	f7fa fc72 	bl	80036f0 <HAL_GPIO_WritePin>
 8008e0c:	200a      	movs	r0, #10
 8008e0e:	f7f8 ff8d 	bl	8001d2c <HAL_Delay>
 8008e12:	2201      	movs	r2, #1
 8008e14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008e18:	482b      	ldr	r0, [pc, #172]	; (8008ec8 <SPI_WIFI_ResetModule+0xd8>)
 8008e1a:	f7fa fc69 	bl	80036f0 <HAL_GPIO_WritePin>
 8008e1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008e22:	f7f8 ff83 	bl	8001d2c <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8008e26:	2200      	movs	r2, #0
 8008e28:	2101      	movs	r1, #1
 8008e2a:	4827      	ldr	r0, [pc, #156]	; (8008ec8 <SPI_WIFI_ResetModule+0xd8>)
 8008e2c:	f7fa fc60 	bl	80036f0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8008e30:	200f      	movs	r0, #15
 8008e32:	f000 f9cd 	bl	80091d0 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8008e36:	e020      	b.n	8008e7a <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
 8008e3a:	463a      	mov	r2, r7
 8008e3c:	18d1      	adds	r1, r2, r3
 8008e3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e42:	2201      	movs	r2, #1
 8008e44:	4821      	ldr	r0, [pc, #132]	; (8008ecc <SPI_WIFI_ResetModule+0xdc>)
 8008e46:	f7fc fbc8 	bl	80055da <HAL_SPI_Receive>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
 8008e50:	3302      	adds	r3, #2
 8008e52:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8008e54:	f7f8 ff5e 	bl	8001d14 <HAL_GetTick>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e62:	d202      	bcs.n	8008e6a <SPI_WIFI_ResetModule+0x7a>
 8008e64:	79fb      	ldrb	r3, [r7, #7]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d007      	beq.n	8008e7a <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	4816      	ldr	r0, [pc, #88]	; (8008ec8 <SPI_WIFI_ResetModule+0xd8>)
 8008e70:	f7fa fc3e 	bl	80036f0 <HAL_GPIO_WritePin>
      return -1;
 8008e74:	f04f 33ff 	mov.w	r3, #4294967295
 8008e78:	e021      	b.n	8008ebe <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8008e7a:	2102      	movs	r1, #2
 8008e7c:	4812      	ldr	r0, [pc, #72]	; (8008ec8 <SPI_WIFI_ResetModule+0xd8>)
 8008e7e:	f7fa fc1f 	bl	80036c0 <HAL_GPIO_ReadPin>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d0d7      	beq.n	8008e38 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 8008e88:	2201      	movs	r2, #1
 8008e8a:	2101      	movs	r1, #1
 8008e8c:	480e      	ldr	r0, [pc, #56]	; (8008ec8 <SPI_WIFI_ResetModule+0xd8>)
 8008e8e:	f7fa fc2f 	bl	80036f0 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8008e92:	783b      	ldrb	r3, [r7, #0]
 8008e94:	2b15      	cmp	r3, #21
 8008e96:	d10e      	bne.n	8008eb6 <SPI_WIFI_ResetModule+0xc6>
 8008e98:	787b      	ldrb	r3, [r7, #1]
 8008e9a:	2b15      	cmp	r3, #21
 8008e9c:	d10b      	bne.n	8008eb6 <SPI_WIFI_ResetModule+0xc6>
 8008e9e:	78bb      	ldrb	r3, [r7, #2]
 8008ea0:	2b0d      	cmp	r3, #13
 8008ea2:	d108      	bne.n	8008eb6 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8008ea4:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8008ea6:	2b0a      	cmp	r3, #10
 8008ea8:	d105      	bne.n	8008eb6 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8008eaa:	793b      	ldrb	r3, [r7, #4]
 8008eac:	2b3e      	cmp	r3, #62	; 0x3e
 8008eae:	d102      	bne.n	8008eb6 <SPI_WIFI_ResetModule+0xc6>
 8008eb0:	797b      	ldrb	r3, [r7, #5]
 8008eb2:	2b20      	cmp	r3, #32
 8008eb4:	d002      	beq.n	8008ebc <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8008eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8008eba:	e000      	b.n	8008ebe <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	48001000 	.word	0x48001000
 8008ecc:	20001050 	.word	0x20001050

08008ed0 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8008ed4:	4802      	ldr	r0, [pc, #8]	; (8008ee0 <SPI_WIFI_DeInit+0x10>)
 8008ed6:	f7fc fb58 	bl	800558a <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	20001050 	.word	0x20001050

08008ee4 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8008eec:	f7f8 ff12 	bl	8001d14 <HAL_GetTick>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8008ef4:	e00a      	b.n	8008f0c <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8008ef6:	f7f8 ff0d 	bl	8001d14 <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	1ad2      	subs	r2, r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d902      	bls.n	8008f0c <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8008f06:	f04f 33ff 	mov.w	r3, #4294967295
 8008f0a:	e007      	b.n	8008f1c <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8008f0c:	2102      	movs	r1, #2
 8008f0e:	4805      	ldr	r0, [pc, #20]	; (8008f24 <wait_cmddata_rdy_high+0x40>)
 8008f10:	f7fa fbd6 	bl	80036c0 <HAL_GPIO_ReadPin>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d1ed      	bne.n	8008ef6 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	48001000 	.word	0x48001000

08008f28 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8008f30:	f7f8 fef0 	bl	8001d14 <HAL_GetTick>
 8008f34:	4603      	mov	r3, r0
 8008f36:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8008f38:	e00a      	b.n	8008f50 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8008f3a:	f7f8 feeb 	bl	8001d14 <HAL_GetTick>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	1ad2      	subs	r2, r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d902      	bls.n	8008f50 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8008f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f4e:	e004      	b.n	8008f5a <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8008f50:	4b04      	ldr	r3, [pc, #16]	; (8008f64 <wait_cmddata_rdy_rising_event+0x3c>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d0f0      	beq.n	8008f3a <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8008f58:	2300      	movs	r3, #0
#endif
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	200010bc 	.word	0x200010bc

08008f68 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8008f70:	f7f8 fed0 	bl	8001d14 <HAL_GetTick>
 8008f74:	4603      	mov	r3, r0
 8008f76:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8008f78:	e00a      	b.n	8008f90 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8008f7a:	f7f8 fecb 	bl	8001d14 <HAL_GetTick>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	1ad2      	subs	r2, r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d902      	bls.n	8008f90 <wait_spi_rx_event+0x28>
    {
      return -1;
 8008f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f8e:	e004      	b.n	8008f9a <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8008f90:	4b04      	ldr	r3, [pc, #16]	; (8008fa4 <wait_spi_rx_event+0x3c>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d0f0      	beq.n	8008f7a <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8008f98:	2300      	movs	r3, #0
#endif
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	200010b4 	.word	0x200010b4

08008fa8 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8008fb0:	f7f8 feb0 	bl	8001d14 <HAL_GetTick>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8008fb8:	e00a      	b.n	8008fd0 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8008fba:	f7f8 feab 	bl	8001d14 <HAL_GetTick>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	1ad2      	subs	r2, r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d902      	bls.n	8008fd0 <wait_spi_tx_event+0x28>
    {
      return -1;
 8008fca:	f04f 33ff 	mov.w	r3, #4294967295
 8008fce:	e004      	b.n	8008fda <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8008fd0:	4b04      	ldr	r3, [pc, #16]	; (8008fe4 <wait_spi_tx_event+0x3c>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d0f0      	beq.n	8008fba <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8008fd8:	2300      	movs	r3, #0
#endif
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	200010b8 	.word	0x200010b8

08008fe8 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	607a      	str	r2, [r7, #4]
 8008ff4:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	2101      	movs	r1, #1
 8008ffe:	4834      	ldr	r0, [pc, #208]	; (80090d0 <SPI_WIFI_ReceiveData+0xe8>)
 8009000:	f7fa fb76 	bl	80036f0 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8009004:	2003      	movs	r0, #3
 8009006:	f000 f8e3 	bl	80091d0 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4618      	mov	r0, r3
 800900e:	f7ff ff8b 	bl	8008f28 <wait_cmddata_rdy_rising_event>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	da02      	bge.n	800901e <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8009018:	f06f 0302 	mvn.w	r3, #2
 800901c:	e054      	b.n	80090c8 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800901e:	2200      	movs	r2, #0
 8009020:	2101      	movs	r1, #1
 8009022:	482b      	ldr	r0, [pc, #172]	; (80090d0 <SPI_WIFI_ReceiveData+0xe8>)
 8009024:	f7fa fb64 	bl	80036f0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8009028:	200f      	movs	r0, #15
 800902a:	f000 f8d1 	bl	80091d0 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800902e:	e03d      	b.n	80090ac <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8009030:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009034:	897b      	ldrh	r3, [r7, #10]
 8009036:	429a      	cmp	r2, r3
 8009038:	db02      	blt.n	8009040 <SPI_WIFI_ReceiveData+0x58>
 800903a:	897b      	ldrh	r3, [r7, #10]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d13c      	bne.n	80090ba <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8009040:	4b24      	ldr	r3, [pc, #144]	; (80090d4 <SPI_WIFI_ReceiveData+0xec>)
 8009042:	2201      	movs	r2, #1
 8009044:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8009046:	f107 0314 	add.w	r3, r7, #20
 800904a:	2201      	movs	r2, #1
 800904c:	4619      	mov	r1, r3
 800904e:	4822      	ldr	r0, [pc, #136]	; (80090d8 <SPI_WIFI_ReceiveData+0xf0>)
 8009050:	f7fc fe94 	bl	8005d7c <HAL_SPI_Receive_IT>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d007      	beq.n	800906a <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800905a:	2201      	movs	r2, #1
 800905c:	2101      	movs	r1, #1
 800905e:	481c      	ldr	r0, [pc, #112]	; (80090d0 <SPI_WIFI_ReceiveData+0xe8>)
 8009060:	f7fa fb46 	bl	80036f0 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8009064:	f04f 33ff 	mov.w	r3, #4294967295
 8009068:	e02e      	b.n	80090c8 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4618      	mov	r0, r3
 800906e:	f7ff ff7b 	bl	8008f68 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8009072:	7d3a      	ldrb	r2, [r7, #20]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	3301      	adds	r3, #1
 800907c:	7d7a      	ldrb	r2, [r7, #21]
 800907e:	701a      	strb	r2, [r3, #0]
      length += 2;
 8009080:	8afb      	ldrh	r3, [r7, #22]
 8009082:	3302      	adds	r3, #2
 8009084:	b29b      	uxth	r3, r3
 8009086:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	3302      	adds	r3, #2
 800908c:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 800908e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009092:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009096:	db09      	blt.n	80090ac <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8009098:	2201      	movs	r2, #1
 800909a:	2101      	movs	r1, #1
 800909c:	480c      	ldr	r0, [pc, #48]	; (80090d0 <SPI_WIFI_ReceiveData+0xe8>)
 800909e:	f7fa fb27 	bl	80036f0 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 80090a2:	f7ff fea5 	bl	8008df0 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80090a6:	f06f 0303 	mvn.w	r3, #3
 80090aa:	e00d      	b.n	80090c8 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 80090ac:	2102      	movs	r1, #2
 80090ae:	4808      	ldr	r0, [pc, #32]	; (80090d0 <SPI_WIFI_ReceiveData+0xe8>)
 80090b0:	f7fa fb06 	bl	80036c0 <HAL_GPIO_ReadPin>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d0ba      	beq.n	8009030 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 80090ba:	2201      	movs	r2, #1
 80090bc:	2101      	movs	r1, #1
 80090be:	4804      	ldr	r0, [pc, #16]	; (80090d0 <SPI_WIFI_ReceiveData+0xe8>)
 80090c0:	f7fa fb16 	bl	80036f0 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 80090c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	48001000 	.word	0x48001000
 80090d4:	200010b4 	.word	0x200010b4
 80090d8:	20001050 	.word	0x20001050

080090dc <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	460b      	mov	r3, r1
 80090e6:	607a      	str	r2, [r7, #4]
 80090e8:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7ff fef9 	bl	8008ee4 <wait_cmddata_rdy_high>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	da02      	bge.n	80090fe <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 80090f8:	f04f 33ff 	mov.w	r3, #4294967295
 80090fc:	e04f      	b.n	800919e <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 80090fe:	4b2a      	ldr	r3, [pc, #168]	; (80091a8 <SPI_WIFI_SendData+0xcc>)
 8009100:	2201      	movs	r2, #1
 8009102:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8009104:	2200      	movs	r2, #0
 8009106:	2101      	movs	r1, #1
 8009108:	4828      	ldr	r0, [pc, #160]	; (80091ac <SPI_WIFI_SendData+0xd0>)
 800910a:	f7fa faf1 	bl	80036f0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800910e:	200f      	movs	r0, #15
 8009110:	f000 f85e 	bl	80091d0 <SPI_WIFI_DelayUs>
  if (len > 1)
 8009114:	897b      	ldrh	r3, [r7, #10]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d919      	bls.n	800914e <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 800911a:	4b25      	ldr	r3, [pc, #148]	; (80091b0 <SPI_WIFI_SendData+0xd4>)
 800911c:	2201      	movs	r2, #1
 800911e:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8009120:	897b      	ldrh	r3, [r7, #10]
 8009122:	085b      	lsrs	r3, r3, #1
 8009124:	b29b      	uxth	r3, r3
 8009126:	461a      	mov	r2, r3
 8009128:	68f9      	ldr	r1, [r7, #12]
 800912a:	4822      	ldr	r0, [pc, #136]	; (80091b4 <SPI_WIFI_SendData+0xd8>)
 800912c:	f7fc fd98 	bl	8005c60 <HAL_SPI_Transmit_IT>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d007      	beq.n	8009146 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8009136:	2201      	movs	r2, #1
 8009138:	2101      	movs	r1, #1
 800913a:	481c      	ldr	r0, [pc, #112]	; (80091ac <SPI_WIFI_SendData+0xd0>)
 800913c:	f7fa fad8 	bl	80036f0 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8009140:	f04f 33ff 	mov.w	r3, #4294967295
 8009144:	e02b      	b.n	800919e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4618      	mov	r0, r3
 800914a:	f7ff ff2d 	bl	8008fa8 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 800914e:	897b      	ldrh	r3, [r7, #10]
 8009150:	f003 0301 	and.w	r3, r3, #1
 8009154:	2b00      	cmp	r3, #0
 8009156:	d020      	beq.n	800919a <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8009158:	897b      	ldrh	r3, [r7, #10]
 800915a:	3b01      	subs	r3, #1
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	4413      	add	r3, r2
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8009164:	230a      	movs	r3, #10
 8009166:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8009168:	4b11      	ldr	r3, [pc, #68]	; (80091b0 <SPI_WIFI_SendData+0xd4>)
 800916a:	2201      	movs	r2, #1
 800916c:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800916e:	f107 0314 	add.w	r3, r7, #20
 8009172:	2201      	movs	r2, #1
 8009174:	4619      	mov	r1, r3
 8009176:	480f      	ldr	r0, [pc, #60]	; (80091b4 <SPI_WIFI_SendData+0xd8>)
 8009178:	f7fc fd72 	bl	8005c60 <HAL_SPI_Transmit_IT>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d007      	beq.n	8009192 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8009182:	2201      	movs	r2, #1
 8009184:	2101      	movs	r1, #1
 8009186:	4809      	ldr	r0, [pc, #36]	; (80091ac <SPI_WIFI_SendData+0xd0>)
 8009188:	f7fa fab2 	bl	80036f0 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800918c:	f04f 33ff 	mov.w	r3, #4294967295
 8009190:	e005      	b.n	800919e <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4618      	mov	r0, r3
 8009196:	f7ff ff07 	bl	8008fa8 <wait_spi_tx_event>
    
  }
  return len;
 800919a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3718      	adds	r7, #24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	200010bc 	.word	0x200010bc
 80091ac:	48001000 	.word	0x48001000
 80091b0:	200010b8 	.word	0x200010b8
 80091b4:	20001050 	.word	0x20001050

080091b8 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7f8 fdb3 	bl	8001d2c <HAL_Delay>
}
 80091c6:	bf00      	nop
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
	...

080091d0 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 80091d8:	2300      	movs	r3, #0
 80091da:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 80091dc:	2300      	movs	r3, #0
 80091de:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 80091e0:	4b20      	ldr	r3, [pc, #128]	; (8009264 <SPI_WIFI_DelayUs+0x94>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d122      	bne.n	800922e <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 80091e8:	4b1f      	ldr	r3, [pc, #124]	; (8009268 <SPI_WIFI_DelayUs+0x98>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a1f      	ldr	r2, [pc, #124]	; (800926c <SPI_WIFI_DelayUs+0x9c>)
 80091ee:	fba2 2303 	umull	r2, r3, r2, r3
 80091f2:	099b      	lsrs	r3, r3, #6
 80091f4:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 80091fe:	f7f8 fd89 	bl	8001d14 <HAL_GetTick>
 8009202:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8009204:	e002      	b.n	800920c <SPI_WIFI_DelayUs+0x3c>
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	3b01      	subs	r3, #1
 800920a:	60bb      	str	r3, [r7, #8]
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1f9      	bne.n	8009206 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 8009212:	f7f8 fd7f 	bl	8001d14 <HAL_GetTick>
 8009216:	4602      	mov	r2, r0
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	1ad3      	subs	r3, r2, r3
 800921c:	4a11      	ldr	r2, [pc, #68]	; (8009264 <SPI_WIFI_DelayUs+0x94>)
 800921e:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8009220:	4b10      	ldr	r3, [pc, #64]	; (8009264 <SPI_WIFI_DelayUs+0x94>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d102      	bne.n	800922e <SPI_WIFI_DelayUs+0x5e>
 8009228:	4b0e      	ldr	r3, [pc, #56]	; (8009264 <SPI_WIFI_DelayUs+0x94>)
 800922a:	2201      	movs	r2, #1
 800922c:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800922e:	4b0e      	ldr	r3, [pc, #56]	; (8009268 <SPI_WIFI_DelayUs+0x98>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a0f      	ldr	r2, [pc, #60]	; (8009270 <SPI_WIFI_DelayUs+0xa0>)
 8009234:	fba2 2303 	umull	r2, r3, r2, r3
 8009238:	0c9a      	lsrs	r2, r3, #18
 800923a:	4b0a      	ldr	r3, [pc, #40]	; (8009264 <SPI_WIFI_DelayUs+0x94>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009242:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	697a      	ldr	r2, [r7, #20]
 8009248:	fb02 f303 	mul.w	r3, r2, r3
 800924c:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800924e:	e002      	b.n	8009256 <SPI_WIFI_DelayUs+0x86>
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	3b01      	subs	r3, #1
 8009254:	60bb      	str	r3, [r7, #8]
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1f9      	bne.n	8009250 <SPI_WIFI_DelayUs+0x80>
  return;
 800925c:	bf00      	nop
}
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	200010c0 	.word	0x200010c0
 8009268:	20000000 	.word	0x20000000
 800926c:	10624dd3 	.word	0x10624dd3
 8009270:	431bde83 	.word	0x431bde83

08009274 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 800927c:	4b06      	ldr	r3, [pc, #24]	; (8009298 <HAL_SPI_RxCpltCallback+0x24>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8009284:	4b04      	ldr	r3, [pc, #16]	; (8009298 <HAL_SPI_RxCpltCallback+0x24>)
 8009286:	2200      	movs	r2, #0
 8009288:	601a      	str	r2, [r3, #0]
  }
}
 800928a:	bf00      	nop
 800928c:	370c      	adds	r7, #12
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	200010b4 	.word	0x200010b4

0800929c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 80092a4:	4b06      	ldr	r3, [pc, #24]	; (80092c0 <HAL_SPI_TxCpltCallback+0x24>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d002      	beq.n	80092b2 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 80092ac:	4b04      	ldr	r3, [pc, #16]	; (80092c0 <HAL_SPI_TxCpltCallback+0x24>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	601a      	str	r2, [r3, #0]
  }
}
 80092b2:	bf00      	nop
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	200010b8 	.word	0x200010b8

080092c4 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 80092c4:	b480      	push	{r7}
 80092c6:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 80092c8:	4b05      	ldr	r3, [pc, #20]	; (80092e0 <SPI_WIFI_ISR+0x1c>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d102      	bne.n	80092d6 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 80092d0:	4b03      	ldr	r3, [pc, #12]	; (80092e0 <SPI_WIFI_ISR+0x1c>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	601a      	str	r2, [r3, #0]
   }
}
 80092d6:	bf00      	nop
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	200010bc 	.word	0x200010bc

080092e4 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 80092ee:	4b0d      	ldr	r3, [pc, #52]	; (8009324 <WIFI_Init+0x40>)
 80092f0:	9301      	str	r3, [sp, #4]
 80092f2:	4b0d      	ldr	r3, [pc, #52]	; (8009328 <WIFI_Init+0x44>)
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	4b0d      	ldr	r3, [pc, #52]	; (800932c <WIFI_Init+0x48>)
 80092f8:	4a0d      	ldr	r2, [pc, #52]	; (8009330 <WIFI_Init+0x4c>)
 80092fa:	490e      	ldr	r1, [pc, #56]	; (8009334 <WIFI_Init+0x50>)
 80092fc:	480e      	ldr	r0, [pc, #56]	; (8009338 <WIFI_Init+0x54>)
 80092fe:	f7fe ff1d 	bl	800813c <ES_WIFI_RegisterBusIO>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d107      	bne.n	8009318 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8009308:	480b      	ldr	r0, [pc, #44]	; (8009338 <WIFI_Init+0x54>)
 800930a:	f7fe fee9 	bl	80080e0 <ES_WIFI_Init>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d101      	bne.n	8009318 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8009318:	79fb      	ldrb	r3, [r7, #7]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	08008fe9 	.word	0x08008fe9
 8009328:	080090dd 	.word	0x080090dd
 800932c:	080091b9 	.word	0x080091b9
 8009330:	08008ed1 	.word	0x08008ed1
 8009334:	08008d35 	.word	0x08008d35
 8009338:	200010c4 	.word	0x200010c4

0800933c <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	4613      	mov	r3, r2
 8009348:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800934e:	79fb      	ldrb	r3, [r7, #7]
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	68f9      	ldr	r1, [r7, #12]
 8009354:	4809      	ldr	r0, [pc, #36]	; (800937c <WIFI_Connect+0x40>)
 8009356:	f7fe ff25 	bl	80081a4 <ES_WIFI_Connect>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d107      	bne.n	8009370 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8009360:	4806      	ldr	r0, [pc, #24]	; (800937c <WIFI_Connect+0x40>)
 8009362:	f7fe ffc3 	bl	80082ec <ES_WIFI_GetNetworkSettings>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d101      	bne.n	8009370 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800936c:	2300      	movs	r3, #0
 800936e:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8009370:	7dfb      	ldrb	r3, [r7, #23]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3718      	adds	r7, #24
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	200010c4 	.word	0x200010c4

08009380 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800938c:	6879      	ldr	r1, [r7, #4]
 800938e:	4806      	ldr	r0, [pc, #24]	; (80093a8 <WIFI_GetMAC_Address+0x28>)
 8009390:	f7fe ffd6 	bl	8008340 <ES_WIFI_GetMACAddress>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800939e:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	200010c4 	.word	0x200010c4

080093ac <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 80093b8:	4809      	ldr	r0, [pc, #36]	; (80093e0 <WIFI_GetIP_Address+0x34>)
 80093ba:	f7fe ff6b 	bl	8008294 <ES_WIFI_IsConnected>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d107      	bne.n	80093d4 <WIFI_GetIP_Address+0x28>
 80093c4:	4b06      	ldr	r3, [pc, #24]	; (80093e0 <WIFI_GetIP_Address+0x34>)
 80093c6:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 80093ca:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 80093d0:	2300      	movs	r3, #0
 80093d2:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	200010c4 	.word	0x200010c4

080093e4 <WIFI_StartServer>:
  * @param  name : name of the connection
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name, uint16_t port)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b08a      	sub	sp, #40	; 0x28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	607b      	str	r3, [r7, #4]
 80093ee:	460b      	mov	r3, r1
 80093f0:	72fb      	strb	r3, [r7, #11]
 80093f2:	4613      	mov	r3, r2
 80093f4:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	747b      	strb	r3, [r7, #17]
  conn.LocalPort = port;
 8009402:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009404:	82bb      	strh	r3, [r7, #20]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8009406:	7afb      	ldrb	r3, [r7, #11]
 8009408:	2b00      	cmp	r3, #0
 800940a:	bf14      	ite	ne
 800940c:	2301      	movne	r3, #1
 800940e:	2300      	moveq	r3, #0
 8009410:	b2db      	uxtb	r3, r3
 8009412:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 8009414:	893b      	ldrh	r3, [r7, #8]
 8009416:	b2db      	uxtb	r3, r3
 8009418:	f887 3020 	strb.w	r3, [r7, #32]
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800941c:	f107 0310 	add.w	r3, r7, #16
 8009420:	4619      	mov	r1, r3
 8009422:	4807      	ldr	r0, [pc, #28]	; (8009440 <WIFI_StartServer+0x5c>)
 8009424:	f7fe ffbe 	bl	80083a4 <ES_WIFI_StartServerSingleConn>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d102      	bne.n	8009434 <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8009434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009438:	4618      	mov	r0, r3
 800943a:	3728      	adds	r7, #40	; 0x28
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	200010c4 	.word	0x200010c4

08009444 <WIFI_WaitServerConnection>:
  * @brief  Wait for a client connection to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(int socket,uint32_t Timeout,uint8_t *RemoteIp,uint16_t *RemotePort)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b08a      	sub	sp, #40	; 0x28
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
 8009450:	603b      	str	r3, [r7, #0]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;
  
  conn.Number = socket;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	b2db      	uxtb	r3, r3
 8009456:	747b      	strb	r3, [r7, #17]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 8009458:	f107 0310 	add.w	r3, r7, #16
 800945c:	461a      	mov	r2, r3
 800945e:	68b9      	ldr	r1, [r7, #8]
 8009460:	4819      	ldr	r0, [pc, #100]	; (80094c8 <WIFI_WaitServerConnection+0x84>)
 8009462:	f7ff f84b 	bl	80084fc <ES_WIFI_WaitServerConnection>
 8009466:	4603      	mov	r3, r0
 8009468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ES_WIFI_STATUS_OK == ret)
 800946c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10f      	bne.n	8009494 <WIFI_WaitServerConnection+0x50>
  {
    if (RemotePort) *RemotePort=conn.RemotePort;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d002      	beq.n	8009480 <WIFI_WaitServerConnection+0x3c>
 800947a:	8a7a      	ldrh	r2, [r7, #18]
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d004      	beq.n	8009490 <WIFI_WaitServerConnection+0x4c>
 8009486:	f8d7 3016 	ldr.w	r3, [r7, #22]
 800948a:	461a      	mov	r2, r3
    {
      memcpy(RemoteIp,conn.RemoteIP,sizeof(conn.RemoteIP));
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	e014      	b.n	80094be <WIFI_WaitServerConnection+0x7a>
  }
  
  if (ES_WIFI_STATUS_TIMEOUT ==ret)
 8009494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009498:	2b03      	cmp	r3, #3
 800949a:	d10f      	bne.n	80094bc <WIFI_WaitServerConnection+0x78>
  {
    if (RemotePort) *RemotePort=0;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d002      	beq.n	80094a8 <WIFI_WaitServerConnection+0x64>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2200      	movs	r2, #0
 80094a6:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d004      	beq.n	80094b8 <WIFI_WaitServerConnection+0x74>
    {
      memset(RemoteIp,0,sizeof(conn.RemoteIP));
 80094ae:	2204      	movs	r2, #4
 80094b0:	2100      	movs	r1, #0
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f002 ff3a 	bl	800c32c <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 80094b8:	2305      	movs	r3, #5
 80094ba:	e000      	b.n	80094be <WIFI_WaitServerConnection+0x7a>
  }

  return WIFI_STATUS_ERROR;
 80094bc:	2301      	movs	r3, #1
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3728      	adds	r7, #40	; 0x28
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	200010c4 	.word	0x200010c4

080094cc <WIFI_CloseServerConnection>:
/**
  * @brief  Close current connection from a client  to the server
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(int socket)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	73fb      	strb	r3, [r7, #15]
  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj,socket))
 80094d8:	6879      	ldr	r1, [r7, #4]
 80094da:	4806      	ldr	r0, [pc, #24]	; (80094f4 <WIFI_CloseServerConnection+0x28>)
 80094dc:	f7ff f930 	bl	8008740 <ES_WIFI_CloseServerConnection>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d101      	bne.n	80094ea <WIFI_CloseServerConnection+0x1e>
  {
    ret = WIFI_STATUS_OK;
 80094e6:	2300      	movs	r3, #0
 80094e8:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 80094ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	200010c4 	.word	0x200010c4

080094f8 <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_StopServerSingleConn(&EsWifiObj,socket)== ES_WIFI_STATUS_OK)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4619      	mov	r1, r3
 8009508:	4806      	ldr	r0, [pc, #24]	; (8009524 <WIFI_StopServer+0x2c>)
 800950a:	f7ff f979 	bl	8008800 <ES_WIFI_StopServerSingleConn>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <WIFI_StopServer+0x20>
  {
    ret = WIFI_STATUS_OK;
 8009514:	2300      	movs	r3, #0
 8009516:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8009518:	7bfb      	ldrb	r3, [r7, #15]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	200010c4 	.word	0x200010c4

08009528 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b088      	sub	sp, #32
 800952c:	af02      	add	r7, sp, #8
 800952e:	60b9      	str	r1, [r7, #8]
 8009530:	607b      	str	r3, [r7, #4]
 8009532:	4603      	mov	r3, r0
 8009534:	73fb      	strb	r3, [r7, #15]
 8009536:	4613      	mov	r3, r2
 8009538:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800953e:	89ba      	ldrh	r2, [r7, #12]
 8009540:	7bf9      	ldrb	r1, [r7, #15]
 8009542:	6a3b      	ldr	r3, [r7, #32]
 8009544:	9301      	str	r3, [sp, #4]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	4613      	mov	r3, r2
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	4806      	ldr	r0, [pc, #24]	; (8009568 <WIFI_SendData+0x40>)
 8009550:	f7ff f9b8 	bl	80088c4 <ES_WIFI_SendData>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 800955e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3718      	adds	r7, #24
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	200010c4 	.word	0x200010c4

0800956c <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b088      	sub	sp, #32
 8009570:	af02      	add	r7, sp, #8
 8009572:	60b9      	str	r1, [r7, #8]
 8009574:	607b      	str	r3, [r7, #4]
 8009576:	4603      	mov	r3, r0
 8009578:	73fb      	strb	r3, [r7, #15]
 800957a:	4613      	mov	r3, r2
 800957c:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8009582:	89ba      	ldrh	r2, [r7, #12]
 8009584:	7bf9      	ldrb	r1, [r7, #15]
 8009586:	6a3b      	ldr	r3, [r7, #32]
 8009588:	9301      	str	r3, [sp, #4]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	4613      	mov	r3, r2
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	4806      	ldr	r0, [pc, #24]	; (80095ac <WIFI_ReceiveData+0x40>)
 8009594:	f7ff fa52 	bl	8008a3c <ES_WIFI_ReceiveData>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d101      	bne.n	80095a2 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80095a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3718      	adds	r7, #24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	200010c4 	.word	0x200010c4

080095b0 <__NVIC_SetPriority>:
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	4603      	mov	r3, r0
 80095b8:	6039      	str	r1, [r7, #0]
 80095ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80095bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	db0a      	blt.n	80095da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	490c      	ldr	r1, [pc, #48]	; (80095fc <__NVIC_SetPriority+0x4c>)
 80095ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095ce:	0112      	lsls	r2, r2, #4
 80095d0:	b2d2      	uxtb	r2, r2
 80095d2:	440b      	add	r3, r1
 80095d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80095d8:	e00a      	b.n	80095f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	b2da      	uxtb	r2, r3
 80095de:	4908      	ldr	r1, [pc, #32]	; (8009600 <__NVIC_SetPriority+0x50>)
 80095e0:	79fb      	ldrb	r3, [r7, #7]
 80095e2:	f003 030f 	and.w	r3, r3, #15
 80095e6:	3b04      	subs	r3, #4
 80095e8:	0112      	lsls	r2, r2, #4
 80095ea:	b2d2      	uxtb	r2, r2
 80095ec:	440b      	add	r3, r1
 80095ee:	761a      	strb	r2, [r3, #24]
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr
 80095fc:	e000e100 	.word	0xe000e100
 8009600:	e000ed00 	.word	0xe000ed00

08009604 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009604:	b580      	push	{r7, lr}
 8009606:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009608:	2100      	movs	r1, #0
 800960a:	f06f 0004 	mvn.w	r0, #4
 800960e:	f7ff ffcf 	bl	80095b0 <__NVIC_SetPriority>
#endif
}
 8009612:	bf00      	nop
 8009614:	bd80      	pop	{r7, pc}
	...

08009618 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800961e:	f3ef 8305 	mrs	r3, IPSR
 8009622:	603b      	str	r3, [r7, #0]
  return(result);
 8009624:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009626:	2b00      	cmp	r3, #0
 8009628:	d003      	beq.n	8009632 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800962a:	f06f 0305 	mvn.w	r3, #5
 800962e:	607b      	str	r3, [r7, #4]
 8009630:	e00c      	b.n	800964c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009632:	4b0a      	ldr	r3, [pc, #40]	; (800965c <osKernelInitialize+0x44>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d105      	bne.n	8009646 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800963a:	4b08      	ldr	r3, [pc, #32]	; (800965c <osKernelInitialize+0x44>)
 800963c:	2201      	movs	r2, #1
 800963e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009640:	2300      	movs	r3, #0
 8009642:	607b      	str	r3, [r7, #4]
 8009644:	e002      	b.n	800964c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009646:	f04f 33ff 	mov.w	r3, #4294967295
 800964a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800964c:	687b      	ldr	r3, [r7, #4]
}
 800964e:	4618      	mov	r0, r3
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	200019c4 	.word	0x200019c4

08009660 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009666:	f3ef 8305 	mrs	r3, IPSR
 800966a:	603b      	str	r3, [r7, #0]
  return(result);
 800966c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009672:	f06f 0305 	mvn.w	r3, #5
 8009676:	607b      	str	r3, [r7, #4]
 8009678:	e010      	b.n	800969c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800967a:	4b0b      	ldr	r3, [pc, #44]	; (80096a8 <osKernelStart+0x48>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d109      	bne.n	8009696 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009682:	f7ff ffbf 	bl	8009604 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009686:	4b08      	ldr	r3, [pc, #32]	; (80096a8 <osKernelStart+0x48>)
 8009688:	2202      	movs	r2, #2
 800968a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800968c:	f001 f8a0 	bl	800a7d0 <vTaskStartScheduler>
      stat = osOK;
 8009690:	2300      	movs	r3, #0
 8009692:	607b      	str	r3, [r7, #4]
 8009694:	e002      	b.n	800969c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009696:	f04f 33ff 	mov.w	r3, #4294967295
 800969a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800969c:	687b      	ldr	r3, [r7, #4]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	200019c4 	.word	0x200019c4

080096ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b08e      	sub	sp, #56	; 0x38
 80096b0:	af04      	add	r7, sp, #16
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80096b8:	2300      	movs	r3, #0
 80096ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096bc:	f3ef 8305 	mrs	r3, IPSR
 80096c0:	617b      	str	r3, [r7, #20]
  return(result);
 80096c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d17e      	bne.n	80097c6 <osThreadNew+0x11a>
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d07b      	beq.n	80097c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80096ce:	2380      	movs	r3, #128	; 0x80
 80096d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80096d2:	2318      	movs	r3, #24
 80096d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80096d6:	2300      	movs	r3, #0
 80096d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80096da:	f04f 33ff 	mov.w	r3, #4294967295
 80096de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d045      	beq.n	8009772 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d002      	beq.n	80096f4 <osThreadNew+0x48>
        name = attr->name;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d002      	beq.n	8009702 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d008      	beq.n	800971a <osThreadNew+0x6e>
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	2b38      	cmp	r3, #56	; 0x38
 800970c:	d805      	bhi.n	800971a <osThreadNew+0x6e>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	f003 0301 	and.w	r3, r3, #1
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <osThreadNew+0x72>
        return (NULL);
 800971a:	2300      	movs	r3, #0
 800971c:	e054      	b.n	80097c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d003      	beq.n	800972e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	089b      	lsrs	r3, r3, #2
 800972c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00e      	beq.n	8009754 <osThreadNew+0xa8>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	2b5b      	cmp	r3, #91	; 0x5b
 800973c:	d90a      	bls.n	8009754 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009742:	2b00      	cmp	r3, #0
 8009744:	d006      	beq.n	8009754 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d002      	beq.n	8009754 <osThreadNew+0xa8>
        mem = 1;
 800974e:	2301      	movs	r3, #1
 8009750:	61bb      	str	r3, [r7, #24]
 8009752:	e010      	b.n	8009776 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d10c      	bne.n	8009776 <osThreadNew+0xca>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d108      	bne.n	8009776 <osThreadNew+0xca>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d104      	bne.n	8009776 <osThreadNew+0xca>
          mem = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	61bb      	str	r3, [r7, #24]
 8009770:	e001      	b.n	8009776 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d110      	bne.n	800979e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009784:	9202      	str	r2, [sp, #8]
 8009786:	9301      	str	r3, [sp, #4]
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	6a3a      	ldr	r2, [r7, #32]
 8009790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f000 fe46 	bl	800a424 <xTaskCreateStatic>
 8009798:	4603      	mov	r3, r0
 800979a:	613b      	str	r3, [r7, #16]
 800979c:	e013      	b.n	80097c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d110      	bne.n	80097c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80097a4:	6a3b      	ldr	r3, [r7, #32]
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	f107 0310 	add.w	r3, r7, #16
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f000 fe91 	bl	800a4de <xTaskCreate>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d001      	beq.n	80097c6 <osThreadNew+0x11a>
            hTask = NULL;
 80097c2:	2300      	movs	r3, #0
 80097c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80097c6:	693b      	ldr	r3, [r7, #16]
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3728      	adds	r7, #40	; 0x28
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097d8:	f3ef 8305 	mrs	r3, IPSR
 80097dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80097de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d003      	beq.n	80097ec <osDelay+0x1c>
    stat = osErrorISR;
 80097e4:	f06f 0305 	mvn.w	r3, #5
 80097e8:	60fb      	str	r3, [r7, #12]
 80097ea:	e007      	b.n	80097fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d002      	beq.n	80097fc <osDelay+0x2c>
      vTaskDelay(ticks);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 ffb6 	bl	800a768 <vTaskDelay>
    }
  }

  return (stat);
 80097fc:	68fb      	ldr	r3, [r7, #12]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
	...

08009808 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	4a07      	ldr	r2, [pc, #28]	; (8009834 <vApplicationGetIdleTaskMemory+0x2c>)
 8009818:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	4a06      	ldr	r2, [pc, #24]	; (8009838 <vApplicationGetIdleTaskMemory+0x30>)
 800981e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2280      	movs	r2, #128	; 0x80
 8009824:	601a      	str	r2, [r3, #0]
}
 8009826:	bf00      	nop
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	200019c8 	.word	0x200019c8
 8009838:	20001a24 	.word	0x20001a24

0800983c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800983c:	b480      	push	{r7}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	4a07      	ldr	r2, [pc, #28]	; (8009868 <vApplicationGetTimerTaskMemory+0x2c>)
 800984c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	4a06      	ldr	r2, [pc, #24]	; (800986c <vApplicationGetTimerTaskMemory+0x30>)
 8009852:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800985a:	601a      	str	r2, [r3, #0]
}
 800985c:	bf00      	nop
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr
 8009868:	20001c24 	.word	0x20001c24
 800986c:	20001c80 	.word	0x20001c80

08009870 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f103 0208 	add.w	r2, r3, #8
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f04f 32ff 	mov.w	r2, #4294967295
 8009888:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f103 0208 	add.w	r2, r3, #8
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f103 0208 	add.w	r2, r3, #8
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80098be:	bf00      	nop
 80098c0:	370c      	adds	r7, #12
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098ca:	b480      	push	{r7}
 80098cc:	b085      	sub	sp, #20
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	689a      	ldr	r2, [r3, #8]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	683a      	ldr	r2, [r7, #0]
 80098ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	683a      	ldr	r2, [r7, #0]
 80098f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	1c5a      	adds	r2, r3, #1
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	601a      	str	r2, [r3, #0]
}
 8009906:	bf00      	nop
 8009908:	3714      	adds	r7, #20
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009912:	b480      	push	{r7}
 8009914:	b085      	sub	sp, #20
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009928:	d103      	bne.n	8009932 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	691b      	ldr	r3, [r3, #16]
 800992e:	60fb      	str	r3, [r7, #12]
 8009930:	e00c      	b.n	800994c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	3308      	adds	r3, #8
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	e002      	b.n	8009940 <vListInsert+0x2e>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	60fb      	str	r3, [r7, #12]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68ba      	ldr	r2, [r7, #8]
 8009948:	429a      	cmp	r2, r3
 800994a:	d2f6      	bcs.n	800993a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	683a      	ldr	r2, [r7, #0]
 8009966:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	1c5a      	adds	r2, r3, #1
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	601a      	str	r2, [r3, #0]
}
 8009978:	bf00      	nop
 800997a:	3714      	adds	r7, #20
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	6892      	ldr	r2, [r2, #8]
 800999a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	6852      	ldr	r2, [r2, #4]
 80099a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d103      	bne.n	80099b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	689a      	ldr	r2, [r3, #8]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	1e5a      	subs	r2, r3, #1
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3714      	adds	r7, #20
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10a      	bne.n	8009a02 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80099ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f0:	f383 8811 	msr	BASEPRI, r3
 80099f4:	f3bf 8f6f 	isb	sy
 80099f8:	f3bf 8f4f 	dsb	sy
 80099fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80099fe:	bf00      	nop
 8009a00:	e7fe      	b.n	8009a00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009a02:	f002 f93f 	bl	800bc84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a0e:	68f9      	ldr	r1, [r7, #12]
 8009a10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a12:	fb01 f303 	mul.w	r3, r1, r3
 8009a16:	441a      	add	r2, r3
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a32:	3b01      	subs	r3, #1
 8009a34:	68f9      	ldr	r1, [r7, #12]
 8009a36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a38:	fb01 f303 	mul.w	r3, r1, r3
 8009a3c:	441a      	add	r2, r3
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	22ff      	movs	r2, #255	; 0xff
 8009a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	22ff      	movs	r2, #255	; 0xff
 8009a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d114      	bne.n	8009a82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d01a      	beq.n	8009a96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	3310      	adds	r3, #16
 8009a64:	4618      	mov	r0, r3
 8009a66:	f001 f93d 	bl	800ace4 <xTaskRemoveFromEventList>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d012      	beq.n	8009a96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009a70:	4b0c      	ldr	r3, [pc, #48]	; (8009aa4 <xQueueGenericReset+0xcc>)
 8009a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a76:	601a      	str	r2, [r3, #0]
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	e009      	b.n	8009a96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	3310      	adds	r3, #16
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7ff fef2 	bl	8009870 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	3324      	adds	r3, #36	; 0x24
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7ff feed 	bl	8009870 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009a96:	f002 f925 	bl	800bce4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009a9a:	2301      	movs	r3, #1
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3710      	adds	r7, #16
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	e000ed04 	.word	0xe000ed04

08009aa8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b08e      	sub	sp, #56	; 0x38
 8009aac:	af02      	add	r7, sp, #8
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
 8009ab4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10a      	bne.n	8009ad2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ace:	bf00      	nop
 8009ad0:	e7fe      	b.n	8009ad0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10a      	bne.n	8009aee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009aea:	bf00      	nop
 8009aec:	e7fe      	b.n	8009aec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d002      	beq.n	8009afa <xQueueGenericCreateStatic+0x52>
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d001      	beq.n	8009afe <xQueueGenericCreateStatic+0x56>
 8009afa:	2301      	movs	r3, #1
 8009afc:	e000      	b.n	8009b00 <xQueueGenericCreateStatic+0x58>
 8009afe:	2300      	movs	r3, #0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10a      	bne.n	8009b1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	623b      	str	r3, [r7, #32]
}
 8009b16:	bf00      	nop
 8009b18:	e7fe      	b.n	8009b18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d102      	bne.n	8009b26 <xQueueGenericCreateStatic+0x7e>
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d101      	bne.n	8009b2a <xQueueGenericCreateStatic+0x82>
 8009b26:	2301      	movs	r3, #1
 8009b28:	e000      	b.n	8009b2c <xQueueGenericCreateStatic+0x84>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d10a      	bne.n	8009b46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b34:	f383 8811 	msr	BASEPRI, r3
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	61fb      	str	r3, [r7, #28]
}
 8009b42:	bf00      	nop
 8009b44:	e7fe      	b.n	8009b44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009b46:	2350      	movs	r3, #80	; 0x50
 8009b48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	2b50      	cmp	r3, #80	; 0x50
 8009b4e:	d00a      	beq.n	8009b66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	61bb      	str	r3, [r7, #24]
}
 8009b62:	bf00      	nop
 8009b64:	e7fe      	b.n	8009b64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009b66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00d      	beq.n	8009b8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b74:	2201      	movs	r2, #1
 8009b76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	4613      	mov	r3, r2
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	68b9      	ldr	r1, [r7, #8]
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f000 f83f 	bl	8009c0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3730      	adds	r7, #48	; 0x30
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08a      	sub	sp, #40	; 0x28
 8009b9c:	af02      	add	r7, sp, #8
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d10a      	bne.n	8009bc2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb0:	f383 8811 	msr	BASEPRI, r3
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	613b      	str	r3, [r7, #16]
}
 8009bbe:	bf00      	nop
 8009bc0:	e7fe      	b.n	8009bc0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	fb02 f303 	mul.w	r3, r2, r3
 8009bca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	3350      	adds	r3, #80	; 0x50
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f002 f979 	bl	800bec8 <pvPortMalloc>
 8009bd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d011      	beq.n	8009c02 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	3350      	adds	r3, #80	; 0x50
 8009be6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009bf0:	79fa      	ldrb	r2, [r7, #7]
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	697a      	ldr	r2, [r7, #20]
 8009bfa:	68b9      	ldr	r1, [r7, #8]
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f000 f805 	bl	8009c0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c02:	69bb      	ldr	r3, [r7, #24]
	}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3720      	adds	r7, #32
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
 8009c18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d103      	bne.n	8009c28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	69ba      	ldr	r2, [r7, #24]
 8009c24:	601a      	str	r2, [r3, #0]
 8009c26:	e002      	b.n	8009c2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c3a:	2101      	movs	r1, #1
 8009c3c:	69b8      	ldr	r0, [r7, #24]
 8009c3e:	f7ff fecb 	bl	80099d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	78fa      	ldrb	r2, [r7, #3]
 8009c46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009c4a:	bf00      	nop
 8009c4c:	3710      	adds	r7, #16
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
	...

08009c54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b08e      	sub	sp, #56	; 0x38
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
 8009c60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c62:	2300      	movs	r3, #0
 8009c64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10a      	bne.n	8009c86 <xQueueGenericSend+0x32>
	__asm volatile
 8009c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c74:	f383 8811 	msr	BASEPRI, r3
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c82:	bf00      	nop
 8009c84:	e7fe      	b.n	8009c84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d103      	bne.n	8009c94 <xQueueGenericSend+0x40>
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d101      	bne.n	8009c98 <xQueueGenericSend+0x44>
 8009c94:	2301      	movs	r3, #1
 8009c96:	e000      	b.n	8009c9a <xQueueGenericSend+0x46>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10a      	bne.n	8009cb4 <xQueueGenericSend+0x60>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009cb0:	bf00      	nop
 8009cb2:	e7fe      	b.n	8009cb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d103      	bne.n	8009cc2 <xQueueGenericSend+0x6e>
 8009cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d101      	bne.n	8009cc6 <xQueueGenericSend+0x72>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e000      	b.n	8009cc8 <xQueueGenericSend+0x74>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10a      	bne.n	8009ce2 <xQueueGenericSend+0x8e>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	623b      	str	r3, [r7, #32]
}
 8009cde:	bf00      	nop
 8009ce0:	e7fe      	b.n	8009ce0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ce2:	f001 f9bd 	bl	800b060 <xTaskGetSchedulerState>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d102      	bne.n	8009cf2 <xQueueGenericSend+0x9e>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <xQueueGenericSend+0xa2>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e000      	b.n	8009cf8 <xQueueGenericSend+0xa4>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10a      	bne.n	8009d12 <xQueueGenericSend+0xbe>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	61fb      	str	r3, [r7, #28]
}
 8009d0e:	bf00      	nop
 8009d10:	e7fe      	b.n	8009d10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d12:	f001 ffb7 	bl	800bc84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d302      	bcc.n	8009d28 <xQueueGenericSend+0xd4>
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d129      	bne.n	8009d7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	68b9      	ldr	r1, [r7, #8]
 8009d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d2e:	f000 fa0b 	bl	800a148 <prvCopyDataToQueue>
 8009d32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d010      	beq.n	8009d5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3e:	3324      	adds	r3, #36	; 0x24
 8009d40:	4618      	mov	r0, r3
 8009d42:	f000 ffcf 	bl	800ace4 <xTaskRemoveFromEventList>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d013      	beq.n	8009d74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d4c:	4b3f      	ldr	r3, [pc, #252]	; (8009e4c <xQueueGenericSend+0x1f8>)
 8009d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d52:	601a      	str	r2, [r3, #0]
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	e00a      	b.n	8009d74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d007      	beq.n	8009d74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009d64:	4b39      	ldr	r3, [pc, #228]	; (8009e4c <xQueueGenericSend+0x1f8>)
 8009d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d6a:	601a      	str	r2, [r3, #0]
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d74:	f001 ffb6 	bl	800bce4 <vPortExitCritical>
				return pdPASS;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e063      	b.n	8009e44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d103      	bne.n	8009d8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d82:	f001 ffaf 	bl	800bce4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d86:	2300      	movs	r3, #0
 8009d88:	e05c      	b.n	8009e44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d106      	bne.n	8009d9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d90:	f107 0314 	add.w	r3, r7, #20
 8009d94:	4618      	mov	r0, r3
 8009d96:	f001 f809 	bl	800adac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d9e:	f001 ffa1 	bl	800bce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009da2:	f000 fd7b 	bl	800a89c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009da6:	f001 ff6d 	bl	800bc84 <vPortEnterCritical>
 8009daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009db0:	b25b      	sxtb	r3, r3
 8009db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db6:	d103      	bne.n	8009dc0 <xQueueGenericSend+0x16c>
 8009db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dc6:	b25b      	sxtb	r3, r3
 8009dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dcc:	d103      	bne.n	8009dd6 <xQueueGenericSend+0x182>
 8009dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009dd6:	f001 ff85 	bl	800bce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009dda:	1d3a      	adds	r2, r7, #4
 8009ddc:	f107 0314 	add.w	r3, r7, #20
 8009de0:	4611      	mov	r1, r2
 8009de2:	4618      	mov	r0, r3
 8009de4:	f000 fff8 	bl	800add8 <xTaskCheckForTimeOut>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d124      	bne.n	8009e38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009dee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009df0:	f000 faa2 	bl	800a338 <prvIsQueueFull>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d018      	beq.n	8009e2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfc:	3310      	adds	r3, #16
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	4611      	mov	r1, r2
 8009e02:	4618      	mov	r0, r3
 8009e04:	f000 ff1e 	bl	800ac44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e0a:	f000 fa2d 	bl	800a268 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e0e:	f000 fd53 	bl	800a8b8 <xTaskResumeAll>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f47f af7c 	bne.w	8009d12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009e1a:	4b0c      	ldr	r3, [pc, #48]	; (8009e4c <xQueueGenericSend+0x1f8>)
 8009e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e20:	601a      	str	r2, [r3, #0]
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	e772      	b.n	8009d12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e2e:	f000 fa1b 	bl	800a268 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e32:	f000 fd41 	bl	800a8b8 <xTaskResumeAll>
 8009e36:	e76c      	b.n	8009d12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e3a:	f000 fa15 	bl	800a268 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e3e:	f000 fd3b 	bl	800a8b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009e42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3738      	adds	r7, #56	; 0x38
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	e000ed04 	.word	0xe000ed04

08009e50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b090      	sub	sp, #64	; 0x40
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	607a      	str	r2, [r7, #4]
 8009e5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10a      	bne.n	8009e7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e7a:	bf00      	nop
 8009e7c:	e7fe      	b.n	8009e7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d103      	bne.n	8009e8c <xQueueGenericSendFromISR+0x3c>
 8009e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d101      	bne.n	8009e90 <xQueueGenericSendFromISR+0x40>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e000      	b.n	8009e92 <xQueueGenericSendFromISR+0x42>
 8009e90:	2300      	movs	r3, #0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10a      	bne.n	8009eac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ea8:	bf00      	nop
 8009eaa:	e7fe      	b.n	8009eaa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d103      	bne.n	8009eba <xQueueGenericSendFromISR+0x6a>
 8009eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d101      	bne.n	8009ebe <xQueueGenericSendFromISR+0x6e>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e000      	b.n	8009ec0 <xQueueGenericSendFromISR+0x70>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10a      	bne.n	8009eda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	623b      	str	r3, [r7, #32]
}
 8009ed6:	bf00      	nop
 8009ed8:	e7fe      	b.n	8009ed8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009eda:	f001 ffb5 	bl	800be48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009ede:	f3ef 8211 	mrs	r2, BASEPRI
 8009ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee6:	f383 8811 	msr	BASEPRI, r3
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	61fa      	str	r2, [r7, #28]
 8009ef4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009ef6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ef8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d302      	bcc.n	8009f0c <xQueueGenericSendFromISR+0xbc>
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	d12f      	bne.n	8009f6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f1c:	683a      	ldr	r2, [r7, #0]
 8009f1e:	68b9      	ldr	r1, [r7, #8]
 8009f20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f22:	f000 f911 	bl	800a148 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2e:	d112      	bne.n	8009f56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d016      	beq.n	8009f66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3a:	3324      	adds	r3, #36	; 0x24
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f000 fed1 	bl	800ace4 <xTaskRemoveFromEventList>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00e      	beq.n	8009f66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00b      	beq.n	8009f66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2201      	movs	r2, #1
 8009f52:	601a      	str	r2, [r3, #0]
 8009f54:	e007      	b.n	8009f66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	b25a      	sxtb	r2, r3
 8009f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009f66:	2301      	movs	r3, #1
 8009f68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009f6a:	e001      	b.n	8009f70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f72:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3740      	adds	r7, #64	; 0x40
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
	...

08009f88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b08c      	sub	sp, #48	; 0x30
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009f94:	2300      	movs	r3, #0
 8009f96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10a      	bne.n	8009fb8 <xQueueReceive+0x30>
	__asm volatile
 8009fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	623b      	str	r3, [r7, #32]
}
 8009fb4:	bf00      	nop
 8009fb6:	e7fe      	b.n	8009fb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d103      	bne.n	8009fc6 <xQueueReceive+0x3e>
 8009fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d101      	bne.n	8009fca <xQueueReceive+0x42>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e000      	b.n	8009fcc <xQueueReceive+0x44>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10a      	bne.n	8009fe6 <xQueueReceive+0x5e>
	__asm volatile
 8009fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	61fb      	str	r3, [r7, #28]
}
 8009fe2:	bf00      	nop
 8009fe4:	e7fe      	b.n	8009fe4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fe6:	f001 f83b 	bl	800b060 <xTaskGetSchedulerState>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d102      	bne.n	8009ff6 <xQueueReceive+0x6e>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d101      	bne.n	8009ffa <xQueueReceive+0x72>
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e000      	b.n	8009ffc <xQueueReceive+0x74>
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10a      	bne.n	800a016 <xQueueReceive+0x8e>
	__asm volatile
 800a000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a004:	f383 8811 	msr	BASEPRI, r3
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	61bb      	str	r3, [r7, #24]
}
 800a012:	bf00      	nop
 800a014:	e7fe      	b.n	800a014 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a016:	f001 fe35 	bl	800bc84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a01e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a022:	2b00      	cmp	r3, #0
 800a024:	d01f      	beq.n	800a066 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a026:	68b9      	ldr	r1, [r7, #8]
 800a028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a02a:	f000 f8f7 	bl	800a21c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	1e5a      	subs	r2, r3, #1
 800a032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a034:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00f      	beq.n	800a05e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a040:	3310      	adds	r3, #16
 800a042:	4618      	mov	r0, r3
 800a044:	f000 fe4e 	bl	800ace4 <xTaskRemoveFromEventList>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d007      	beq.n	800a05e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a04e:	4b3d      	ldr	r3, [pc, #244]	; (800a144 <xQueueReceive+0x1bc>)
 800a050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a054:	601a      	str	r2, [r3, #0]
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a05e:	f001 fe41 	bl	800bce4 <vPortExitCritical>
				return pdPASS;
 800a062:	2301      	movs	r3, #1
 800a064:	e069      	b.n	800a13a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d103      	bne.n	800a074 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a06c:	f001 fe3a 	bl	800bce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a070:	2300      	movs	r3, #0
 800a072:	e062      	b.n	800a13a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a076:	2b00      	cmp	r3, #0
 800a078:	d106      	bne.n	800a088 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a07a:	f107 0310 	add.w	r3, r7, #16
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 fe94 	bl	800adac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a084:	2301      	movs	r3, #1
 800a086:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a088:	f001 fe2c 	bl	800bce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a08c:	f000 fc06 	bl	800a89c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a090:	f001 fdf8 	bl	800bc84 <vPortEnterCritical>
 800a094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a09a:	b25b      	sxtb	r3, r3
 800a09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a0:	d103      	bne.n	800a0aa <xQueueReceive+0x122>
 800a0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0b0:	b25b      	sxtb	r3, r3
 800a0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b6:	d103      	bne.n	800a0c0 <xQueueReceive+0x138>
 800a0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0c0:	f001 fe10 	bl	800bce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0c4:	1d3a      	adds	r2, r7, #4
 800a0c6:	f107 0310 	add.w	r3, r7, #16
 800a0ca:	4611      	mov	r1, r2
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f000 fe83 	bl	800add8 <xTaskCheckForTimeOut>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d123      	bne.n	800a120 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0da:	f000 f917 	bl	800a30c <prvIsQueueEmpty>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d017      	beq.n	800a114 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e6:	3324      	adds	r3, #36	; 0x24
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f000 fda9 	bl	800ac44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a0f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0f4:	f000 f8b8 	bl	800a268 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a0f8:	f000 fbde 	bl	800a8b8 <xTaskResumeAll>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d189      	bne.n	800a016 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a102:	4b10      	ldr	r3, [pc, #64]	; (800a144 <xQueueReceive+0x1bc>)
 800a104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a108:	601a      	str	r2, [r3, #0]
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	e780      	b.n	800a016 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a116:	f000 f8a7 	bl	800a268 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a11a:	f000 fbcd 	bl	800a8b8 <xTaskResumeAll>
 800a11e:	e77a      	b.n	800a016 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a122:	f000 f8a1 	bl	800a268 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a126:	f000 fbc7 	bl	800a8b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a12a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a12c:	f000 f8ee 	bl	800a30c <prvIsQueueEmpty>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	f43f af6f 	beq.w	800a016 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a138:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3730      	adds	r7, #48	; 0x30
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	e000ed04 	.word	0xe000ed04

0800a148 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a154:	2300      	movs	r3, #0
 800a156:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a162:	2b00      	cmp	r3, #0
 800a164:	d10d      	bne.n	800a182 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d14d      	bne.n	800a20a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	4618      	mov	r0, r3
 800a174:	f000 ff92 	bl	800b09c <xTaskPriorityDisinherit>
 800a178:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2200      	movs	r2, #0
 800a17e:	609a      	str	r2, [r3, #8]
 800a180:	e043      	b.n	800a20a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d119      	bne.n	800a1bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6858      	ldr	r0, [r3, #4]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a190:	461a      	mov	r2, r3
 800a192:	68b9      	ldr	r1, [r7, #8]
 800a194:	f002 f8bc 	bl	800c310 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	685a      	ldr	r2, [r3, #4]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a0:	441a      	add	r2, r3
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	685a      	ldr	r2, [r3, #4]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d32b      	bcc.n	800a20a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	605a      	str	r2, [r3, #4]
 800a1ba:	e026      	b.n	800a20a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	68d8      	ldr	r0, [r3, #12]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	68b9      	ldr	r1, [r7, #8]
 800a1c8:	f002 f8a2 	bl	800c310 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	68da      	ldr	r2, [r3, #12]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d4:	425b      	negs	r3, r3
 800a1d6:	441a      	add	r2, r3
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	68da      	ldr	r2, [r3, #12]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d207      	bcs.n	800a1f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	689a      	ldr	r2, [r3, #8]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f0:	425b      	negs	r3, r3
 800a1f2:	441a      	add	r2, r3
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d105      	bne.n	800a20a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d002      	beq.n	800a20a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	3b01      	subs	r3, #1
 800a208:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	1c5a      	adds	r2, r3, #1
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a212:	697b      	ldr	r3, [r7, #20]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3718      	adds	r7, #24
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d018      	beq.n	800a260 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68da      	ldr	r2, [r3, #12]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a236:	441a      	add	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	68da      	ldr	r2, [r3, #12]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	429a      	cmp	r2, r3
 800a246:	d303      	bcc.n	800a250 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	68d9      	ldr	r1, [r3, #12]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a258:	461a      	mov	r2, r3
 800a25a:	6838      	ldr	r0, [r7, #0]
 800a25c:	f002 f858 	bl	800c310 <memcpy>
	}
}
 800a260:	bf00      	nop
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a270:	f001 fd08 	bl	800bc84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a27a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a27c:	e011      	b.n	800a2a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a282:	2b00      	cmp	r3, #0
 800a284:	d012      	beq.n	800a2ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	3324      	adds	r3, #36	; 0x24
 800a28a:	4618      	mov	r0, r3
 800a28c:	f000 fd2a 	bl	800ace4 <xTaskRemoveFromEventList>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d001      	beq.n	800a29a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a296:	f000 fe01 	bl	800ae9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a29a:	7bfb      	ldrb	r3, [r7, #15]
 800a29c:	3b01      	subs	r3, #1
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	dce9      	bgt.n	800a27e <prvUnlockQueue+0x16>
 800a2aa:	e000      	b.n	800a2ae <prvUnlockQueue+0x46>
					break;
 800a2ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	22ff      	movs	r2, #255	; 0xff
 800a2b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a2b6:	f001 fd15 	bl	800bce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a2ba:	f001 fce3 	bl	800bc84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2c6:	e011      	b.n	800a2ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d012      	beq.n	800a2f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	3310      	adds	r3, #16
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f000 fd05 	bl	800ace4 <xTaskRemoveFromEventList>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d001      	beq.n	800a2e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a2e0:	f000 fddc 	bl	800ae9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a2e4:	7bbb      	ldrb	r3, [r7, #14]
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	dce9      	bgt.n	800a2c8 <prvUnlockQueue+0x60>
 800a2f4:	e000      	b.n	800a2f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a2f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	22ff      	movs	r2, #255	; 0xff
 800a2fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a300:	f001 fcf0 	bl	800bce4 <vPortExitCritical>
}
 800a304:	bf00      	nop
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a314:	f001 fcb6 	bl	800bc84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d102      	bne.n	800a326 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a320:	2301      	movs	r3, #1
 800a322:	60fb      	str	r3, [r7, #12]
 800a324:	e001      	b.n	800a32a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a326:	2300      	movs	r3, #0
 800a328:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a32a:	f001 fcdb 	bl	800bce4 <vPortExitCritical>

	return xReturn;
 800a32e:	68fb      	ldr	r3, [r7, #12]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a340:	f001 fca0 	bl	800bc84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d102      	bne.n	800a356 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a350:	2301      	movs	r3, #1
 800a352:	60fb      	str	r3, [r7, #12]
 800a354:	e001      	b.n	800a35a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a356:	2300      	movs	r3, #0
 800a358:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a35a:	f001 fcc3 	bl	800bce4 <vPortExitCritical>

	return xReturn;
 800a35e:	68fb      	ldr	r3, [r7, #12]
}
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a372:	2300      	movs	r3, #0
 800a374:	60fb      	str	r3, [r7, #12]
 800a376:	e014      	b.n	800a3a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a378:	4a0f      	ldr	r2, [pc, #60]	; (800a3b8 <vQueueAddToRegistry+0x50>)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10b      	bne.n	800a39c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a384:	490c      	ldr	r1, [pc, #48]	; (800a3b8 <vQueueAddToRegistry+0x50>)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	683a      	ldr	r2, [r7, #0]
 800a38a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a38e:	4a0a      	ldr	r2, [pc, #40]	; (800a3b8 <vQueueAddToRegistry+0x50>)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	00db      	lsls	r3, r3, #3
 800a394:	4413      	add	r3, r2
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a39a:	e006      	b.n	800a3aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	60fb      	str	r3, [r7, #12]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2b07      	cmp	r3, #7
 800a3a6:	d9e7      	bls.n	800a378 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a3a8:	bf00      	nop
 800a3aa:	bf00      	nop
 800a3ac:	3714      	adds	r7, #20
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	20002080 	.word	0x20002080

0800a3bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b086      	sub	sp, #24
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a3cc:	f001 fc5a 	bl	800bc84 <vPortEnterCritical>
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3d6:	b25b      	sxtb	r3, r3
 800a3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3dc:	d103      	bne.n	800a3e6 <vQueueWaitForMessageRestricted+0x2a>
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3ec:	b25b      	sxtb	r3, r3
 800a3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f2:	d103      	bne.n	800a3fc <vQueueWaitForMessageRestricted+0x40>
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3fc:	f001 fc72 	bl	800bce4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a404:	2b00      	cmp	r3, #0
 800a406:	d106      	bne.n	800a416 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	3324      	adds	r3, #36	; 0x24
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	68b9      	ldr	r1, [r7, #8]
 800a410:	4618      	mov	r0, r3
 800a412:	f000 fc3b 	bl	800ac8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a416:	6978      	ldr	r0, [r7, #20]
 800a418:	f7ff ff26 	bl	800a268 <prvUnlockQueue>
	}
 800a41c:	bf00      	nop
 800a41e:	3718      	adds	r7, #24
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a424:	b580      	push	{r7, lr}
 800a426:	b08e      	sub	sp, #56	; 0x38
 800a428:	af04      	add	r7, sp, #16
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
 800a430:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a434:	2b00      	cmp	r3, #0
 800a436:	d10a      	bne.n	800a44e <xTaskCreateStatic+0x2a>
	__asm volatile
 800a438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43c:	f383 8811 	msr	BASEPRI, r3
 800a440:	f3bf 8f6f 	isb	sy
 800a444:	f3bf 8f4f 	dsb	sy
 800a448:	623b      	str	r3, [r7, #32]
}
 800a44a:	bf00      	nop
 800a44c:	e7fe      	b.n	800a44c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a450:	2b00      	cmp	r3, #0
 800a452:	d10a      	bne.n	800a46a <xTaskCreateStatic+0x46>
	__asm volatile
 800a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	61fb      	str	r3, [r7, #28]
}
 800a466:	bf00      	nop
 800a468:	e7fe      	b.n	800a468 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a46a:	235c      	movs	r3, #92	; 0x5c
 800a46c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	2b5c      	cmp	r3, #92	; 0x5c
 800a472:	d00a      	beq.n	800a48a <xTaskCreateStatic+0x66>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	61bb      	str	r3, [r7, #24]
}
 800a486:	bf00      	nop
 800a488:	e7fe      	b.n	800a488 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a48a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d01e      	beq.n	800a4d0 <xTaskCreateStatic+0xac>
 800a492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a494:	2b00      	cmp	r3, #0
 800a496:	d01b      	beq.n	800a4d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a4:	2202      	movs	r2, #2
 800a4a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	9303      	str	r3, [sp, #12]
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	9302      	str	r3, [sp, #8]
 800a4b2:	f107 0314 	add.w	r3, r7, #20
 800a4b6:	9301      	str	r3, [sp, #4]
 800a4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	68b9      	ldr	r1, [r7, #8]
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	f000 f850 	bl	800a568 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4ca:	f000 f8dd 	bl	800a688 <prvAddNewTaskToReadyList>
 800a4ce:	e001      	b.n	800a4d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a4d4:	697b      	ldr	r3, [r7, #20]
	}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3728      	adds	r7, #40	; 0x28
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b08c      	sub	sp, #48	; 0x30
 800a4e2:	af04      	add	r7, sp, #16
 800a4e4:	60f8      	str	r0, [r7, #12]
 800a4e6:	60b9      	str	r1, [r7, #8]
 800a4e8:	603b      	str	r3, [r7, #0]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a4ee:	88fb      	ldrh	r3, [r7, #6]
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f001 fce8 	bl	800bec8 <pvPortMalloc>
 800a4f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00e      	beq.n	800a51e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a500:	205c      	movs	r0, #92	; 0x5c
 800a502:	f001 fce1 	bl	800bec8 <pvPortMalloc>
 800a506:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d003      	beq.n	800a516 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	697a      	ldr	r2, [r7, #20]
 800a512:	631a      	str	r2, [r3, #48]	; 0x30
 800a514:	e005      	b.n	800a522 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a516:	6978      	ldr	r0, [r7, #20]
 800a518:	f001 fda2 	bl	800c060 <vPortFree>
 800a51c:	e001      	b.n	800a522 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a51e:	2300      	movs	r3, #0
 800a520:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d017      	beq.n	800a558 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a530:	88fa      	ldrh	r2, [r7, #6]
 800a532:	2300      	movs	r3, #0
 800a534:	9303      	str	r3, [sp, #12]
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	9302      	str	r3, [sp, #8]
 800a53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53c:	9301      	str	r3, [sp, #4]
 800a53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a540:	9300      	str	r3, [sp, #0]
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	68b9      	ldr	r1, [r7, #8]
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	f000 f80e 	bl	800a568 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a54c:	69f8      	ldr	r0, [r7, #28]
 800a54e:	f000 f89b 	bl	800a688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a552:	2301      	movs	r3, #1
 800a554:	61bb      	str	r3, [r7, #24]
 800a556:	e002      	b.n	800a55e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a558:	f04f 33ff 	mov.w	r3, #4294967295
 800a55c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a55e:	69bb      	ldr	r3, [r7, #24]
	}
 800a560:	4618      	mov	r0, r3
 800a562:	3720      	adds	r7, #32
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b088      	sub	sp, #32
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]
 800a574:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a578:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	461a      	mov	r2, r3
 800a580:	21a5      	movs	r1, #165	; 0xa5
 800a582:	f001 fed3 	bl	800c32c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a590:	3b01      	subs	r3, #1
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	4413      	add	r3, r2
 800a596:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	f023 0307 	bic.w	r3, r3, #7
 800a59e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	f003 0307 	and.w	r3, r3, #7
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00a      	beq.n	800a5c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ae:	f383 8811 	msr	BASEPRI, r3
 800a5b2:	f3bf 8f6f 	isb	sy
 800a5b6:	f3bf 8f4f 	dsb	sy
 800a5ba:	617b      	str	r3, [r7, #20]
}
 800a5bc:	bf00      	nop
 800a5be:	e7fe      	b.n	800a5be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d01f      	beq.n	800a606 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	61fb      	str	r3, [r7, #28]
 800a5ca:	e012      	b.n	800a5f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	7819      	ldrb	r1, [r3, #0]
 800a5d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	4413      	add	r3, r2
 800a5da:	3334      	adds	r3, #52	; 0x34
 800a5dc:	460a      	mov	r2, r1
 800a5de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d006      	beq.n	800a5fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	61fb      	str	r3, [r7, #28]
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	2b0f      	cmp	r3, #15
 800a5f6:	d9e9      	bls.n	800a5cc <prvInitialiseNewTask+0x64>
 800a5f8:	e000      	b.n	800a5fc <prvInitialiseNewTask+0x94>
			{
				break;
 800a5fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fe:	2200      	movs	r2, #0
 800a600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a604:	e003      	b.n	800a60e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a608:	2200      	movs	r2, #0
 800a60a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a610:	2b37      	cmp	r3, #55	; 0x37
 800a612:	d901      	bls.n	800a618 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a614:	2337      	movs	r3, #55	; 0x37
 800a616:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a61c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a622:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a626:	2200      	movs	r2, #0
 800a628:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62c:	3304      	adds	r3, #4
 800a62e:	4618      	mov	r0, r3
 800a630:	f7ff f93e 	bl	80098b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a636:	3318      	adds	r3, #24
 800a638:	4618      	mov	r0, r3
 800a63a:	f7ff f939 	bl	80098b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a642:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a646:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a652:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a656:	2200      	movs	r2, #0
 800a658:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a662:	683a      	ldr	r2, [r7, #0]
 800a664:	68f9      	ldr	r1, [r7, #12]
 800a666:	69b8      	ldr	r0, [r7, #24]
 800a668:	f001 f9e0 	bl	800ba2c <pxPortInitialiseStack>
 800a66c:	4602      	mov	r2, r0
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a674:	2b00      	cmp	r3, #0
 800a676:	d002      	beq.n	800a67e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a67c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a67e:	bf00      	nop
 800a680:	3720      	adds	r7, #32
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
	...

0800a688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a690:	f001 faf8 	bl	800bc84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a694:	4b2d      	ldr	r3, [pc, #180]	; (800a74c <prvAddNewTaskToReadyList+0xc4>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	3301      	adds	r3, #1
 800a69a:	4a2c      	ldr	r2, [pc, #176]	; (800a74c <prvAddNewTaskToReadyList+0xc4>)
 800a69c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a69e:	4b2c      	ldr	r3, [pc, #176]	; (800a750 <prvAddNewTaskToReadyList+0xc8>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d109      	bne.n	800a6ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a6a6:	4a2a      	ldr	r2, [pc, #168]	; (800a750 <prvAddNewTaskToReadyList+0xc8>)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a6ac:	4b27      	ldr	r3, [pc, #156]	; (800a74c <prvAddNewTaskToReadyList+0xc4>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d110      	bne.n	800a6d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a6b4:	f000 fc16 	bl	800aee4 <prvInitialiseTaskLists>
 800a6b8:	e00d      	b.n	800a6d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a6ba:	4b26      	ldr	r3, [pc, #152]	; (800a754 <prvAddNewTaskToReadyList+0xcc>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d109      	bne.n	800a6d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a6c2:	4b23      	ldr	r3, [pc, #140]	; (800a750 <prvAddNewTaskToReadyList+0xc8>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d802      	bhi.n	800a6d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a6d0:	4a1f      	ldr	r2, [pc, #124]	; (800a750 <prvAddNewTaskToReadyList+0xc8>)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a6d6:	4b20      	ldr	r3, [pc, #128]	; (800a758 <prvAddNewTaskToReadyList+0xd0>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	4a1e      	ldr	r2, [pc, #120]	; (800a758 <prvAddNewTaskToReadyList+0xd0>)
 800a6de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a6e0:	4b1d      	ldr	r3, [pc, #116]	; (800a758 <prvAddNewTaskToReadyList+0xd0>)
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ec:	4b1b      	ldr	r3, [pc, #108]	; (800a75c <prvAddNewTaskToReadyList+0xd4>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d903      	bls.n	800a6fc <prvAddNewTaskToReadyList+0x74>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f8:	4a18      	ldr	r2, [pc, #96]	; (800a75c <prvAddNewTaskToReadyList+0xd4>)
 800a6fa:	6013      	str	r3, [r2, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a700:	4613      	mov	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	4413      	add	r3, r2
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	4a15      	ldr	r2, [pc, #84]	; (800a760 <prvAddNewTaskToReadyList+0xd8>)
 800a70a:	441a      	add	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	3304      	adds	r3, #4
 800a710:	4619      	mov	r1, r3
 800a712:	4610      	mov	r0, r2
 800a714:	f7ff f8d9 	bl	80098ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a718:	f001 fae4 	bl	800bce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a71c:	4b0d      	ldr	r3, [pc, #52]	; (800a754 <prvAddNewTaskToReadyList+0xcc>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d00e      	beq.n	800a742 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a724:	4b0a      	ldr	r3, [pc, #40]	; (800a750 <prvAddNewTaskToReadyList+0xc8>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72e:	429a      	cmp	r2, r3
 800a730:	d207      	bcs.n	800a742 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a732:	4b0c      	ldr	r3, [pc, #48]	; (800a764 <prvAddNewTaskToReadyList+0xdc>)
 800a734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a738:	601a      	str	r2, [r3, #0]
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a742:	bf00      	nop
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	20002594 	.word	0x20002594
 800a750:	200020c0 	.word	0x200020c0
 800a754:	200025a0 	.word	0x200025a0
 800a758:	200025b0 	.word	0x200025b0
 800a75c:	2000259c 	.word	0x2000259c
 800a760:	200020c4 	.word	0x200020c4
 800a764:	e000ed04 	.word	0xe000ed04

0800a768 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a770:	2300      	movs	r3, #0
 800a772:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d017      	beq.n	800a7aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a77a:	4b13      	ldr	r3, [pc, #76]	; (800a7c8 <vTaskDelay+0x60>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00a      	beq.n	800a798 <vTaskDelay+0x30>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	60bb      	str	r3, [r7, #8]
}
 800a794:	bf00      	nop
 800a796:	e7fe      	b.n	800a796 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a798:	f000 f880 	bl	800a89c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a79c:	2100      	movs	r1, #0
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fda2 	bl	800b2e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a7a4:	f000 f888 	bl	800a8b8 <xTaskResumeAll>
 800a7a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d107      	bne.n	800a7c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a7b0:	4b06      	ldr	r3, [pc, #24]	; (800a7cc <vTaskDelay+0x64>)
 800a7b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7b6:	601a      	str	r2, [r3, #0]
 800a7b8:	f3bf 8f4f 	dsb	sy
 800a7bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7c0:	bf00      	nop
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	200025bc 	.word	0x200025bc
 800a7cc:	e000ed04 	.word	0xe000ed04

0800a7d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b08a      	sub	sp, #40	; 0x28
 800a7d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a7de:	463a      	mov	r2, r7
 800a7e0:	1d39      	adds	r1, r7, #4
 800a7e2:	f107 0308 	add.w	r3, r7, #8
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7ff f80e 	bl	8009808 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a7ec:	6839      	ldr	r1, [r7, #0]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	9202      	str	r2, [sp, #8]
 800a7f4:	9301      	str	r3, [sp, #4]
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	460a      	mov	r2, r1
 800a7fe:	4921      	ldr	r1, [pc, #132]	; (800a884 <vTaskStartScheduler+0xb4>)
 800a800:	4821      	ldr	r0, [pc, #132]	; (800a888 <vTaskStartScheduler+0xb8>)
 800a802:	f7ff fe0f 	bl	800a424 <xTaskCreateStatic>
 800a806:	4603      	mov	r3, r0
 800a808:	4a20      	ldr	r2, [pc, #128]	; (800a88c <vTaskStartScheduler+0xbc>)
 800a80a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a80c:	4b1f      	ldr	r3, [pc, #124]	; (800a88c <vTaskStartScheduler+0xbc>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d002      	beq.n	800a81a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a814:	2301      	movs	r3, #1
 800a816:	617b      	str	r3, [r7, #20]
 800a818:	e001      	b.n	800a81e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a81a:	2300      	movs	r3, #0
 800a81c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	2b01      	cmp	r3, #1
 800a822:	d102      	bne.n	800a82a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a824:	f000 fdb4 	bl	800b390 <xTimerCreateTimerTask>
 800a828:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d116      	bne.n	800a85e <vTaskStartScheduler+0x8e>
	__asm volatile
 800a830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	613b      	str	r3, [r7, #16]
}
 800a842:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a844:	4b12      	ldr	r3, [pc, #72]	; (800a890 <vTaskStartScheduler+0xc0>)
 800a846:	f04f 32ff 	mov.w	r2, #4294967295
 800a84a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a84c:	4b11      	ldr	r3, [pc, #68]	; (800a894 <vTaskStartScheduler+0xc4>)
 800a84e:	2201      	movs	r2, #1
 800a850:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a852:	4b11      	ldr	r3, [pc, #68]	; (800a898 <vTaskStartScheduler+0xc8>)
 800a854:	2200      	movs	r2, #0
 800a856:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a858:	f001 f972 	bl	800bb40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a85c:	e00e      	b.n	800a87c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a864:	d10a      	bne.n	800a87c <vTaskStartScheduler+0xac>
	__asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	60fb      	str	r3, [r7, #12]
}
 800a878:	bf00      	nop
 800a87a:	e7fe      	b.n	800a87a <vTaskStartScheduler+0xaa>
}
 800a87c:	bf00      	nop
 800a87e:	3718      	adds	r7, #24
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}
 800a884:	0800e224 	.word	0x0800e224
 800a888:	0800aeb5 	.word	0x0800aeb5
 800a88c:	200025b8 	.word	0x200025b8
 800a890:	200025b4 	.word	0x200025b4
 800a894:	200025a0 	.word	0x200025a0
 800a898:	20002598 	.word	0x20002598

0800a89c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a89c:	b480      	push	{r7}
 800a89e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a8a0:	4b04      	ldr	r3, [pc, #16]	; (800a8b4 <vTaskSuspendAll+0x18>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	4a03      	ldr	r2, [pc, #12]	; (800a8b4 <vTaskSuspendAll+0x18>)
 800a8a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a8aa:	bf00      	nop
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr
 800a8b4:	200025bc 	.word	0x200025bc

0800a8b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a8c6:	4b42      	ldr	r3, [pc, #264]	; (800a9d0 <xTaskResumeAll+0x118>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d10a      	bne.n	800a8e4 <xTaskResumeAll+0x2c>
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	603b      	str	r3, [r7, #0]
}
 800a8e0:	bf00      	nop
 800a8e2:	e7fe      	b.n	800a8e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a8e4:	f001 f9ce 	bl	800bc84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a8e8:	4b39      	ldr	r3, [pc, #228]	; (800a9d0 <xTaskResumeAll+0x118>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	4a38      	ldr	r2, [pc, #224]	; (800a9d0 <xTaskResumeAll+0x118>)
 800a8f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8f2:	4b37      	ldr	r3, [pc, #220]	; (800a9d0 <xTaskResumeAll+0x118>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d162      	bne.n	800a9c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a8fa:	4b36      	ldr	r3, [pc, #216]	; (800a9d4 <xTaskResumeAll+0x11c>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d05e      	beq.n	800a9c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a902:	e02f      	b.n	800a964 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a904:	4b34      	ldr	r3, [pc, #208]	; (800a9d8 <xTaskResumeAll+0x120>)
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	3318      	adds	r3, #24
 800a910:	4618      	mov	r0, r3
 800a912:	f7ff f837 	bl	8009984 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	3304      	adds	r3, #4
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7ff f832 	bl	8009984 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a924:	4b2d      	ldr	r3, [pc, #180]	; (800a9dc <xTaskResumeAll+0x124>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d903      	bls.n	800a934 <xTaskResumeAll+0x7c>
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a930:	4a2a      	ldr	r2, [pc, #168]	; (800a9dc <xTaskResumeAll+0x124>)
 800a932:	6013      	str	r3, [r2, #0]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a938:	4613      	mov	r3, r2
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	4413      	add	r3, r2
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	4a27      	ldr	r2, [pc, #156]	; (800a9e0 <xTaskResumeAll+0x128>)
 800a942:	441a      	add	r2, r3
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	3304      	adds	r3, #4
 800a948:	4619      	mov	r1, r3
 800a94a:	4610      	mov	r0, r2
 800a94c:	f7fe ffbd 	bl	80098ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a954:	4b23      	ldr	r3, [pc, #140]	; (800a9e4 <xTaskResumeAll+0x12c>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d302      	bcc.n	800a964 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a95e:	4b22      	ldr	r3, [pc, #136]	; (800a9e8 <xTaskResumeAll+0x130>)
 800a960:	2201      	movs	r2, #1
 800a962:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a964:	4b1c      	ldr	r3, [pc, #112]	; (800a9d8 <xTaskResumeAll+0x120>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1cb      	bne.n	800a904 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a972:	f000 fb55 	bl	800b020 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a976:	4b1d      	ldr	r3, [pc, #116]	; (800a9ec <xTaskResumeAll+0x134>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d010      	beq.n	800a9a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a982:	f000 f847 	bl	800aa14 <xTaskIncrementTick>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d002      	beq.n	800a992 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a98c:	4b16      	ldr	r3, [pc, #88]	; (800a9e8 <xTaskResumeAll+0x130>)
 800a98e:	2201      	movs	r2, #1
 800a990:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	3b01      	subs	r3, #1
 800a996:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1f1      	bne.n	800a982 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a99e:	4b13      	ldr	r3, [pc, #76]	; (800a9ec <xTaskResumeAll+0x134>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a9a4:	4b10      	ldr	r3, [pc, #64]	; (800a9e8 <xTaskResumeAll+0x130>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d009      	beq.n	800a9c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a9b0:	4b0f      	ldr	r3, [pc, #60]	; (800a9f0 <xTaskResumeAll+0x138>)
 800a9b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9b6:	601a      	str	r2, [r3, #0]
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9c0:	f001 f990 	bl	800bce4 <vPortExitCritical>

	return xAlreadyYielded;
 800a9c4:	68bb      	ldr	r3, [r7, #8]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	200025bc 	.word	0x200025bc
 800a9d4:	20002594 	.word	0x20002594
 800a9d8:	20002554 	.word	0x20002554
 800a9dc:	2000259c 	.word	0x2000259c
 800a9e0:	200020c4 	.word	0x200020c4
 800a9e4:	200020c0 	.word	0x200020c0
 800a9e8:	200025a8 	.word	0x200025a8
 800a9ec:	200025a4 	.word	0x200025a4
 800a9f0:	e000ed04 	.word	0xe000ed04

0800a9f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a9fa:	4b05      	ldr	r3, [pc, #20]	; (800aa10 <xTaskGetTickCount+0x1c>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa00:	687b      	ldr	r3, [r7, #4]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	370c      	adds	r7, #12
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	20002598 	.word	0x20002598

0800aa14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b086      	sub	sp, #24
 800aa18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa1e:	4b4f      	ldr	r3, [pc, #316]	; (800ab5c <xTaskIncrementTick+0x148>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f040 808f 	bne.w	800ab46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa28:	4b4d      	ldr	r3, [pc, #308]	; (800ab60 <xTaskIncrementTick+0x14c>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa30:	4a4b      	ldr	r2, [pc, #300]	; (800ab60 <xTaskIncrementTick+0x14c>)
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d120      	bne.n	800aa7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa3c:	4b49      	ldr	r3, [pc, #292]	; (800ab64 <xTaskIncrementTick+0x150>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d00a      	beq.n	800aa5c <xTaskIncrementTick+0x48>
	__asm volatile
 800aa46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4a:	f383 8811 	msr	BASEPRI, r3
 800aa4e:	f3bf 8f6f 	isb	sy
 800aa52:	f3bf 8f4f 	dsb	sy
 800aa56:	603b      	str	r3, [r7, #0]
}
 800aa58:	bf00      	nop
 800aa5a:	e7fe      	b.n	800aa5a <xTaskIncrementTick+0x46>
 800aa5c:	4b41      	ldr	r3, [pc, #260]	; (800ab64 <xTaskIncrementTick+0x150>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	60fb      	str	r3, [r7, #12]
 800aa62:	4b41      	ldr	r3, [pc, #260]	; (800ab68 <xTaskIncrementTick+0x154>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a3f      	ldr	r2, [pc, #252]	; (800ab64 <xTaskIncrementTick+0x150>)
 800aa68:	6013      	str	r3, [r2, #0]
 800aa6a:	4a3f      	ldr	r2, [pc, #252]	; (800ab68 <xTaskIncrementTick+0x154>)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6013      	str	r3, [r2, #0]
 800aa70:	4b3e      	ldr	r3, [pc, #248]	; (800ab6c <xTaskIncrementTick+0x158>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	3301      	adds	r3, #1
 800aa76:	4a3d      	ldr	r2, [pc, #244]	; (800ab6c <xTaskIncrementTick+0x158>)
 800aa78:	6013      	str	r3, [r2, #0]
 800aa7a:	f000 fad1 	bl	800b020 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aa7e:	4b3c      	ldr	r3, [pc, #240]	; (800ab70 <xTaskIncrementTick+0x15c>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	693a      	ldr	r2, [r7, #16]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d349      	bcc.n	800ab1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa88:	4b36      	ldr	r3, [pc, #216]	; (800ab64 <xTaskIncrementTick+0x150>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d104      	bne.n	800aa9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa92:	4b37      	ldr	r3, [pc, #220]	; (800ab70 <xTaskIncrementTick+0x15c>)
 800aa94:	f04f 32ff 	mov.w	r2, #4294967295
 800aa98:	601a      	str	r2, [r3, #0]
					break;
 800aa9a:	e03f      	b.n	800ab1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa9c:	4b31      	ldr	r3, [pc, #196]	; (800ab64 <xTaskIncrementTick+0x150>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aaac:	693a      	ldr	r2, [r7, #16]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d203      	bcs.n	800aabc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aab4:	4a2e      	ldr	r2, [pc, #184]	; (800ab70 <xTaskIncrementTick+0x15c>)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aaba:	e02f      	b.n	800ab1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	3304      	adds	r3, #4
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7fe ff5f 	bl	8009984 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d004      	beq.n	800aad8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	3318      	adds	r3, #24
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7fe ff56 	bl	8009984 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aadc:	4b25      	ldr	r3, [pc, #148]	; (800ab74 <xTaskIncrementTick+0x160>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d903      	bls.n	800aaec <xTaskIncrementTick+0xd8>
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae8:	4a22      	ldr	r2, [pc, #136]	; (800ab74 <xTaskIncrementTick+0x160>)
 800aaea:	6013      	str	r3, [r2, #0]
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	4413      	add	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	4a1f      	ldr	r2, [pc, #124]	; (800ab78 <xTaskIncrementTick+0x164>)
 800aafa:	441a      	add	r2, r3
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	3304      	adds	r3, #4
 800ab00:	4619      	mov	r1, r3
 800ab02:	4610      	mov	r0, r2
 800ab04:	f7fe fee1 	bl	80098ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab0c:	4b1b      	ldr	r3, [pc, #108]	; (800ab7c <xTaskIncrementTick+0x168>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d3b8      	bcc.n	800aa88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ab16:	2301      	movs	r3, #1
 800ab18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab1a:	e7b5      	b.n	800aa88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab1c:	4b17      	ldr	r3, [pc, #92]	; (800ab7c <xTaskIncrementTick+0x168>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab22:	4915      	ldr	r1, [pc, #84]	; (800ab78 <xTaskIncrementTick+0x164>)
 800ab24:	4613      	mov	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	4413      	add	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	440b      	add	r3, r1
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d901      	bls.n	800ab38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ab34:	2301      	movs	r3, #1
 800ab36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab38:	4b11      	ldr	r3, [pc, #68]	; (800ab80 <xTaskIncrementTick+0x16c>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d007      	beq.n	800ab50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ab40:	2301      	movs	r3, #1
 800ab42:	617b      	str	r3, [r7, #20]
 800ab44:	e004      	b.n	800ab50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ab46:	4b0f      	ldr	r3, [pc, #60]	; (800ab84 <xTaskIncrementTick+0x170>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	4a0d      	ldr	r2, [pc, #52]	; (800ab84 <xTaskIncrementTick+0x170>)
 800ab4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab50:	697b      	ldr	r3, [r7, #20]
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3718      	adds	r7, #24
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	200025bc 	.word	0x200025bc
 800ab60:	20002598 	.word	0x20002598
 800ab64:	2000254c 	.word	0x2000254c
 800ab68:	20002550 	.word	0x20002550
 800ab6c:	200025ac 	.word	0x200025ac
 800ab70:	200025b4 	.word	0x200025b4
 800ab74:	2000259c 	.word	0x2000259c
 800ab78:	200020c4 	.word	0x200020c4
 800ab7c:	200020c0 	.word	0x200020c0
 800ab80:	200025a8 	.word	0x200025a8
 800ab84:	200025a4 	.word	0x200025a4

0800ab88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ab8e:	4b28      	ldr	r3, [pc, #160]	; (800ac30 <vTaskSwitchContext+0xa8>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d003      	beq.n	800ab9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ab96:	4b27      	ldr	r3, [pc, #156]	; (800ac34 <vTaskSwitchContext+0xac>)
 800ab98:	2201      	movs	r2, #1
 800ab9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ab9c:	e041      	b.n	800ac22 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ab9e:	4b25      	ldr	r3, [pc, #148]	; (800ac34 <vTaskSwitchContext+0xac>)
 800aba0:	2200      	movs	r2, #0
 800aba2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aba4:	4b24      	ldr	r3, [pc, #144]	; (800ac38 <vTaskSwitchContext+0xb0>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	60fb      	str	r3, [r7, #12]
 800abaa:	e010      	b.n	800abce <vTaskSwitchContext+0x46>
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10a      	bne.n	800abc8 <vTaskSwitchContext+0x40>
	__asm volatile
 800abb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb6:	f383 8811 	msr	BASEPRI, r3
 800abba:	f3bf 8f6f 	isb	sy
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	607b      	str	r3, [r7, #4]
}
 800abc4:	bf00      	nop
 800abc6:	e7fe      	b.n	800abc6 <vTaskSwitchContext+0x3e>
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	3b01      	subs	r3, #1
 800abcc:	60fb      	str	r3, [r7, #12]
 800abce:	491b      	ldr	r1, [pc, #108]	; (800ac3c <vTaskSwitchContext+0xb4>)
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	4613      	mov	r3, r2
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	4413      	add	r3, r2
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	440b      	add	r3, r1
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d0e4      	beq.n	800abac <vTaskSwitchContext+0x24>
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	4613      	mov	r3, r2
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	4413      	add	r3, r2
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	4a13      	ldr	r2, [pc, #76]	; (800ac3c <vTaskSwitchContext+0xb4>)
 800abee:	4413      	add	r3, r2
 800abf0:	60bb      	str	r3, [r7, #8]
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	685a      	ldr	r2, [r3, #4]
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	605a      	str	r2, [r3, #4]
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	685a      	ldr	r2, [r3, #4]
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	3308      	adds	r3, #8
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d104      	bne.n	800ac12 <vTaskSwitchContext+0x8a>
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	685a      	ldr	r2, [r3, #4]
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	605a      	str	r2, [r3, #4]
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	4a09      	ldr	r2, [pc, #36]	; (800ac40 <vTaskSwitchContext+0xb8>)
 800ac1a:	6013      	str	r3, [r2, #0]
 800ac1c:	4a06      	ldr	r2, [pc, #24]	; (800ac38 <vTaskSwitchContext+0xb0>)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6013      	str	r3, [r2, #0]
}
 800ac22:	bf00      	nop
 800ac24:	3714      	adds	r7, #20
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	200025bc 	.word	0x200025bc
 800ac34:	200025a8 	.word	0x200025a8
 800ac38:	2000259c 	.word	0x2000259c
 800ac3c:	200020c4 	.word	0x200020c4
 800ac40:	200020c0 	.word	0x200020c0

0800ac44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10a      	bne.n	800ac6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ac54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac58:	f383 8811 	msr	BASEPRI, r3
 800ac5c:	f3bf 8f6f 	isb	sy
 800ac60:	f3bf 8f4f 	dsb	sy
 800ac64:	60fb      	str	r3, [r7, #12]
}
 800ac66:	bf00      	nop
 800ac68:	e7fe      	b.n	800ac68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac6a:	4b07      	ldr	r3, [pc, #28]	; (800ac88 <vTaskPlaceOnEventList+0x44>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	3318      	adds	r3, #24
 800ac70:	4619      	mov	r1, r3
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7fe fe4d 	bl	8009912 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ac78:	2101      	movs	r1, #1
 800ac7a:	6838      	ldr	r0, [r7, #0]
 800ac7c:	f000 fb34 	bl	800b2e8 <prvAddCurrentTaskToDelayedList>
}
 800ac80:	bf00      	nop
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	200020c0 	.word	0x200020c0

0800ac8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b086      	sub	sp, #24
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d10a      	bne.n	800acb4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	617b      	str	r3, [r7, #20]
}
 800acb0:	bf00      	nop
 800acb2:	e7fe      	b.n	800acb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acb4:	4b0a      	ldr	r3, [pc, #40]	; (800ace0 <vTaskPlaceOnEventListRestricted+0x54>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	3318      	adds	r3, #24
 800acba:	4619      	mov	r1, r3
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f7fe fe04 	bl	80098ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d002      	beq.n	800acce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800acc8:	f04f 33ff 	mov.w	r3, #4294967295
 800accc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800acce:	6879      	ldr	r1, [r7, #4]
 800acd0:	68b8      	ldr	r0, [r7, #8]
 800acd2:	f000 fb09 	bl	800b2e8 <prvAddCurrentTaskToDelayedList>
	}
 800acd6:	bf00      	nop
 800acd8:	3718      	adds	r7, #24
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	200020c0 	.word	0x200020c0

0800ace4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b086      	sub	sp, #24
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d10a      	bne.n	800ad10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800acfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfe:	f383 8811 	msr	BASEPRI, r3
 800ad02:	f3bf 8f6f 	isb	sy
 800ad06:	f3bf 8f4f 	dsb	sy
 800ad0a:	60fb      	str	r3, [r7, #12]
}
 800ad0c:	bf00      	nop
 800ad0e:	e7fe      	b.n	800ad0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	3318      	adds	r3, #24
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7fe fe35 	bl	8009984 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad1a:	4b1e      	ldr	r3, [pc, #120]	; (800ad94 <xTaskRemoveFromEventList+0xb0>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d11d      	bne.n	800ad5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	3304      	adds	r3, #4
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7fe fe2c 	bl	8009984 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad30:	4b19      	ldr	r3, [pc, #100]	; (800ad98 <xTaskRemoveFromEventList+0xb4>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d903      	bls.n	800ad40 <xTaskRemoveFromEventList+0x5c>
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad3c:	4a16      	ldr	r2, [pc, #88]	; (800ad98 <xTaskRemoveFromEventList+0xb4>)
 800ad3e:	6013      	str	r3, [r2, #0]
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad44:	4613      	mov	r3, r2
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	4413      	add	r3, r2
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	4a13      	ldr	r2, [pc, #76]	; (800ad9c <xTaskRemoveFromEventList+0xb8>)
 800ad4e:	441a      	add	r2, r3
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	3304      	adds	r3, #4
 800ad54:	4619      	mov	r1, r3
 800ad56:	4610      	mov	r0, r2
 800ad58:	f7fe fdb7 	bl	80098ca <vListInsertEnd>
 800ad5c:	e005      	b.n	800ad6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	3318      	adds	r3, #24
 800ad62:	4619      	mov	r1, r3
 800ad64:	480e      	ldr	r0, [pc, #56]	; (800ada0 <xTaskRemoveFromEventList+0xbc>)
 800ad66:	f7fe fdb0 	bl	80098ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad6e:	4b0d      	ldr	r3, [pc, #52]	; (800ada4 <xTaskRemoveFromEventList+0xc0>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d905      	bls.n	800ad84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ad7c:	4b0a      	ldr	r3, [pc, #40]	; (800ada8 <xTaskRemoveFromEventList+0xc4>)
 800ad7e:	2201      	movs	r2, #1
 800ad80:	601a      	str	r2, [r3, #0]
 800ad82:	e001      	b.n	800ad88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ad84:	2300      	movs	r3, #0
 800ad86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ad88:	697b      	ldr	r3, [r7, #20]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3718      	adds	r7, #24
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	200025bc 	.word	0x200025bc
 800ad98:	2000259c 	.word	0x2000259c
 800ad9c:	200020c4 	.word	0x200020c4
 800ada0:	20002554 	.word	0x20002554
 800ada4:	200020c0 	.word	0x200020c0
 800ada8:	200025a8 	.word	0x200025a8

0800adac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800adb4:	4b06      	ldr	r3, [pc, #24]	; (800add0 <vTaskInternalSetTimeOutState+0x24>)
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800adbc:	4b05      	ldr	r3, [pc, #20]	; (800add4 <vTaskInternalSetTimeOutState+0x28>)
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	605a      	str	r2, [r3, #4]
}
 800adc4:	bf00      	nop
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr
 800add0:	200025ac 	.word	0x200025ac
 800add4:	20002598 	.word	0x20002598

0800add8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b088      	sub	sp, #32
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10a      	bne.n	800adfe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ade8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adec:	f383 8811 	msr	BASEPRI, r3
 800adf0:	f3bf 8f6f 	isb	sy
 800adf4:	f3bf 8f4f 	dsb	sy
 800adf8:	613b      	str	r3, [r7, #16]
}
 800adfa:	bf00      	nop
 800adfc:	e7fe      	b.n	800adfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d10a      	bne.n	800ae1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ae04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae08:	f383 8811 	msr	BASEPRI, r3
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	60fb      	str	r3, [r7, #12]
}
 800ae16:	bf00      	nop
 800ae18:	e7fe      	b.n	800ae18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ae1a:	f000 ff33 	bl	800bc84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae1e:	4b1d      	ldr	r3, [pc, #116]	; (800ae94 <xTaskCheckForTimeOut+0xbc>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	69ba      	ldr	r2, [r7, #24]
 800ae2a:	1ad3      	subs	r3, r2, r3
 800ae2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae36:	d102      	bne.n	800ae3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	61fb      	str	r3, [r7, #28]
 800ae3c:	e023      	b.n	800ae86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	4b15      	ldr	r3, [pc, #84]	; (800ae98 <xTaskCheckForTimeOut+0xc0>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d007      	beq.n	800ae5a <xTaskCheckForTimeOut+0x82>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	69ba      	ldr	r2, [r7, #24]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d302      	bcc.n	800ae5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ae54:	2301      	movs	r3, #1
 800ae56:	61fb      	str	r3, [r7, #28]
 800ae58:	e015      	b.n	800ae86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d20b      	bcs.n	800ae7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	681a      	ldr	r2, [r3, #0]
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	1ad2      	subs	r2, r2, r3
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f7ff ff9b 	bl	800adac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ae76:	2300      	movs	r3, #0
 800ae78:	61fb      	str	r3, [r7, #28]
 800ae7a:	e004      	b.n	800ae86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ae82:	2301      	movs	r3, #1
 800ae84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ae86:	f000 ff2d 	bl	800bce4 <vPortExitCritical>

	return xReturn;
 800ae8a:	69fb      	ldr	r3, [r7, #28]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3720      	adds	r7, #32
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	20002598 	.word	0x20002598
 800ae98:	200025ac 	.word	0x200025ac

0800ae9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aea0:	4b03      	ldr	r3, [pc, #12]	; (800aeb0 <vTaskMissedYield+0x14>)
 800aea2:	2201      	movs	r2, #1
 800aea4:	601a      	str	r2, [r3, #0]
}
 800aea6:	bf00      	nop
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr
 800aeb0:	200025a8 	.word	0x200025a8

0800aeb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aebc:	f000 f852 	bl	800af64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aec0:	4b06      	ldr	r3, [pc, #24]	; (800aedc <prvIdleTask+0x28>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d9f9      	bls.n	800aebc <prvIdleTask+0x8>
			{
				taskYIELD();
 800aec8:	4b05      	ldr	r3, [pc, #20]	; (800aee0 <prvIdleTask+0x2c>)
 800aeca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aece:	601a      	str	r2, [r3, #0]
 800aed0:	f3bf 8f4f 	dsb	sy
 800aed4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aed8:	e7f0      	b.n	800aebc <prvIdleTask+0x8>
 800aeda:	bf00      	nop
 800aedc:	200020c4 	.word	0x200020c4
 800aee0:	e000ed04 	.word	0xe000ed04

0800aee4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aeea:	2300      	movs	r3, #0
 800aeec:	607b      	str	r3, [r7, #4]
 800aeee:	e00c      	b.n	800af0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	4613      	mov	r3, r2
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	4413      	add	r3, r2
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	4a12      	ldr	r2, [pc, #72]	; (800af44 <prvInitialiseTaskLists+0x60>)
 800aefc:	4413      	add	r3, r2
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fe fcb6 	bl	8009870 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	3301      	adds	r3, #1
 800af08:	607b      	str	r3, [r7, #4]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2b37      	cmp	r3, #55	; 0x37
 800af0e:	d9ef      	bls.n	800aef0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af10:	480d      	ldr	r0, [pc, #52]	; (800af48 <prvInitialiseTaskLists+0x64>)
 800af12:	f7fe fcad 	bl	8009870 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800af16:	480d      	ldr	r0, [pc, #52]	; (800af4c <prvInitialiseTaskLists+0x68>)
 800af18:	f7fe fcaa 	bl	8009870 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800af1c:	480c      	ldr	r0, [pc, #48]	; (800af50 <prvInitialiseTaskLists+0x6c>)
 800af1e:	f7fe fca7 	bl	8009870 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800af22:	480c      	ldr	r0, [pc, #48]	; (800af54 <prvInitialiseTaskLists+0x70>)
 800af24:	f7fe fca4 	bl	8009870 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800af28:	480b      	ldr	r0, [pc, #44]	; (800af58 <prvInitialiseTaskLists+0x74>)
 800af2a:	f7fe fca1 	bl	8009870 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800af2e:	4b0b      	ldr	r3, [pc, #44]	; (800af5c <prvInitialiseTaskLists+0x78>)
 800af30:	4a05      	ldr	r2, [pc, #20]	; (800af48 <prvInitialiseTaskLists+0x64>)
 800af32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800af34:	4b0a      	ldr	r3, [pc, #40]	; (800af60 <prvInitialiseTaskLists+0x7c>)
 800af36:	4a05      	ldr	r2, [pc, #20]	; (800af4c <prvInitialiseTaskLists+0x68>)
 800af38:	601a      	str	r2, [r3, #0]
}
 800af3a:	bf00      	nop
 800af3c:	3708      	adds	r7, #8
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	200020c4 	.word	0x200020c4
 800af48:	20002524 	.word	0x20002524
 800af4c:	20002538 	.word	0x20002538
 800af50:	20002554 	.word	0x20002554
 800af54:	20002568 	.word	0x20002568
 800af58:	20002580 	.word	0x20002580
 800af5c:	2000254c 	.word	0x2000254c
 800af60:	20002550 	.word	0x20002550

0800af64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af6a:	e019      	b.n	800afa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800af6c:	f000 fe8a 	bl	800bc84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af70:	4b10      	ldr	r3, [pc, #64]	; (800afb4 <prvCheckTasksWaitingTermination+0x50>)
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	3304      	adds	r3, #4
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7fe fd01 	bl	8009984 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800af82:	4b0d      	ldr	r3, [pc, #52]	; (800afb8 <prvCheckTasksWaitingTermination+0x54>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	3b01      	subs	r3, #1
 800af88:	4a0b      	ldr	r2, [pc, #44]	; (800afb8 <prvCheckTasksWaitingTermination+0x54>)
 800af8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800af8c:	4b0b      	ldr	r3, [pc, #44]	; (800afbc <prvCheckTasksWaitingTermination+0x58>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	3b01      	subs	r3, #1
 800af92:	4a0a      	ldr	r2, [pc, #40]	; (800afbc <prvCheckTasksWaitingTermination+0x58>)
 800af94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800af96:	f000 fea5 	bl	800bce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f810 	bl	800afc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afa0:	4b06      	ldr	r3, [pc, #24]	; (800afbc <prvCheckTasksWaitingTermination+0x58>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d1e1      	bne.n	800af6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800afa8:	bf00      	nop
 800afaa:	bf00      	nop
 800afac:	3708      	adds	r7, #8
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	20002568 	.word	0x20002568
 800afb8:	20002594 	.word	0x20002594
 800afbc:	2000257c 	.word	0x2000257c

0800afc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d108      	bne.n	800afe4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd6:	4618      	mov	r0, r3
 800afd8:	f001 f842 	bl	800c060 <vPortFree>
				vPortFree( pxTCB );
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f001 f83f 	bl	800c060 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800afe2:	e018      	b.n	800b016 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800afea:	2b01      	cmp	r3, #1
 800afec:	d103      	bne.n	800aff6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f001 f836 	bl	800c060 <vPortFree>
	}
 800aff4:	e00f      	b.n	800b016 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800affc:	2b02      	cmp	r3, #2
 800affe:	d00a      	beq.n	800b016 <prvDeleteTCB+0x56>
	__asm volatile
 800b000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b004:	f383 8811 	msr	BASEPRI, r3
 800b008:	f3bf 8f6f 	isb	sy
 800b00c:	f3bf 8f4f 	dsb	sy
 800b010:	60fb      	str	r3, [r7, #12]
}
 800b012:	bf00      	nop
 800b014:	e7fe      	b.n	800b014 <prvDeleteTCB+0x54>
	}
 800b016:	bf00      	nop
 800b018:	3710      	adds	r7, #16
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
	...

0800b020 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b026:	4b0c      	ldr	r3, [pc, #48]	; (800b058 <prvResetNextTaskUnblockTime+0x38>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d104      	bne.n	800b03a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b030:	4b0a      	ldr	r3, [pc, #40]	; (800b05c <prvResetNextTaskUnblockTime+0x3c>)
 800b032:	f04f 32ff 	mov.w	r2, #4294967295
 800b036:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b038:	e008      	b.n	800b04c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b03a:	4b07      	ldr	r3, [pc, #28]	; (800b058 <prvResetNextTaskUnblockTime+0x38>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	4a04      	ldr	r2, [pc, #16]	; (800b05c <prvResetNextTaskUnblockTime+0x3c>)
 800b04a:	6013      	str	r3, [r2, #0]
}
 800b04c:	bf00      	nop
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	2000254c 	.word	0x2000254c
 800b05c:	200025b4 	.word	0x200025b4

0800b060 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b060:	b480      	push	{r7}
 800b062:	b083      	sub	sp, #12
 800b064:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b066:	4b0b      	ldr	r3, [pc, #44]	; (800b094 <xTaskGetSchedulerState+0x34>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d102      	bne.n	800b074 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b06e:	2301      	movs	r3, #1
 800b070:	607b      	str	r3, [r7, #4]
 800b072:	e008      	b.n	800b086 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b074:	4b08      	ldr	r3, [pc, #32]	; (800b098 <xTaskGetSchedulerState+0x38>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d102      	bne.n	800b082 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b07c:	2302      	movs	r3, #2
 800b07e:	607b      	str	r3, [r7, #4]
 800b080:	e001      	b.n	800b086 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b082:	2300      	movs	r3, #0
 800b084:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b086:	687b      	ldr	r3, [r7, #4]
	}
 800b088:	4618      	mov	r0, r3
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr
 800b094:	200025a0 	.word	0x200025a0
 800b098:	200025bc 	.word	0x200025bc

0800b09c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b086      	sub	sp, #24
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d056      	beq.n	800b160 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b0b2:	4b2e      	ldr	r3, [pc, #184]	; (800b16c <xTaskPriorityDisinherit+0xd0>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	693a      	ldr	r2, [r7, #16]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d00a      	beq.n	800b0d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c0:	f383 8811 	msr	BASEPRI, r3
 800b0c4:	f3bf 8f6f 	isb	sy
 800b0c8:	f3bf 8f4f 	dsb	sy
 800b0cc:	60fb      	str	r3, [r7, #12]
}
 800b0ce:	bf00      	nop
 800b0d0:	e7fe      	b.n	800b0d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d10a      	bne.n	800b0f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0de:	f383 8811 	msr	BASEPRI, r3
 800b0e2:	f3bf 8f6f 	isb	sy
 800b0e6:	f3bf 8f4f 	dsb	sy
 800b0ea:	60bb      	str	r3, [r7, #8]
}
 800b0ec:	bf00      	nop
 800b0ee:	e7fe      	b.n	800b0ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0f4:	1e5a      	subs	r2, r3, #1
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b102:	429a      	cmp	r2, r3
 800b104:	d02c      	beq.n	800b160 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d128      	bne.n	800b160 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	3304      	adds	r3, #4
 800b112:	4618      	mov	r0, r3
 800b114:	f7fe fc36 	bl	8009984 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b124:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b130:	4b0f      	ldr	r3, [pc, #60]	; (800b170 <xTaskPriorityDisinherit+0xd4>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	429a      	cmp	r2, r3
 800b136:	d903      	bls.n	800b140 <xTaskPriorityDisinherit+0xa4>
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13c:	4a0c      	ldr	r2, [pc, #48]	; (800b170 <xTaskPriorityDisinherit+0xd4>)
 800b13e:	6013      	str	r3, [r2, #0]
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b144:	4613      	mov	r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	4413      	add	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	4a09      	ldr	r2, [pc, #36]	; (800b174 <xTaskPriorityDisinherit+0xd8>)
 800b14e:	441a      	add	r2, r3
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	3304      	adds	r3, #4
 800b154:	4619      	mov	r1, r3
 800b156:	4610      	mov	r0, r2
 800b158:	f7fe fbb7 	bl	80098ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b15c:	2301      	movs	r3, #1
 800b15e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b160:	697b      	ldr	r3, [r7, #20]
	}
 800b162:	4618      	mov	r0, r3
 800b164:	3718      	adds	r7, #24
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	200020c0 	.word	0x200020c0
 800b170:	2000259c 	.word	0x2000259c
 800b174:	200020c4 	.word	0x200020c4

0800b178 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b08a      	sub	sp, #40	; 0x28
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	603b      	str	r3, [r7, #0]
 800b184:	4613      	mov	r3, r2
 800b186:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b188:	2301      	movs	r3, #1
 800b18a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d10a      	bne.n	800b1a8 <xTaskGenericNotify+0x30>
	__asm volatile
 800b192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b196:	f383 8811 	msr	BASEPRI, r3
 800b19a:	f3bf 8f6f 	isb	sy
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	61bb      	str	r3, [r7, #24]
}
 800b1a4:	bf00      	nop
 800b1a6:	e7fe      	b.n	800b1a6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b1ac:	f000 fd6a 	bl	800bc84 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d003      	beq.n	800b1be <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b1b6:	6a3b      	ldr	r3, [r7, #32]
 800b1b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b1be:	6a3b      	ldr	r3, [r7, #32]
 800b1c0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b1c4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b1c6:	6a3b      	ldr	r3, [r7, #32]
 800b1c8:	2202      	movs	r2, #2
 800b1ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800b1ce:	79fb      	ldrb	r3, [r7, #7]
 800b1d0:	2b04      	cmp	r3, #4
 800b1d2:	d828      	bhi.n	800b226 <xTaskGenericNotify+0xae>
 800b1d4:	a201      	add	r2, pc, #4	; (adr r2, 800b1dc <xTaskGenericNotify+0x64>)
 800b1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1da:	bf00      	nop
 800b1dc:	0800b247 	.word	0x0800b247
 800b1e0:	0800b1f1 	.word	0x0800b1f1
 800b1e4:	0800b1ff 	.word	0x0800b1ff
 800b1e8:	0800b20b 	.word	0x0800b20b
 800b1ec:	0800b213 	.word	0x0800b213
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b1f0:	6a3b      	ldr	r3, [r7, #32]
 800b1f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	431a      	orrs	r2, r3
 800b1f8:	6a3b      	ldr	r3, [r7, #32]
 800b1fa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b1fc:	e026      	b.n	800b24c <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b1fe:	6a3b      	ldr	r3, [r7, #32]
 800b200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b202:	1c5a      	adds	r2, r3, #1
 800b204:	6a3b      	ldr	r3, [r7, #32]
 800b206:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b208:	e020      	b.n	800b24c <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b210:	e01c      	b.n	800b24c <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b212:	7ffb      	ldrb	r3, [r7, #31]
 800b214:	2b02      	cmp	r3, #2
 800b216:	d003      	beq.n	800b220 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b218:	6a3b      	ldr	r3, [r7, #32]
 800b21a:	68ba      	ldr	r2, [r7, #8]
 800b21c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b21e:	e015      	b.n	800b24c <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800b220:	2300      	movs	r3, #0
 800b222:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b224:	e012      	b.n	800b24c <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b226:	6a3b      	ldr	r3, [r7, #32]
 800b228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b22e:	d00c      	beq.n	800b24a <xTaskGenericNotify+0xd2>
	__asm volatile
 800b230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	617b      	str	r3, [r7, #20]
}
 800b242:	bf00      	nop
 800b244:	e7fe      	b.n	800b244 <xTaskGenericNotify+0xcc>
					break;
 800b246:	bf00      	nop
 800b248:	e000      	b.n	800b24c <xTaskGenericNotify+0xd4>

					break;
 800b24a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b24c:	7ffb      	ldrb	r3, [r7, #31]
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d13a      	bne.n	800b2c8 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b252:	6a3b      	ldr	r3, [r7, #32]
 800b254:	3304      	adds	r3, #4
 800b256:	4618      	mov	r0, r3
 800b258:	f7fe fb94 	bl	8009984 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b25c:	6a3b      	ldr	r3, [r7, #32]
 800b25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b260:	4b1d      	ldr	r3, [pc, #116]	; (800b2d8 <xTaskGenericNotify+0x160>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	429a      	cmp	r2, r3
 800b266:	d903      	bls.n	800b270 <xTaskGenericNotify+0xf8>
 800b268:	6a3b      	ldr	r3, [r7, #32]
 800b26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26c:	4a1a      	ldr	r2, [pc, #104]	; (800b2d8 <xTaskGenericNotify+0x160>)
 800b26e:	6013      	str	r3, [r2, #0]
 800b270:	6a3b      	ldr	r3, [r7, #32]
 800b272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b274:	4613      	mov	r3, r2
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	4413      	add	r3, r2
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	4a17      	ldr	r2, [pc, #92]	; (800b2dc <xTaskGenericNotify+0x164>)
 800b27e:	441a      	add	r2, r3
 800b280:	6a3b      	ldr	r3, [r7, #32]
 800b282:	3304      	adds	r3, #4
 800b284:	4619      	mov	r1, r3
 800b286:	4610      	mov	r0, r2
 800b288:	f7fe fb1f 	bl	80098ca <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b28c:	6a3b      	ldr	r3, [r7, #32]
 800b28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b290:	2b00      	cmp	r3, #0
 800b292:	d00a      	beq.n	800b2aa <xTaskGenericNotify+0x132>
	__asm volatile
 800b294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b298:	f383 8811 	msr	BASEPRI, r3
 800b29c:	f3bf 8f6f 	isb	sy
 800b2a0:	f3bf 8f4f 	dsb	sy
 800b2a4:	613b      	str	r3, [r7, #16]
}
 800b2a6:	bf00      	nop
 800b2a8:	e7fe      	b.n	800b2a8 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b2aa:	6a3b      	ldr	r3, [r7, #32]
 800b2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ae:	4b0c      	ldr	r3, [pc, #48]	; (800b2e0 <xTaskGenericNotify+0x168>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d907      	bls.n	800b2c8 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b2b8:	4b0a      	ldr	r3, [pc, #40]	; (800b2e4 <xTaskGenericNotify+0x16c>)
 800b2ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2be:	601a      	str	r2, [r3, #0]
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b2c8:	f000 fd0c 	bl	800bce4 <vPortExitCritical>

		return xReturn;
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3728      	adds	r7, #40	; 0x28
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	2000259c 	.word	0x2000259c
 800b2dc:	200020c4 	.word	0x200020c4
 800b2e0:	200020c0 	.word	0x200020c0
 800b2e4:	e000ed04 	.word	0xe000ed04

0800b2e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b2f2:	4b21      	ldr	r3, [pc, #132]	; (800b378 <prvAddCurrentTaskToDelayedList+0x90>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2f8:	4b20      	ldr	r3, [pc, #128]	; (800b37c <prvAddCurrentTaskToDelayedList+0x94>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	3304      	adds	r3, #4
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7fe fb40 	bl	8009984 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b30a:	d10a      	bne.n	800b322 <prvAddCurrentTaskToDelayedList+0x3a>
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d007      	beq.n	800b322 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b312:	4b1a      	ldr	r3, [pc, #104]	; (800b37c <prvAddCurrentTaskToDelayedList+0x94>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	3304      	adds	r3, #4
 800b318:	4619      	mov	r1, r3
 800b31a:	4819      	ldr	r0, [pc, #100]	; (800b380 <prvAddCurrentTaskToDelayedList+0x98>)
 800b31c:	f7fe fad5 	bl	80098ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b320:	e026      	b.n	800b370 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b322:	68fa      	ldr	r2, [r7, #12]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4413      	add	r3, r2
 800b328:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b32a:	4b14      	ldr	r3, [pc, #80]	; (800b37c <prvAddCurrentTaskToDelayedList+0x94>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	68ba      	ldr	r2, [r7, #8]
 800b330:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b332:	68ba      	ldr	r2, [r7, #8]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	429a      	cmp	r2, r3
 800b338:	d209      	bcs.n	800b34e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b33a:	4b12      	ldr	r3, [pc, #72]	; (800b384 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	4b0f      	ldr	r3, [pc, #60]	; (800b37c <prvAddCurrentTaskToDelayedList+0x94>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3304      	adds	r3, #4
 800b344:	4619      	mov	r1, r3
 800b346:	4610      	mov	r0, r2
 800b348:	f7fe fae3 	bl	8009912 <vListInsert>
}
 800b34c:	e010      	b.n	800b370 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b34e:	4b0e      	ldr	r3, [pc, #56]	; (800b388 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	4b0a      	ldr	r3, [pc, #40]	; (800b37c <prvAddCurrentTaskToDelayedList+0x94>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	3304      	adds	r3, #4
 800b358:	4619      	mov	r1, r3
 800b35a:	4610      	mov	r0, r2
 800b35c:	f7fe fad9 	bl	8009912 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b360:	4b0a      	ldr	r3, [pc, #40]	; (800b38c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	429a      	cmp	r2, r3
 800b368:	d202      	bcs.n	800b370 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b36a:	4a08      	ldr	r2, [pc, #32]	; (800b38c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	6013      	str	r3, [r2, #0]
}
 800b370:	bf00      	nop
 800b372:	3710      	adds	r7, #16
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	20002598 	.word	0x20002598
 800b37c:	200020c0 	.word	0x200020c0
 800b380:	20002580 	.word	0x20002580
 800b384:	20002550 	.word	0x20002550
 800b388:	2000254c 	.word	0x2000254c
 800b38c:	200025b4 	.word	0x200025b4

0800b390 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b08a      	sub	sp, #40	; 0x28
 800b394:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b396:	2300      	movs	r3, #0
 800b398:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b39a:	f000 fb07 	bl	800b9ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b39e:	4b1c      	ldr	r3, [pc, #112]	; (800b410 <xTimerCreateTimerTask+0x80>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d021      	beq.n	800b3ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b3ae:	1d3a      	adds	r2, r7, #4
 800b3b0:	f107 0108 	add.w	r1, r7, #8
 800b3b4:	f107 030c 	add.w	r3, r7, #12
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f7fe fa3f 	bl	800983c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b3be:	6879      	ldr	r1, [r7, #4]
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	68fa      	ldr	r2, [r7, #12]
 800b3c4:	9202      	str	r2, [sp, #8]
 800b3c6:	9301      	str	r3, [sp, #4]
 800b3c8:	2302      	movs	r3, #2
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	460a      	mov	r2, r1
 800b3d0:	4910      	ldr	r1, [pc, #64]	; (800b414 <xTimerCreateTimerTask+0x84>)
 800b3d2:	4811      	ldr	r0, [pc, #68]	; (800b418 <xTimerCreateTimerTask+0x88>)
 800b3d4:	f7ff f826 	bl	800a424 <xTaskCreateStatic>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	4a10      	ldr	r2, [pc, #64]	; (800b41c <xTimerCreateTimerTask+0x8c>)
 800b3dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b3de:	4b0f      	ldr	r3, [pc, #60]	; (800b41c <xTimerCreateTimerTask+0x8c>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d001      	beq.n	800b3ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d10a      	bne.n	800b406 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f4:	f383 8811 	msr	BASEPRI, r3
 800b3f8:	f3bf 8f6f 	isb	sy
 800b3fc:	f3bf 8f4f 	dsb	sy
 800b400:	613b      	str	r3, [r7, #16]
}
 800b402:	bf00      	nop
 800b404:	e7fe      	b.n	800b404 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b406:	697b      	ldr	r3, [r7, #20]
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3718      	adds	r7, #24
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}
 800b410:	200025f0 	.word	0x200025f0
 800b414:	0800e22c 	.word	0x0800e22c
 800b418:	0800b555 	.word	0x0800b555
 800b41c:	200025f4 	.word	0x200025f4

0800b420 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b08a      	sub	sp, #40	; 0x28
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
 800b42c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b42e:	2300      	movs	r3, #0
 800b430:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10a      	bne.n	800b44e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43c:	f383 8811 	msr	BASEPRI, r3
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	623b      	str	r3, [r7, #32]
}
 800b44a:	bf00      	nop
 800b44c:	e7fe      	b.n	800b44c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b44e:	4b1a      	ldr	r3, [pc, #104]	; (800b4b8 <xTimerGenericCommand+0x98>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d02a      	beq.n	800b4ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	2b05      	cmp	r3, #5
 800b466:	dc18      	bgt.n	800b49a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b468:	f7ff fdfa 	bl	800b060 <xTaskGetSchedulerState>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d109      	bne.n	800b486 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b472:	4b11      	ldr	r3, [pc, #68]	; (800b4b8 <xTimerGenericCommand+0x98>)
 800b474:	6818      	ldr	r0, [r3, #0]
 800b476:	f107 0110 	add.w	r1, r7, #16
 800b47a:	2300      	movs	r3, #0
 800b47c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b47e:	f7fe fbe9 	bl	8009c54 <xQueueGenericSend>
 800b482:	6278      	str	r0, [r7, #36]	; 0x24
 800b484:	e012      	b.n	800b4ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b486:	4b0c      	ldr	r3, [pc, #48]	; (800b4b8 <xTimerGenericCommand+0x98>)
 800b488:	6818      	ldr	r0, [r3, #0]
 800b48a:	f107 0110 	add.w	r1, r7, #16
 800b48e:	2300      	movs	r3, #0
 800b490:	2200      	movs	r2, #0
 800b492:	f7fe fbdf 	bl	8009c54 <xQueueGenericSend>
 800b496:	6278      	str	r0, [r7, #36]	; 0x24
 800b498:	e008      	b.n	800b4ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b49a:	4b07      	ldr	r3, [pc, #28]	; (800b4b8 <xTimerGenericCommand+0x98>)
 800b49c:	6818      	ldr	r0, [r3, #0]
 800b49e:	f107 0110 	add.w	r1, r7, #16
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	683a      	ldr	r2, [r7, #0]
 800b4a6:	f7fe fcd3 	bl	8009e50 <xQueueGenericSendFromISR>
 800b4aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3728      	adds	r7, #40	; 0x28
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	200025f0 	.word	0x200025f0

0800b4bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b088      	sub	sp, #32
 800b4c0:	af02      	add	r7, sp, #8
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4c6:	4b22      	ldr	r3, [pc, #136]	; (800b550 <prvProcessExpiredTimer+0x94>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	3304      	adds	r3, #4
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7fe fa55 	bl	8009984 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4e0:	f003 0304 	and.w	r3, r3, #4
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d022      	beq.n	800b52e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	699a      	ldr	r2, [r3, #24]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	18d1      	adds	r1, r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	683a      	ldr	r2, [r7, #0]
 800b4f4:	6978      	ldr	r0, [r7, #20]
 800b4f6:	f000 f8d1 	bl	800b69c <prvInsertTimerInActiveList>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d01f      	beq.n	800b540 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b500:	2300      	movs	r3, #0
 800b502:	9300      	str	r3, [sp, #0]
 800b504:	2300      	movs	r3, #0
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	2100      	movs	r1, #0
 800b50a:	6978      	ldr	r0, [r7, #20]
 800b50c:	f7ff ff88 	bl	800b420 <xTimerGenericCommand>
 800b510:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d113      	bne.n	800b540 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51c:	f383 8811 	msr	BASEPRI, r3
 800b520:	f3bf 8f6f 	isb	sy
 800b524:	f3bf 8f4f 	dsb	sy
 800b528:	60fb      	str	r3, [r7, #12]
}
 800b52a:	bf00      	nop
 800b52c:	e7fe      	b.n	800b52c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b534:	f023 0301 	bic.w	r3, r3, #1
 800b538:	b2da      	uxtb	r2, r3
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	6a1b      	ldr	r3, [r3, #32]
 800b544:	6978      	ldr	r0, [r7, #20]
 800b546:	4798      	blx	r3
}
 800b548:	bf00      	nop
 800b54a:	3718      	adds	r7, #24
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	200025e8 	.word	0x200025e8

0800b554 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b55c:	f107 0308 	add.w	r3, r7, #8
 800b560:	4618      	mov	r0, r3
 800b562:	f000 f857 	bl	800b614 <prvGetNextExpireTime>
 800b566:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	4619      	mov	r1, r3
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f000 f803 	bl	800b578 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b572:	f000 f8d5 	bl	800b720 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b576:	e7f1      	b.n	800b55c <prvTimerTask+0x8>

0800b578 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b582:	f7ff f98b 	bl	800a89c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b586:	f107 0308 	add.w	r3, r7, #8
 800b58a:	4618      	mov	r0, r3
 800b58c:	f000 f866 	bl	800b65c <prvSampleTimeNow>
 800b590:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d130      	bne.n	800b5fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d10a      	bne.n	800b5b4 <prvProcessTimerOrBlockTask+0x3c>
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d806      	bhi.n	800b5b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b5a6:	f7ff f987 	bl	800a8b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b5aa:	68f9      	ldr	r1, [r7, #12]
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f7ff ff85 	bl	800b4bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b5b2:	e024      	b.n	800b5fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d008      	beq.n	800b5cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b5ba:	4b13      	ldr	r3, [pc, #76]	; (800b608 <prvProcessTimerOrBlockTask+0x90>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d101      	bne.n	800b5c8 <prvProcessTimerOrBlockTask+0x50>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	e000      	b.n	800b5ca <prvProcessTimerOrBlockTask+0x52>
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b5cc:	4b0f      	ldr	r3, [pc, #60]	; (800b60c <prvProcessTimerOrBlockTask+0x94>)
 800b5ce:	6818      	ldr	r0, [r3, #0]
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	1ad3      	subs	r3, r2, r3
 800b5d6:	683a      	ldr	r2, [r7, #0]
 800b5d8:	4619      	mov	r1, r3
 800b5da:	f7fe feef 	bl	800a3bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b5de:	f7ff f96b 	bl	800a8b8 <xTaskResumeAll>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d10a      	bne.n	800b5fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b5e8:	4b09      	ldr	r3, [pc, #36]	; (800b610 <prvProcessTimerOrBlockTask+0x98>)
 800b5ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5ee:	601a      	str	r2, [r3, #0]
 800b5f0:	f3bf 8f4f 	dsb	sy
 800b5f4:	f3bf 8f6f 	isb	sy
}
 800b5f8:	e001      	b.n	800b5fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b5fa:	f7ff f95d 	bl	800a8b8 <xTaskResumeAll>
}
 800b5fe:	bf00      	nop
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	200025ec 	.word	0x200025ec
 800b60c:	200025f0 	.word	0x200025f0
 800b610:	e000ed04 	.word	0xe000ed04

0800b614 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b61c:	4b0e      	ldr	r3, [pc, #56]	; (800b658 <prvGetNextExpireTime+0x44>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d101      	bne.n	800b62a <prvGetNextExpireTime+0x16>
 800b626:	2201      	movs	r2, #1
 800b628:	e000      	b.n	800b62c <prvGetNextExpireTime+0x18>
 800b62a:	2200      	movs	r2, #0
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d105      	bne.n	800b644 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b638:	4b07      	ldr	r3, [pc, #28]	; (800b658 <prvGetNextExpireTime+0x44>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	60fb      	str	r3, [r7, #12]
 800b642:	e001      	b.n	800b648 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b644:	2300      	movs	r3, #0
 800b646:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b648:	68fb      	ldr	r3, [r7, #12]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3714      	adds	r7, #20
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop
 800b658:	200025e8 	.word	0x200025e8

0800b65c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b084      	sub	sp, #16
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b664:	f7ff f9c6 	bl	800a9f4 <xTaskGetTickCount>
 800b668:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b66a:	4b0b      	ldr	r3, [pc, #44]	; (800b698 <prvSampleTimeNow+0x3c>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	68fa      	ldr	r2, [r7, #12]
 800b670:	429a      	cmp	r2, r3
 800b672:	d205      	bcs.n	800b680 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b674:	f000 f936 	bl	800b8e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2201      	movs	r2, #1
 800b67c:	601a      	str	r2, [r3, #0]
 800b67e:	e002      	b.n	800b686 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2200      	movs	r2, #0
 800b684:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b686:	4a04      	ldr	r2, [pc, #16]	; (800b698 <prvSampleTimeNow+0x3c>)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b68c:	68fb      	ldr	r3, [r7, #12]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	200025f8 	.word	0x200025f8

0800b69c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b086      	sub	sp, #24
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	60f8      	str	r0, [r7, #12]
 800b6a4:	60b9      	str	r1, [r7, #8]
 800b6a6:	607a      	str	r2, [r7, #4]
 800b6a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b6ba:	68ba      	ldr	r2, [r7, #8]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d812      	bhi.n	800b6e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	1ad2      	subs	r2, r2, r3
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	699b      	ldr	r3, [r3, #24]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d302      	bcc.n	800b6d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	617b      	str	r3, [r7, #20]
 800b6d4:	e01b      	b.n	800b70e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b6d6:	4b10      	ldr	r3, [pc, #64]	; (800b718 <prvInsertTimerInActiveList+0x7c>)
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	3304      	adds	r3, #4
 800b6de:	4619      	mov	r1, r3
 800b6e0:	4610      	mov	r0, r2
 800b6e2:	f7fe f916 	bl	8009912 <vListInsert>
 800b6e6:	e012      	b.n	800b70e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d206      	bcs.n	800b6fe <prvInsertTimerInActiveList+0x62>
 800b6f0:	68ba      	ldr	r2, [r7, #8]
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d302      	bcc.n	800b6fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	617b      	str	r3, [r7, #20]
 800b6fc:	e007      	b.n	800b70e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6fe:	4b07      	ldr	r3, [pc, #28]	; (800b71c <prvInsertTimerInActiveList+0x80>)
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	3304      	adds	r3, #4
 800b706:	4619      	mov	r1, r3
 800b708:	4610      	mov	r0, r2
 800b70a:	f7fe f902 	bl	8009912 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b70e:	697b      	ldr	r3, [r7, #20]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3718      	adds	r7, #24
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	200025ec 	.word	0x200025ec
 800b71c:	200025e8 	.word	0x200025e8

0800b720 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b08e      	sub	sp, #56	; 0x38
 800b724:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b726:	e0ca      	b.n	800b8be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	da18      	bge.n	800b760 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b72e:	1d3b      	adds	r3, r7, #4
 800b730:	3304      	adds	r3, #4
 800b732:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b736:	2b00      	cmp	r3, #0
 800b738:	d10a      	bne.n	800b750 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73e:	f383 8811 	msr	BASEPRI, r3
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	61fb      	str	r3, [r7, #28]
}
 800b74c:	bf00      	nop
 800b74e:	e7fe      	b.n	800b74e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b756:	6850      	ldr	r0, [r2, #4]
 800b758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b75a:	6892      	ldr	r2, [r2, #8]
 800b75c:	4611      	mov	r1, r2
 800b75e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2b00      	cmp	r3, #0
 800b764:	f2c0 80aa 	blt.w	800b8bc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76e:	695b      	ldr	r3, [r3, #20]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d004      	beq.n	800b77e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b776:	3304      	adds	r3, #4
 800b778:	4618      	mov	r0, r3
 800b77a:	f7fe f903 	bl	8009984 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b77e:	463b      	mov	r3, r7
 800b780:	4618      	mov	r0, r3
 800b782:	f7ff ff6b 	bl	800b65c <prvSampleTimeNow>
 800b786:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b09      	cmp	r3, #9
 800b78c:	f200 8097 	bhi.w	800b8be <prvProcessReceivedCommands+0x19e>
 800b790:	a201      	add	r2, pc, #4	; (adr r2, 800b798 <prvProcessReceivedCommands+0x78>)
 800b792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b796:	bf00      	nop
 800b798:	0800b7c1 	.word	0x0800b7c1
 800b79c:	0800b7c1 	.word	0x0800b7c1
 800b7a0:	0800b7c1 	.word	0x0800b7c1
 800b7a4:	0800b835 	.word	0x0800b835
 800b7a8:	0800b849 	.word	0x0800b849
 800b7ac:	0800b893 	.word	0x0800b893
 800b7b0:	0800b7c1 	.word	0x0800b7c1
 800b7b4:	0800b7c1 	.word	0x0800b7c1
 800b7b8:	0800b835 	.word	0x0800b835
 800b7bc:	0800b849 	.word	0x0800b849
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7c6:	f043 0301 	orr.w	r3, r3, #1
 800b7ca:	b2da      	uxtb	r2, r3
 800b7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b7d2:	68ba      	ldr	r2, [r7, #8]
 800b7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d6:	699b      	ldr	r3, [r3, #24]
 800b7d8:	18d1      	adds	r1, r2, r3
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7e0:	f7ff ff5c 	bl	800b69c <prvInsertTimerInActiveList>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d069      	beq.n	800b8be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ec:	6a1b      	ldr	r3, [r3, #32]
 800b7ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7f8:	f003 0304 	and.w	r3, r3, #4
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d05e      	beq.n	800b8be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b800:	68ba      	ldr	r2, [r7, #8]
 800b802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b804:	699b      	ldr	r3, [r3, #24]
 800b806:	441a      	add	r2, r3
 800b808:	2300      	movs	r3, #0
 800b80a:	9300      	str	r3, [sp, #0]
 800b80c:	2300      	movs	r3, #0
 800b80e:	2100      	movs	r1, #0
 800b810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b812:	f7ff fe05 	bl	800b420 <xTimerGenericCommand>
 800b816:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b818:	6a3b      	ldr	r3, [r7, #32]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d14f      	bne.n	800b8be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b822:	f383 8811 	msr	BASEPRI, r3
 800b826:	f3bf 8f6f 	isb	sy
 800b82a:	f3bf 8f4f 	dsb	sy
 800b82e:	61bb      	str	r3, [r7, #24]
}
 800b830:	bf00      	nop
 800b832:	e7fe      	b.n	800b832 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b83a:	f023 0301 	bic.w	r3, r3, #1
 800b83e:	b2da      	uxtb	r2, r3
 800b840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b846:	e03a      	b.n	800b8be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b84e:	f043 0301 	orr.w	r3, r3, #1
 800b852:	b2da      	uxtb	r2, r3
 800b854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b856:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b85a:	68ba      	ldr	r2, [r7, #8]
 800b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b862:	699b      	ldr	r3, [r3, #24]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d10a      	bne.n	800b87e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b86c:	f383 8811 	msr	BASEPRI, r3
 800b870:	f3bf 8f6f 	isb	sy
 800b874:	f3bf 8f4f 	dsb	sy
 800b878:	617b      	str	r3, [r7, #20]
}
 800b87a:	bf00      	nop
 800b87c:	e7fe      	b.n	800b87c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b880:	699a      	ldr	r2, [r3, #24]
 800b882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b884:	18d1      	adds	r1, r2, r3
 800b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b88a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b88c:	f7ff ff06 	bl	800b69c <prvInsertTimerInActiveList>
					break;
 800b890:	e015      	b.n	800b8be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b894:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b898:	f003 0302 	and.w	r3, r3, #2
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d103      	bne.n	800b8a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b8a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8a2:	f000 fbdd 	bl	800c060 <vPortFree>
 800b8a6:	e00a      	b.n	800b8be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8ae:	f023 0301 	bic.w	r3, r3, #1
 800b8b2:	b2da      	uxtb	r2, r3
 800b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b8ba:	e000      	b.n	800b8be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b8bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8be:	4b08      	ldr	r3, [pc, #32]	; (800b8e0 <prvProcessReceivedCommands+0x1c0>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	1d39      	adds	r1, r7, #4
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fe fb5e 	bl	8009f88 <xQueueReceive>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	f47f af2a 	bne.w	800b728 <prvProcessReceivedCommands+0x8>
	}
}
 800b8d4:	bf00      	nop
 800b8d6:	bf00      	nop
 800b8d8:	3730      	adds	r7, #48	; 0x30
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	200025f0 	.word	0x200025f0

0800b8e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b088      	sub	sp, #32
 800b8e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8ea:	e048      	b.n	800b97e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b8ec:	4b2d      	ldr	r3, [pc, #180]	; (800b9a4 <prvSwitchTimerLists+0xc0>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8f6:	4b2b      	ldr	r3, [pc, #172]	; (800b9a4 <prvSwitchTimerLists+0xc0>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	3304      	adds	r3, #4
 800b904:	4618      	mov	r0, r3
 800b906:	f7fe f83d 	bl	8009984 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6a1b      	ldr	r3, [r3, #32]
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b918:	f003 0304 	and.w	r3, r3, #4
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d02e      	beq.n	800b97e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	699b      	ldr	r3, [r3, #24]
 800b924:	693a      	ldr	r2, [r7, #16]
 800b926:	4413      	add	r3, r2
 800b928:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b92a:	68ba      	ldr	r2, [r7, #8]
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d90e      	bls.n	800b950 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b93e:	4b19      	ldr	r3, [pc, #100]	; (800b9a4 <prvSwitchTimerLists+0xc0>)
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	3304      	adds	r3, #4
 800b946:	4619      	mov	r1, r3
 800b948:	4610      	mov	r0, r2
 800b94a:	f7fd ffe2 	bl	8009912 <vListInsert>
 800b94e:	e016      	b.n	800b97e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b950:	2300      	movs	r3, #0
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	2300      	movs	r3, #0
 800b956:	693a      	ldr	r2, [r7, #16]
 800b958:	2100      	movs	r1, #0
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f7ff fd60 	bl	800b420 <xTimerGenericCommand>
 800b960:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d10a      	bne.n	800b97e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96c:	f383 8811 	msr	BASEPRI, r3
 800b970:	f3bf 8f6f 	isb	sy
 800b974:	f3bf 8f4f 	dsb	sy
 800b978:	603b      	str	r3, [r7, #0]
}
 800b97a:	bf00      	nop
 800b97c:	e7fe      	b.n	800b97c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b97e:	4b09      	ldr	r3, [pc, #36]	; (800b9a4 <prvSwitchTimerLists+0xc0>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d1b1      	bne.n	800b8ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b988:	4b06      	ldr	r3, [pc, #24]	; (800b9a4 <prvSwitchTimerLists+0xc0>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b98e:	4b06      	ldr	r3, [pc, #24]	; (800b9a8 <prvSwitchTimerLists+0xc4>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4a04      	ldr	r2, [pc, #16]	; (800b9a4 <prvSwitchTimerLists+0xc0>)
 800b994:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b996:	4a04      	ldr	r2, [pc, #16]	; (800b9a8 <prvSwitchTimerLists+0xc4>)
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	6013      	str	r3, [r2, #0]
}
 800b99c:	bf00      	nop
 800b99e:	3718      	adds	r7, #24
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	200025e8 	.word	0x200025e8
 800b9a8:	200025ec 	.word	0x200025ec

0800b9ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b9b2:	f000 f967 	bl	800bc84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b9b6:	4b15      	ldr	r3, [pc, #84]	; (800ba0c <prvCheckForValidListAndQueue+0x60>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d120      	bne.n	800ba00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b9be:	4814      	ldr	r0, [pc, #80]	; (800ba10 <prvCheckForValidListAndQueue+0x64>)
 800b9c0:	f7fd ff56 	bl	8009870 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b9c4:	4813      	ldr	r0, [pc, #76]	; (800ba14 <prvCheckForValidListAndQueue+0x68>)
 800b9c6:	f7fd ff53 	bl	8009870 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b9ca:	4b13      	ldr	r3, [pc, #76]	; (800ba18 <prvCheckForValidListAndQueue+0x6c>)
 800b9cc:	4a10      	ldr	r2, [pc, #64]	; (800ba10 <prvCheckForValidListAndQueue+0x64>)
 800b9ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b9d0:	4b12      	ldr	r3, [pc, #72]	; (800ba1c <prvCheckForValidListAndQueue+0x70>)
 800b9d2:	4a10      	ldr	r2, [pc, #64]	; (800ba14 <prvCheckForValidListAndQueue+0x68>)
 800b9d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	9300      	str	r3, [sp, #0]
 800b9da:	4b11      	ldr	r3, [pc, #68]	; (800ba20 <prvCheckForValidListAndQueue+0x74>)
 800b9dc:	4a11      	ldr	r2, [pc, #68]	; (800ba24 <prvCheckForValidListAndQueue+0x78>)
 800b9de:	2110      	movs	r1, #16
 800b9e0:	200a      	movs	r0, #10
 800b9e2:	f7fe f861 	bl	8009aa8 <xQueueGenericCreateStatic>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	4a08      	ldr	r2, [pc, #32]	; (800ba0c <prvCheckForValidListAndQueue+0x60>)
 800b9ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b9ec:	4b07      	ldr	r3, [pc, #28]	; (800ba0c <prvCheckForValidListAndQueue+0x60>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d005      	beq.n	800ba00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b9f4:	4b05      	ldr	r3, [pc, #20]	; (800ba0c <prvCheckForValidListAndQueue+0x60>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	490b      	ldr	r1, [pc, #44]	; (800ba28 <prvCheckForValidListAndQueue+0x7c>)
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fe fcb4 	bl	800a368 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba00:	f000 f970 	bl	800bce4 <vPortExitCritical>
}
 800ba04:	bf00      	nop
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	200025f0 	.word	0x200025f0
 800ba10:	200025c0 	.word	0x200025c0
 800ba14:	200025d4 	.word	0x200025d4
 800ba18:	200025e8 	.word	0x200025e8
 800ba1c:	200025ec 	.word	0x200025ec
 800ba20:	2000269c 	.word	0x2000269c
 800ba24:	200025fc 	.word	0x200025fc
 800ba28:	0800e234 	.word	0x0800e234

0800ba2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b085      	sub	sp, #20
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	3b04      	subs	r3, #4
 800ba3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ba44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	3b04      	subs	r3, #4
 800ba4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	f023 0201 	bic.w	r2, r3, #1
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	3b04      	subs	r3, #4
 800ba5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba5c:	4a0c      	ldr	r2, [pc, #48]	; (800ba90 <pxPortInitialiseStack+0x64>)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	3b14      	subs	r3, #20
 800ba66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	3b04      	subs	r3, #4
 800ba72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f06f 0202 	mvn.w	r2, #2
 800ba7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	3b20      	subs	r3, #32
 800ba80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ba82:	68fb      	ldr	r3, [r7, #12]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3714      	adds	r7, #20
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr
 800ba90:	0800ba95 	.word	0x0800ba95

0800ba94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba94:	b480      	push	{r7}
 800ba96:	b085      	sub	sp, #20
 800ba98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba9e:	4b12      	ldr	r3, [pc, #72]	; (800bae8 <prvTaskExitError+0x54>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa6:	d00a      	beq.n	800babe <prvTaskExitError+0x2a>
	__asm volatile
 800baa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baac:	f383 8811 	msr	BASEPRI, r3
 800bab0:	f3bf 8f6f 	isb	sy
 800bab4:	f3bf 8f4f 	dsb	sy
 800bab8:	60fb      	str	r3, [r7, #12]
}
 800baba:	bf00      	nop
 800babc:	e7fe      	b.n	800babc <prvTaskExitError+0x28>
	__asm volatile
 800babe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac2:	f383 8811 	msr	BASEPRI, r3
 800bac6:	f3bf 8f6f 	isb	sy
 800baca:	f3bf 8f4f 	dsb	sy
 800bace:	60bb      	str	r3, [r7, #8]
}
 800bad0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bad2:	bf00      	nop
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d0fc      	beq.n	800bad4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bada:	bf00      	nop
 800badc:	bf00      	nop
 800bade:	3714      	adds	r7, #20
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr
 800bae8:	2000000c 	.word	0x2000000c
 800baec:	00000000 	.word	0x00000000

0800baf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800baf0:	4b07      	ldr	r3, [pc, #28]	; (800bb10 <pxCurrentTCBConst2>)
 800baf2:	6819      	ldr	r1, [r3, #0]
 800baf4:	6808      	ldr	r0, [r1, #0]
 800baf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bafa:	f380 8809 	msr	PSP, r0
 800bafe:	f3bf 8f6f 	isb	sy
 800bb02:	f04f 0000 	mov.w	r0, #0
 800bb06:	f380 8811 	msr	BASEPRI, r0
 800bb0a:	4770      	bx	lr
 800bb0c:	f3af 8000 	nop.w

0800bb10 <pxCurrentTCBConst2>:
 800bb10:	200020c0 	.word	0x200020c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bb14:	bf00      	nop
 800bb16:	bf00      	nop

0800bb18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bb18:	4808      	ldr	r0, [pc, #32]	; (800bb3c <prvPortStartFirstTask+0x24>)
 800bb1a:	6800      	ldr	r0, [r0, #0]
 800bb1c:	6800      	ldr	r0, [r0, #0]
 800bb1e:	f380 8808 	msr	MSP, r0
 800bb22:	f04f 0000 	mov.w	r0, #0
 800bb26:	f380 8814 	msr	CONTROL, r0
 800bb2a:	b662      	cpsie	i
 800bb2c:	b661      	cpsie	f
 800bb2e:	f3bf 8f4f 	dsb	sy
 800bb32:	f3bf 8f6f 	isb	sy
 800bb36:	df00      	svc	0
 800bb38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bb3a:	bf00      	nop
 800bb3c:	e000ed08 	.word	0xe000ed08

0800bb40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b086      	sub	sp, #24
 800bb44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bb46:	4b46      	ldr	r3, [pc, #280]	; (800bc60 <xPortStartScheduler+0x120>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a46      	ldr	r2, [pc, #280]	; (800bc64 <xPortStartScheduler+0x124>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d10a      	bne.n	800bb66 <xPortStartScheduler+0x26>
	__asm volatile
 800bb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb54:	f383 8811 	msr	BASEPRI, r3
 800bb58:	f3bf 8f6f 	isb	sy
 800bb5c:	f3bf 8f4f 	dsb	sy
 800bb60:	613b      	str	r3, [r7, #16]
}
 800bb62:	bf00      	nop
 800bb64:	e7fe      	b.n	800bb64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bb66:	4b3e      	ldr	r3, [pc, #248]	; (800bc60 <xPortStartScheduler+0x120>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4a3f      	ldr	r2, [pc, #252]	; (800bc68 <xPortStartScheduler+0x128>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d10a      	bne.n	800bb86 <xPortStartScheduler+0x46>
	__asm volatile
 800bb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb74:	f383 8811 	msr	BASEPRI, r3
 800bb78:	f3bf 8f6f 	isb	sy
 800bb7c:	f3bf 8f4f 	dsb	sy
 800bb80:	60fb      	str	r3, [r7, #12]
}
 800bb82:	bf00      	nop
 800bb84:	e7fe      	b.n	800bb84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb86:	4b39      	ldr	r3, [pc, #228]	; (800bc6c <xPortStartScheduler+0x12c>)
 800bb88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	22ff      	movs	r2, #255	; 0xff
 800bb96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bba0:	78fb      	ldrb	r3, [r7, #3]
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bba8:	b2da      	uxtb	r2, r3
 800bbaa:	4b31      	ldr	r3, [pc, #196]	; (800bc70 <xPortStartScheduler+0x130>)
 800bbac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bbae:	4b31      	ldr	r3, [pc, #196]	; (800bc74 <xPortStartScheduler+0x134>)
 800bbb0:	2207      	movs	r2, #7
 800bbb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bbb4:	e009      	b.n	800bbca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bbb6:	4b2f      	ldr	r3, [pc, #188]	; (800bc74 <xPortStartScheduler+0x134>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	4a2d      	ldr	r2, [pc, #180]	; (800bc74 <xPortStartScheduler+0x134>)
 800bbbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bbc0:	78fb      	ldrb	r3, [r7, #3]
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	005b      	lsls	r3, r3, #1
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bbca:	78fb      	ldrb	r3, [r7, #3]
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbd2:	2b80      	cmp	r3, #128	; 0x80
 800bbd4:	d0ef      	beq.n	800bbb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bbd6:	4b27      	ldr	r3, [pc, #156]	; (800bc74 <xPortStartScheduler+0x134>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f1c3 0307 	rsb	r3, r3, #7
 800bbde:	2b04      	cmp	r3, #4
 800bbe0:	d00a      	beq.n	800bbf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe6:	f383 8811 	msr	BASEPRI, r3
 800bbea:	f3bf 8f6f 	isb	sy
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	60bb      	str	r3, [r7, #8]
}
 800bbf4:	bf00      	nop
 800bbf6:	e7fe      	b.n	800bbf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bbf8:	4b1e      	ldr	r3, [pc, #120]	; (800bc74 <xPortStartScheduler+0x134>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	021b      	lsls	r3, r3, #8
 800bbfe:	4a1d      	ldr	r2, [pc, #116]	; (800bc74 <xPortStartScheduler+0x134>)
 800bc00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bc02:	4b1c      	ldr	r3, [pc, #112]	; (800bc74 <xPortStartScheduler+0x134>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bc0a:	4a1a      	ldr	r2, [pc, #104]	; (800bc74 <xPortStartScheduler+0x134>)
 800bc0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	b2da      	uxtb	r2, r3
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc16:	4b18      	ldr	r3, [pc, #96]	; (800bc78 <xPortStartScheduler+0x138>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a17      	ldr	r2, [pc, #92]	; (800bc78 <xPortStartScheduler+0x138>)
 800bc1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bc20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bc22:	4b15      	ldr	r3, [pc, #84]	; (800bc78 <xPortStartScheduler+0x138>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a14      	ldr	r2, [pc, #80]	; (800bc78 <xPortStartScheduler+0x138>)
 800bc28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bc2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bc2e:	f000 f8dd 	bl	800bdec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bc32:	4b12      	ldr	r3, [pc, #72]	; (800bc7c <xPortStartScheduler+0x13c>)
 800bc34:	2200      	movs	r2, #0
 800bc36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bc38:	f000 f8fc 	bl	800be34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bc3c:	4b10      	ldr	r3, [pc, #64]	; (800bc80 <xPortStartScheduler+0x140>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a0f      	ldr	r2, [pc, #60]	; (800bc80 <xPortStartScheduler+0x140>)
 800bc42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bc46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bc48:	f7ff ff66 	bl	800bb18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bc4c:	f7fe ff9c 	bl	800ab88 <vTaskSwitchContext>
	prvTaskExitError();
 800bc50:	f7ff ff20 	bl	800ba94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bc54:	2300      	movs	r3, #0
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3718      	adds	r7, #24
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	e000ed00 	.word	0xe000ed00
 800bc64:	410fc271 	.word	0x410fc271
 800bc68:	410fc270 	.word	0x410fc270
 800bc6c:	e000e400 	.word	0xe000e400
 800bc70:	200026ec 	.word	0x200026ec
 800bc74:	200026f0 	.word	0x200026f0
 800bc78:	e000ed20 	.word	0xe000ed20
 800bc7c:	2000000c 	.word	0x2000000c
 800bc80:	e000ef34 	.word	0xe000ef34

0800bc84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
	__asm volatile
 800bc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8e:	f383 8811 	msr	BASEPRI, r3
 800bc92:	f3bf 8f6f 	isb	sy
 800bc96:	f3bf 8f4f 	dsb	sy
 800bc9a:	607b      	str	r3, [r7, #4]
}
 800bc9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc9e:	4b0f      	ldr	r3, [pc, #60]	; (800bcdc <vPortEnterCritical+0x58>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	3301      	adds	r3, #1
 800bca4:	4a0d      	ldr	r2, [pc, #52]	; (800bcdc <vPortEnterCritical+0x58>)
 800bca6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bca8:	4b0c      	ldr	r3, [pc, #48]	; (800bcdc <vPortEnterCritical+0x58>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d10f      	bne.n	800bcd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bcb0:	4b0b      	ldr	r3, [pc, #44]	; (800bce0 <vPortEnterCritical+0x5c>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00a      	beq.n	800bcd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcbe:	f383 8811 	msr	BASEPRI, r3
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	f3bf 8f4f 	dsb	sy
 800bcca:	603b      	str	r3, [r7, #0]
}
 800bccc:	bf00      	nop
 800bcce:	e7fe      	b.n	800bcce <vPortEnterCritical+0x4a>
	}
}
 800bcd0:	bf00      	nop
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr
 800bcdc:	2000000c 	.word	0x2000000c
 800bce0:	e000ed04 	.word	0xe000ed04

0800bce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bcea:	4b12      	ldr	r3, [pc, #72]	; (800bd34 <vPortExitCritical+0x50>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d10a      	bne.n	800bd08 <vPortExitCritical+0x24>
	__asm volatile
 800bcf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf6:	f383 8811 	msr	BASEPRI, r3
 800bcfa:	f3bf 8f6f 	isb	sy
 800bcfe:	f3bf 8f4f 	dsb	sy
 800bd02:	607b      	str	r3, [r7, #4]
}
 800bd04:	bf00      	nop
 800bd06:	e7fe      	b.n	800bd06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bd08:	4b0a      	ldr	r3, [pc, #40]	; (800bd34 <vPortExitCritical+0x50>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	3b01      	subs	r3, #1
 800bd0e:	4a09      	ldr	r2, [pc, #36]	; (800bd34 <vPortExitCritical+0x50>)
 800bd10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd12:	4b08      	ldr	r3, [pc, #32]	; (800bd34 <vPortExitCritical+0x50>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d105      	bne.n	800bd26 <vPortExitCritical+0x42>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	f383 8811 	msr	BASEPRI, r3
}
 800bd24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bd26:	bf00      	nop
 800bd28:	370c      	adds	r7, #12
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr
 800bd32:	bf00      	nop
 800bd34:	2000000c 	.word	0x2000000c
	...

0800bd40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bd40:	f3ef 8009 	mrs	r0, PSP
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	4b15      	ldr	r3, [pc, #84]	; (800bda0 <pxCurrentTCBConst>)
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	f01e 0f10 	tst.w	lr, #16
 800bd50:	bf08      	it	eq
 800bd52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bd56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd5a:	6010      	str	r0, [r2, #0]
 800bd5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bd60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bd64:	f380 8811 	msr	BASEPRI, r0
 800bd68:	f3bf 8f4f 	dsb	sy
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f7fe ff0a 	bl	800ab88 <vTaskSwitchContext>
 800bd74:	f04f 0000 	mov.w	r0, #0
 800bd78:	f380 8811 	msr	BASEPRI, r0
 800bd7c:	bc09      	pop	{r0, r3}
 800bd7e:	6819      	ldr	r1, [r3, #0]
 800bd80:	6808      	ldr	r0, [r1, #0]
 800bd82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd86:	f01e 0f10 	tst.w	lr, #16
 800bd8a:	bf08      	it	eq
 800bd8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd90:	f380 8809 	msr	PSP, r0
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	f3af 8000 	nop.w

0800bda0 <pxCurrentTCBConst>:
 800bda0:	200020c0 	.word	0x200020c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bda4:	bf00      	nop
 800bda6:	bf00      	nop

0800bda8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
	__asm volatile
 800bdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb2:	f383 8811 	msr	BASEPRI, r3
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	607b      	str	r3, [r7, #4]
}
 800bdc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bdc2:	f7fe fe27 	bl	800aa14 <xTaskIncrementTick>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d003      	beq.n	800bdd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bdcc:	4b06      	ldr	r3, [pc, #24]	; (800bde8 <xPortSysTickHandler+0x40>)
 800bdce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdd2:	601a      	str	r2, [r3, #0]
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	f383 8811 	msr	BASEPRI, r3
}
 800bdde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bde0:	bf00      	nop
 800bde2:	3708      	adds	r7, #8
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	e000ed04 	.word	0xe000ed04

0800bdec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bdec:	b480      	push	{r7}
 800bdee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bdf0:	4b0b      	ldr	r3, [pc, #44]	; (800be20 <vPortSetupTimerInterrupt+0x34>)
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bdf6:	4b0b      	ldr	r3, [pc, #44]	; (800be24 <vPortSetupTimerInterrupt+0x38>)
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bdfc:	4b0a      	ldr	r3, [pc, #40]	; (800be28 <vPortSetupTimerInterrupt+0x3c>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a0a      	ldr	r2, [pc, #40]	; (800be2c <vPortSetupTimerInterrupt+0x40>)
 800be02:	fba2 2303 	umull	r2, r3, r2, r3
 800be06:	099b      	lsrs	r3, r3, #6
 800be08:	4a09      	ldr	r2, [pc, #36]	; (800be30 <vPortSetupTimerInterrupt+0x44>)
 800be0a:	3b01      	subs	r3, #1
 800be0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be0e:	4b04      	ldr	r3, [pc, #16]	; (800be20 <vPortSetupTimerInterrupt+0x34>)
 800be10:	2207      	movs	r2, #7
 800be12:	601a      	str	r2, [r3, #0]
}
 800be14:	bf00      	nop
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop
 800be20:	e000e010 	.word	0xe000e010
 800be24:	e000e018 	.word	0xe000e018
 800be28:	20000000 	.word	0x20000000
 800be2c:	10624dd3 	.word	0x10624dd3
 800be30:	e000e014 	.word	0xe000e014

0800be34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800be34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800be44 <vPortEnableVFP+0x10>
 800be38:	6801      	ldr	r1, [r0, #0]
 800be3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800be3e:	6001      	str	r1, [r0, #0]
 800be40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800be42:	bf00      	nop
 800be44:	e000ed88 	.word	0xe000ed88

0800be48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800be48:	b480      	push	{r7}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800be4e:	f3ef 8305 	mrs	r3, IPSR
 800be52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2b0f      	cmp	r3, #15
 800be58:	d914      	bls.n	800be84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800be5a:	4a17      	ldr	r2, [pc, #92]	; (800beb8 <vPortValidateInterruptPriority+0x70>)
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	4413      	add	r3, r2
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800be64:	4b15      	ldr	r3, [pc, #84]	; (800bebc <vPortValidateInterruptPriority+0x74>)
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	7afa      	ldrb	r2, [r7, #11]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d20a      	bcs.n	800be84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800be6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be72:	f383 8811 	msr	BASEPRI, r3
 800be76:	f3bf 8f6f 	isb	sy
 800be7a:	f3bf 8f4f 	dsb	sy
 800be7e:	607b      	str	r3, [r7, #4]
}
 800be80:	bf00      	nop
 800be82:	e7fe      	b.n	800be82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be84:	4b0e      	ldr	r3, [pc, #56]	; (800bec0 <vPortValidateInterruptPriority+0x78>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be8c:	4b0d      	ldr	r3, [pc, #52]	; (800bec4 <vPortValidateInterruptPriority+0x7c>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	429a      	cmp	r2, r3
 800be92:	d90a      	bls.n	800beaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800be94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be98:	f383 8811 	msr	BASEPRI, r3
 800be9c:	f3bf 8f6f 	isb	sy
 800bea0:	f3bf 8f4f 	dsb	sy
 800bea4:	603b      	str	r3, [r7, #0]
}
 800bea6:	bf00      	nop
 800bea8:	e7fe      	b.n	800bea8 <vPortValidateInterruptPriority+0x60>
	}
 800beaa:	bf00      	nop
 800beac:	3714      	adds	r7, #20
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr
 800beb6:	bf00      	nop
 800beb8:	e000e3f0 	.word	0xe000e3f0
 800bebc:	200026ec 	.word	0x200026ec
 800bec0:	e000ed0c 	.word	0xe000ed0c
 800bec4:	200026f0 	.word	0x200026f0

0800bec8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b08a      	sub	sp, #40	; 0x28
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bed0:	2300      	movs	r3, #0
 800bed2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bed4:	f7fe fce2 	bl	800a89c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bed8:	4b5b      	ldr	r3, [pc, #364]	; (800c048 <pvPortMalloc+0x180>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d101      	bne.n	800bee4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bee0:	f000 f920 	bl	800c124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bee4:	4b59      	ldr	r3, [pc, #356]	; (800c04c <pvPortMalloc+0x184>)
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4013      	ands	r3, r2
 800beec:	2b00      	cmp	r3, #0
 800beee:	f040 8093 	bne.w	800c018 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d01d      	beq.n	800bf34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bef8:	2208      	movs	r2, #8
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4413      	add	r3, r2
 800befe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f003 0307 	and.w	r3, r3, #7
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d014      	beq.n	800bf34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f023 0307 	bic.w	r3, r3, #7
 800bf10:	3308      	adds	r3, #8
 800bf12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f003 0307 	and.w	r3, r3, #7
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d00a      	beq.n	800bf34 <pvPortMalloc+0x6c>
	__asm volatile
 800bf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf22:	f383 8811 	msr	BASEPRI, r3
 800bf26:	f3bf 8f6f 	isb	sy
 800bf2a:	f3bf 8f4f 	dsb	sy
 800bf2e:	617b      	str	r3, [r7, #20]
}
 800bf30:	bf00      	nop
 800bf32:	e7fe      	b.n	800bf32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d06e      	beq.n	800c018 <pvPortMalloc+0x150>
 800bf3a:	4b45      	ldr	r3, [pc, #276]	; (800c050 <pvPortMalloc+0x188>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d869      	bhi.n	800c018 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bf44:	4b43      	ldr	r3, [pc, #268]	; (800c054 <pvPortMalloc+0x18c>)
 800bf46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bf48:	4b42      	ldr	r3, [pc, #264]	; (800c054 <pvPortMalloc+0x18c>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf4e:	e004      	b.n	800bf5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d903      	bls.n	800bf6c <pvPortMalloc+0xa4>
 800bf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1f1      	bne.n	800bf50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bf6c:	4b36      	ldr	r3, [pc, #216]	; (800c048 <pvPortMalloc+0x180>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d050      	beq.n	800c018 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bf76:	6a3b      	ldr	r3, [r7, #32]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2208      	movs	r2, #8
 800bf7c:	4413      	add	r3, r2
 800bf7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	6a3b      	ldr	r3, [r7, #32]
 800bf86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8a:	685a      	ldr	r2, [r3, #4]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	1ad2      	subs	r2, r2, r3
 800bf90:	2308      	movs	r3, #8
 800bf92:	005b      	lsls	r3, r3, #1
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d91f      	bls.n	800bfd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	f003 0307 	and.w	r3, r3, #7
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00a      	beq.n	800bfc0 <pvPortMalloc+0xf8>
	__asm volatile
 800bfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfae:	f383 8811 	msr	BASEPRI, r3
 800bfb2:	f3bf 8f6f 	isb	sy
 800bfb6:	f3bf 8f4f 	dsb	sy
 800bfba:	613b      	str	r3, [r7, #16]
}
 800bfbc:	bf00      	nop
 800bfbe:	e7fe      	b.n	800bfbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc2:	685a      	ldr	r2, [r3, #4]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	1ad2      	subs	r2, r2, r3
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bfd2:	69b8      	ldr	r0, [r7, #24]
 800bfd4:	f000 f908 	bl	800c1e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bfd8:	4b1d      	ldr	r3, [pc, #116]	; (800c050 <pvPortMalloc+0x188>)
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	1ad3      	subs	r3, r2, r3
 800bfe2:	4a1b      	ldr	r2, [pc, #108]	; (800c050 <pvPortMalloc+0x188>)
 800bfe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bfe6:	4b1a      	ldr	r3, [pc, #104]	; (800c050 <pvPortMalloc+0x188>)
 800bfe8:	681a      	ldr	r2, [r3, #0]
 800bfea:	4b1b      	ldr	r3, [pc, #108]	; (800c058 <pvPortMalloc+0x190>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d203      	bcs.n	800bffa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bff2:	4b17      	ldr	r3, [pc, #92]	; (800c050 <pvPortMalloc+0x188>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	4a18      	ldr	r2, [pc, #96]	; (800c058 <pvPortMalloc+0x190>)
 800bff8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffc:	685a      	ldr	r2, [r3, #4]
 800bffe:	4b13      	ldr	r3, [pc, #76]	; (800c04c <pvPortMalloc+0x184>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	431a      	orrs	r2, r3
 800c004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c006:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00a:	2200      	movs	r2, #0
 800c00c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c00e:	4b13      	ldr	r3, [pc, #76]	; (800c05c <pvPortMalloc+0x194>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	3301      	adds	r3, #1
 800c014:	4a11      	ldr	r2, [pc, #68]	; (800c05c <pvPortMalloc+0x194>)
 800c016:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c018:	f7fe fc4e 	bl	800a8b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	f003 0307 	and.w	r3, r3, #7
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00a      	beq.n	800c03c <pvPortMalloc+0x174>
	__asm volatile
 800c026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02a:	f383 8811 	msr	BASEPRI, r3
 800c02e:	f3bf 8f6f 	isb	sy
 800c032:	f3bf 8f4f 	dsb	sy
 800c036:	60fb      	str	r3, [r7, #12]
}
 800c038:	bf00      	nop
 800c03a:	e7fe      	b.n	800c03a <pvPortMalloc+0x172>
	return pvReturn;
 800c03c:	69fb      	ldr	r3, [r7, #28]
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3728      	adds	r7, #40	; 0x28
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	200032b4 	.word	0x200032b4
 800c04c:	200032c8 	.word	0x200032c8
 800c050:	200032b8 	.word	0x200032b8
 800c054:	200032ac 	.word	0x200032ac
 800c058:	200032bc 	.word	0x200032bc
 800c05c:	200032c0 	.word	0x200032c0

0800c060 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b086      	sub	sp, #24
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d04d      	beq.n	800c10e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c072:	2308      	movs	r3, #8
 800c074:	425b      	negs	r3, r3
 800c076:	697a      	ldr	r2, [r7, #20]
 800c078:	4413      	add	r3, r2
 800c07a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	685a      	ldr	r2, [r3, #4]
 800c084:	4b24      	ldr	r3, [pc, #144]	; (800c118 <vPortFree+0xb8>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4013      	ands	r3, r2
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d10a      	bne.n	800c0a4 <vPortFree+0x44>
	__asm volatile
 800c08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c092:	f383 8811 	msr	BASEPRI, r3
 800c096:	f3bf 8f6f 	isb	sy
 800c09a:	f3bf 8f4f 	dsb	sy
 800c09e:	60fb      	str	r3, [r7, #12]
}
 800c0a0:	bf00      	nop
 800c0a2:	e7fe      	b.n	800c0a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00a      	beq.n	800c0c2 <vPortFree+0x62>
	__asm volatile
 800c0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b0:	f383 8811 	msr	BASEPRI, r3
 800c0b4:	f3bf 8f6f 	isb	sy
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	60bb      	str	r3, [r7, #8]
}
 800c0be:	bf00      	nop
 800c0c0:	e7fe      	b.n	800c0c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	685a      	ldr	r2, [r3, #4]
 800c0c6:	4b14      	ldr	r3, [pc, #80]	; (800c118 <vPortFree+0xb8>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4013      	ands	r3, r2
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d01e      	beq.n	800c10e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d11a      	bne.n	800c10e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	685a      	ldr	r2, [r3, #4]
 800c0dc:	4b0e      	ldr	r3, [pc, #56]	; (800c118 <vPortFree+0xb8>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	43db      	mvns	r3, r3
 800c0e2:	401a      	ands	r2, r3
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c0e8:	f7fe fbd8 	bl	800a89c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	685a      	ldr	r2, [r3, #4]
 800c0f0:	4b0a      	ldr	r3, [pc, #40]	; (800c11c <vPortFree+0xbc>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4413      	add	r3, r2
 800c0f6:	4a09      	ldr	r2, [pc, #36]	; (800c11c <vPortFree+0xbc>)
 800c0f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c0fa:	6938      	ldr	r0, [r7, #16]
 800c0fc:	f000 f874 	bl	800c1e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c100:	4b07      	ldr	r3, [pc, #28]	; (800c120 <vPortFree+0xc0>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	3301      	adds	r3, #1
 800c106:	4a06      	ldr	r2, [pc, #24]	; (800c120 <vPortFree+0xc0>)
 800c108:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c10a:	f7fe fbd5 	bl	800a8b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c10e:	bf00      	nop
 800c110:	3718      	adds	r7, #24
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	200032c8 	.word	0x200032c8
 800c11c:	200032b8 	.word	0x200032b8
 800c120:	200032c4 	.word	0x200032c4

0800c124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c124:	b480      	push	{r7}
 800c126:	b085      	sub	sp, #20
 800c128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c12a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c12e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c130:	4b27      	ldr	r3, [pc, #156]	; (800c1d0 <prvHeapInit+0xac>)
 800c132:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f003 0307 	and.w	r3, r3, #7
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d00c      	beq.n	800c158 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	3307      	adds	r3, #7
 800c142:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f023 0307 	bic.w	r3, r3, #7
 800c14a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c14c:	68ba      	ldr	r2, [r7, #8]
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	4a1f      	ldr	r2, [pc, #124]	; (800c1d0 <prvHeapInit+0xac>)
 800c154:	4413      	add	r3, r2
 800c156:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c15c:	4a1d      	ldr	r2, [pc, #116]	; (800c1d4 <prvHeapInit+0xb0>)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c162:	4b1c      	ldr	r3, [pc, #112]	; (800c1d4 <prvHeapInit+0xb0>)
 800c164:	2200      	movs	r2, #0
 800c166:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	68ba      	ldr	r2, [r7, #8]
 800c16c:	4413      	add	r3, r2
 800c16e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c170:	2208      	movs	r2, #8
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	1a9b      	subs	r3, r3, r2
 800c176:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f023 0307 	bic.w	r3, r3, #7
 800c17e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	4a15      	ldr	r2, [pc, #84]	; (800c1d8 <prvHeapInit+0xb4>)
 800c184:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c186:	4b14      	ldr	r3, [pc, #80]	; (800c1d8 <prvHeapInit+0xb4>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2200      	movs	r2, #0
 800c18c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c18e:	4b12      	ldr	r3, [pc, #72]	; (800c1d8 <prvHeapInit+0xb4>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	2200      	movs	r2, #0
 800c194:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	68fa      	ldr	r2, [r7, #12]
 800c19e:	1ad2      	subs	r2, r2, r3
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c1a4:	4b0c      	ldr	r3, [pc, #48]	; (800c1d8 <prvHeapInit+0xb4>)
 800c1a6:	681a      	ldr	r2, [r3, #0]
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	4a0a      	ldr	r2, [pc, #40]	; (800c1dc <prvHeapInit+0xb8>)
 800c1b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	4a09      	ldr	r2, [pc, #36]	; (800c1e0 <prvHeapInit+0xbc>)
 800c1ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c1bc:	4b09      	ldr	r3, [pc, #36]	; (800c1e4 <prvHeapInit+0xc0>)
 800c1be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c1c2:	601a      	str	r2, [r3, #0]
}
 800c1c4:	bf00      	nop
 800c1c6:	3714      	adds	r7, #20
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr
 800c1d0:	200026f4 	.word	0x200026f4
 800c1d4:	200032ac 	.word	0x200032ac
 800c1d8:	200032b4 	.word	0x200032b4
 800c1dc:	200032bc 	.word	0x200032bc
 800c1e0:	200032b8 	.word	0x200032b8
 800c1e4:	200032c8 	.word	0x200032c8

0800c1e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c1f0:	4b28      	ldr	r3, [pc, #160]	; (800c294 <prvInsertBlockIntoFreeList+0xac>)
 800c1f2:	60fb      	str	r3, [r7, #12]
 800c1f4:	e002      	b.n	800c1fc <prvInsertBlockIntoFreeList+0x14>
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	60fb      	str	r3, [r7, #12]
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	429a      	cmp	r2, r3
 800c204:	d8f7      	bhi.n	800c1f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	68ba      	ldr	r2, [r7, #8]
 800c210:	4413      	add	r3, r2
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	429a      	cmp	r2, r3
 800c216:	d108      	bne.n	800c22a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	685a      	ldr	r2, [r3, #4]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	441a      	add	r2, r3
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	68ba      	ldr	r2, [r7, #8]
 800c234:	441a      	add	r2, r3
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d118      	bne.n	800c270 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	4b15      	ldr	r3, [pc, #84]	; (800c298 <prvInsertBlockIntoFreeList+0xb0>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	429a      	cmp	r2, r3
 800c248:	d00d      	beq.n	800c266 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	685a      	ldr	r2, [r3, #4]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	441a      	add	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	601a      	str	r2, [r3, #0]
 800c264:	e008      	b.n	800c278 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c266:	4b0c      	ldr	r3, [pc, #48]	; (800c298 <prvInsertBlockIntoFreeList+0xb0>)
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	e003      	b.n	800c278 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c278:	68fa      	ldr	r2, [r7, #12]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d002      	beq.n	800c286 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c286:	bf00      	nop
 800c288:	3714      	adds	r7, #20
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr
 800c292:	bf00      	nop
 800c294:	200032ac 	.word	0x200032ac
 800c298:	200032b4 	.word	0x200032b4

0800c29c <__errno>:
 800c29c:	4b01      	ldr	r3, [pc, #4]	; (800c2a4 <__errno+0x8>)
 800c29e:	6818      	ldr	r0, [r3, #0]
 800c2a0:	4770      	bx	lr
 800c2a2:	bf00      	nop
 800c2a4:	20000010 	.word	0x20000010

0800c2a8 <__libc_init_array>:
 800c2a8:	b570      	push	{r4, r5, r6, lr}
 800c2aa:	4d0d      	ldr	r5, [pc, #52]	; (800c2e0 <__libc_init_array+0x38>)
 800c2ac:	4c0d      	ldr	r4, [pc, #52]	; (800c2e4 <__libc_init_array+0x3c>)
 800c2ae:	1b64      	subs	r4, r4, r5
 800c2b0:	10a4      	asrs	r4, r4, #2
 800c2b2:	2600      	movs	r6, #0
 800c2b4:	42a6      	cmp	r6, r4
 800c2b6:	d109      	bne.n	800c2cc <__libc_init_array+0x24>
 800c2b8:	4d0b      	ldr	r5, [pc, #44]	; (800c2e8 <__libc_init_array+0x40>)
 800c2ba:	4c0c      	ldr	r4, [pc, #48]	; (800c2ec <__libc_init_array+0x44>)
 800c2bc:	f001 fb2e 	bl	800d91c <_init>
 800c2c0:	1b64      	subs	r4, r4, r5
 800c2c2:	10a4      	asrs	r4, r4, #2
 800c2c4:	2600      	movs	r6, #0
 800c2c6:	42a6      	cmp	r6, r4
 800c2c8:	d105      	bne.n	800c2d6 <__libc_init_array+0x2e>
 800c2ca:	bd70      	pop	{r4, r5, r6, pc}
 800c2cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2d0:	4798      	blx	r3
 800c2d2:	3601      	adds	r6, #1
 800c2d4:	e7ee      	b.n	800c2b4 <__libc_init_array+0xc>
 800c2d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2da:	4798      	blx	r3
 800c2dc:	3601      	adds	r6, #1
 800c2de:	e7f2      	b.n	800c2c6 <__libc_init_array+0x1e>
 800c2e0:	0800e3f8 	.word	0x0800e3f8
 800c2e4:	0800e3f8 	.word	0x0800e3f8
 800c2e8:	0800e3f8 	.word	0x0800e3f8
 800c2ec:	0800e3fc 	.word	0x0800e3fc

0800c2f0 <memcmp>:
 800c2f0:	b510      	push	{r4, lr}
 800c2f2:	3901      	subs	r1, #1
 800c2f4:	4402      	add	r2, r0
 800c2f6:	4290      	cmp	r0, r2
 800c2f8:	d101      	bne.n	800c2fe <memcmp+0xe>
 800c2fa:	2000      	movs	r0, #0
 800c2fc:	e005      	b.n	800c30a <memcmp+0x1a>
 800c2fe:	7803      	ldrb	r3, [r0, #0]
 800c300:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c304:	42a3      	cmp	r3, r4
 800c306:	d001      	beq.n	800c30c <memcmp+0x1c>
 800c308:	1b18      	subs	r0, r3, r4
 800c30a:	bd10      	pop	{r4, pc}
 800c30c:	3001      	adds	r0, #1
 800c30e:	e7f2      	b.n	800c2f6 <memcmp+0x6>

0800c310 <memcpy>:
 800c310:	440a      	add	r2, r1
 800c312:	4291      	cmp	r1, r2
 800c314:	f100 33ff 	add.w	r3, r0, #4294967295
 800c318:	d100      	bne.n	800c31c <memcpy+0xc>
 800c31a:	4770      	bx	lr
 800c31c:	b510      	push	{r4, lr}
 800c31e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c322:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c326:	4291      	cmp	r1, r2
 800c328:	d1f9      	bne.n	800c31e <memcpy+0xe>
 800c32a:	bd10      	pop	{r4, pc}

0800c32c <memset>:
 800c32c:	4402      	add	r2, r0
 800c32e:	4603      	mov	r3, r0
 800c330:	4293      	cmp	r3, r2
 800c332:	d100      	bne.n	800c336 <memset+0xa>
 800c334:	4770      	bx	lr
 800c336:	f803 1b01 	strb.w	r1, [r3], #1
 800c33a:	e7f9      	b.n	800c330 <memset+0x4>

0800c33c <iprintf>:
 800c33c:	b40f      	push	{r0, r1, r2, r3}
 800c33e:	4b0a      	ldr	r3, [pc, #40]	; (800c368 <iprintf+0x2c>)
 800c340:	b513      	push	{r0, r1, r4, lr}
 800c342:	681c      	ldr	r4, [r3, #0]
 800c344:	b124      	cbz	r4, 800c350 <iprintf+0x14>
 800c346:	69a3      	ldr	r3, [r4, #24]
 800c348:	b913      	cbnz	r3, 800c350 <iprintf+0x14>
 800c34a:	4620      	mov	r0, r4
 800c34c:	f000 fb36 	bl	800c9bc <__sinit>
 800c350:	ab05      	add	r3, sp, #20
 800c352:	9a04      	ldr	r2, [sp, #16]
 800c354:	68a1      	ldr	r1, [r4, #8]
 800c356:	9301      	str	r3, [sp, #4]
 800c358:	4620      	mov	r0, r4
 800c35a:	f000 feb5 	bl	800d0c8 <_vfiprintf_r>
 800c35e:	b002      	add	sp, #8
 800c360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c364:	b004      	add	sp, #16
 800c366:	4770      	bx	lr
 800c368:	20000010 	.word	0x20000010

0800c36c <_puts_r>:
 800c36c:	b570      	push	{r4, r5, r6, lr}
 800c36e:	460e      	mov	r6, r1
 800c370:	4605      	mov	r5, r0
 800c372:	b118      	cbz	r0, 800c37c <_puts_r+0x10>
 800c374:	6983      	ldr	r3, [r0, #24]
 800c376:	b90b      	cbnz	r3, 800c37c <_puts_r+0x10>
 800c378:	f000 fb20 	bl	800c9bc <__sinit>
 800c37c:	69ab      	ldr	r3, [r5, #24]
 800c37e:	68ac      	ldr	r4, [r5, #8]
 800c380:	b913      	cbnz	r3, 800c388 <_puts_r+0x1c>
 800c382:	4628      	mov	r0, r5
 800c384:	f000 fb1a 	bl	800c9bc <__sinit>
 800c388:	4b2c      	ldr	r3, [pc, #176]	; (800c43c <_puts_r+0xd0>)
 800c38a:	429c      	cmp	r4, r3
 800c38c:	d120      	bne.n	800c3d0 <_puts_r+0x64>
 800c38e:	686c      	ldr	r4, [r5, #4]
 800c390:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c392:	07db      	lsls	r3, r3, #31
 800c394:	d405      	bmi.n	800c3a2 <_puts_r+0x36>
 800c396:	89a3      	ldrh	r3, [r4, #12]
 800c398:	0598      	lsls	r0, r3, #22
 800c39a:	d402      	bmi.n	800c3a2 <_puts_r+0x36>
 800c39c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c39e:	f000 fbbd 	bl	800cb1c <__retarget_lock_acquire_recursive>
 800c3a2:	89a3      	ldrh	r3, [r4, #12]
 800c3a4:	0719      	lsls	r1, r3, #28
 800c3a6:	d51d      	bpl.n	800c3e4 <_puts_r+0x78>
 800c3a8:	6923      	ldr	r3, [r4, #16]
 800c3aa:	b1db      	cbz	r3, 800c3e4 <_puts_r+0x78>
 800c3ac:	3e01      	subs	r6, #1
 800c3ae:	68a3      	ldr	r3, [r4, #8]
 800c3b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	60a3      	str	r3, [r4, #8]
 800c3b8:	bb39      	cbnz	r1, 800c40a <_puts_r+0x9e>
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	da38      	bge.n	800c430 <_puts_r+0xc4>
 800c3be:	4622      	mov	r2, r4
 800c3c0:	210a      	movs	r1, #10
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	f000 f902 	bl	800c5cc <__swbuf_r>
 800c3c8:	3001      	adds	r0, #1
 800c3ca:	d011      	beq.n	800c3f0 <_puts_r+0x84>
 800c3cc:	250a      	movs	r5, #10
 800c3ce:	e011      	b.n	800c3f4 <_puts_r+0x88>
 800c3d0:	4b1b      	ldr	r3, [pc, #108]	; (800c440 <_puts_r+0xd4>)
 800c3d2:	429c      	cmp	r4, r3
 800c3d4:	d101      	bne.n	800c3da <_puts_r+0x6e>
 800c3d6:	68ac      	ldr	r4, [r5, #8]
 800c3d8:	e7da      	b.n	800c390 <_puts_r+0x24>
 800c3da:	4b1a      	ldr	r3, [pc, #104]	; (800c444 <_puts_r+0xd8>)
 800c3dc:	429c      	cmp	r4, r3
 800c3de:	bf08      	it	eq
 800c3e0:	68ec      	ldreq	r4, [r5, #12]
 800c3e2:	e7d5      	b.n	800c390 <_puts_r+0x24>
 800c3e4:	4621      	mov	r1, r4
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	f000 f942 	bl	800c670 <__swsetup_r>
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	d0dd      	beq.n	800c3ac <_puts_r+0x40>
 800c3f0:	f04f 35ff 	mov.w	r5, #4294967295
 800c3f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3f6:	07da      	lsls	r2, r3, #31
 800c3f8:	d405      	bmi.n	800c406 <_puts_r+0x9a>
 800c3fa:	89a3      	ldrh	r3, [r4, #12]
 800c3fc:	059b      	lsls	r3, r3, #22
 800c3fe:	d402      	bmi.n	800c406 <_puts_r+0x9a>
 800c400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c402:	f000 fb8c 	bl	800cb1e <__retarget_lock_release_recursive>
 800c406:	4628      	mov	r0, r5
 800c408:	bd70      	pop	{r4, r5, r6, pc}
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	da04      	bge.n	800c418 <_puts_r+0xac>
 800c40e:	69a2      	ldr	r2, [r4, #24]
 800c410:	429a      	cmp	r2, r3
 800c412:	dc06      	bgt.n	800c422 <_puts_r+0xb6>
 800c414:	290a      	cmp	r1, #10
 800c416:	d004      	beq.n	800c422 <_puts_r+0xb6>
 800c418:	6823      	ldr	r3, [r4, #0]
 800c41a:	1c5a      	adds	r2, r3, #1
 800c41c:	6022      	str	r2, [r4, #0]
 800c41e:	7019      	strb	r1, [r3, #0]
 800c420:	e7c5      	b.n	800c3ae <_puts_r+0x42>
 800c422:	4622      	mov	r2, r4
 800c424:	4628      	mov	r0, r5
 800c426:	f000 f8d1 	bl	800c5cc <__swbuf_r>
 800c42a:	3001      	adds	r0, #1
 800c42c:	d1bf      	bne.n	800c3ae <_puts_r+0x42>
 800c42e:	e7df      	b.n	800c3f0 <_puts_r+0x84>
 800c430:	6823      	ldr	r3, [r4, #0]
 800c432:	250a      	movs	r5, #10
 800c434:	1c5a      	adds	r2, r3, #1
 800c436:	6022      	str	r2, [r4, #0]
 800c438:	701d      	strb	r5, [r3, #0]
 800c43a:	e7db      	b.n	800c3f4 <_puts_r+0x88>
 800c43c:	0800e37c 	.word	0x0800e37c
 800c440:	0800e39c 	.word	0x0800e39c
 800c444:	0800e35c 	.word	0x0800e35c

0800c448 <puts>:
 800c448:	4b02      	ldr	r3, [pc, #8]	; (800c454 <puts+0xc>)
 800c44a:	4601      	mov	r1, r0
 800c44c:	6818      	ldr	r0, [r3, #0]
 800c44e:	f7ff bf8d 	b.w	800c36c <_puts_r>
 800c452:	bf00      	nop
 800c454:	20000010 	.word	0x20000010

0800c458 <siprintf>:
 800c458:	b40e      	push	{r1, r2, r3}
 800c45a:	b500      	push	{lr}
 800c45c:	b09c      	sub	sp, #112	; 0x70
 800c45e:	ab1d      	add	r3, sp, #116	; 0x74
 800c460:	9002      	str	r0, [sp, #8]
 800c462:	9006      	str	r0, [sp, #24]
 800c464:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c468:	4809      	ldr	r0, [pc, #36]	; (800c490 <siprintf+0x38>)
 800c46a:	9107      	str	r1, [sp, #28]
 800c46c:	9104      	str	r1, [sp, #16]
 800c46e:	4909      	ldr	r1, [pc, #36]	; (800c494 <siprintf+0x3c>)
 800c470:	f853 2b04 	ldr.w	r2, [r3], #4
 800c474:	9105      	str	r1, [sp, #20]
 800c476:	6800      	ldr	r0, [r0, #0]
 800c478:	9301      	str	r3, [sp, #4]
 800c47a:	a902      	add	r1, sp, #8
 800c47c:	f000 fcfa 	bl	800ce74 <_svfiprintf_r>
 800c480:	9b02      	ldr	r3, [sp, #8]
 800c482:	2200      	movs	r2, #0
 800c484:	701a      	strb	r2, [r3, #0]
 800c486:	b01c      	add	sp, #112	; 0x70
 800c488:	f85d eb04 	ldr.w	lr, [sp], #4
 800c48c:	b003      	add	sp, #12
 800c48e:	4770      	bx	lr
 800c490:	20000010 	.word	0x20000010
 800c494:	ffff0208 	.word	0xffff0208

0800c498 <strncmp>:
 800c498:	b510      	push	{r4, lr}
 800c49a:	b17a      	cbz	r2, 800c4bc <strncmp+0x24>
 800c49c:	4603      	mov	r3, r0
 800c49e:	3901      	subs	r1, #1
 800c4a0:	1884      	adds	r4, r0, r2
 800c4a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c4a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c4aa:	4290      	cmp	r0, r2
 800c4ac:	d101      	bne.n	800c4b2 <strncmp+0x1a>
 800c4ae:	42a3      	cmp	r3, r4
 800c4b0:	d101      	bne.n	800c4b6 <strncmp+0x1e>
 800c4b2:	1a80      	subs	r0, r0, r2
 800c4b4:	bd10      	pop	{r4, pc}
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	d1f3      	bne.n	800c4a2 <strncmp+0xa>
 800c4ba:	e7fa      	b.n	800c4b2 <strncmp+0x1a>
 800c4bc:	4610      	mov	r0, r2
 800c4be:	e7f9      	b.n	800c4b4 <strncmp+0x1c>

0800c4c0 <strncpy>:
 800c4c0:	b510      	push	{r4, lr}
 800c4c2:	3901      	subs	r1, #1
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	b132      	cbz	r2, 800c4d6 <strncpy+0x16>
 800c4c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c4cc:	f803 4b01 	strb.w	r4, [r3], #1
 800c4d0:	3a01      	subs	r2, #1
 800c4d2:	2c00      	cmp	r4, #0
 800c4d4:	d1f7      	bne.n	800c4c6 <strncpy+0x6>
 800c4d6:	441a      	add	r2, r3
 800c4d8:	2100      	movs	r1, #0
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d100      	bne.n	800c4e0 <strncpy+0x20>
 800c4de:	bd10      	pop	{r4, pc}
 800c4e0:	f803 1b01 	strb.w	r1, [r3], #1
 800c4e4:	e7f9      	b.n	800c4da <strncpy+0x1a>

0800c4e6 <strstr>:
 800c4e6:	780a      	ldrb	r2, [r1, #0]
 800c4e8:	b570      	push	{r4, r5, r6, lr}
 800c4ea:	b96a      	cbnz	r2, 800c508 <strstr+0x22>
 800c4ec:	bd70      	pop	{r4, r5, r6, pc}
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d109      	bne.n	800c506 <strstr+0x20>
 800c4f2:	460c      	mov	r4, r1
 800c4f4:	4605      	mov	r5, r0
 800c4f6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d0f6      	beq.n	800c4ec <strstr+0x6>
 800c4fe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c502:	429e      	cmp	r6, r3
 800c504:	d0f7      	beq.n	800c4f6 <strstr+0x10>
 800c506:	3001      	adds	r0, #1
 800c508:	7803      	ldrb	r3, [r0, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d1ef      	bne.n	800c4ee <strstr+0x8>
 800c50e:	4618      	mov	r0, r3
 800c510:	e7ec      	b.n	800c4ec <strstr+0x6>
	...

0800c514 <strtok>:
 800c514:	4b16      	ldr	r3, [pc, #88]	; (800c570 <strtok+0x5c>)
 800c516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c518:	681e      	ldr	r6, [r3, #0]
 800c51a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c51c:	4605      	mov	r5, r0
 800c51e:	b9fc      	cbnz	r4, 800c560 <strtok+0x4c>
 800c520:	2050      	movs	r0, #80	; 0x50
 800c522:	9101      	str	r1, [sp, #4]
 800c524:	f000 fb62 	bl	800cbec <malloc>
 800c528:	9901      	ldr	r1, [sp, #4]
 800c52a:	65b0      	str	r0, [r6, #88]	; 0x58
 800c52c:	4602      	mov	r2, r0
 800c52e:	b920      	cbnz	r0, 800c53a <strtok+0x26>
 800c530:	4b10      	ldr	r3, [pc, #64]	; (800c574 <strtok+0x60>)
 800c532:	4811      	ldr	r0, [pc, #68]	; (800c578 <strtok+0x64>)
 800c534:	2157      	movs	r1, #87	; 0x57
 800c536:	f000 f909 	bl	800c74c <__assert_func>
 800c53a:	e9c0 4400 	strd	r4, r4, [r0]
 800c53e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c542:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c546:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c54a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c54e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c552:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c556:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c55a:	6184      	str	r4, [r0, #24]
 800c55c:	7704      	strb	r4, [r0, #28]
 800c55e:	6244      	str	r4, [r0, #36]	; 0x24
 800c560:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c562:	2301      	movs	r3, #1
 800c564:	4628      	mov	r0, r5
 800c566:	b002      	add	sp, #8
 800c568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c56c:	f000 b806 	b.w	800c57c <__strtok_r>
 800c570:	20000010 	.word	0x20000010
 800c574:	0800e2ac 	.word	0x0800e2ac
 800c578:	0800e2c3 	.word	0x0800e2c3

0800c57c <__strtok_r>:
 800c57c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c57e:	b908      	cbnz	r0, 800c584 <__strtok_r+0x8>
 800c580:	6810      	ldr	r0, [r2, #0]
 800c582:	b188      	cbz	r0, 800c5a8 <__strtok_r+0x2c>
 800c584:	4604      	mov	r4, r0
 800c586:	4620      	mov	r0, r4
 800c588:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c58c:	460f      	mov	r7, r1
 800c58e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c592:	b91e      	cbnz	r6, 800c59c <__strtok_r+0x20>
 800c594:	b965      	cbnz	r5, 800c5b0 <__strtok_r+0x34>
 800c596:	6015      	str	r5, [r2, #0]
 800c598:	4628      	mov	r0, r5
 800c59a:	e005      	b.n	800c5a8 <__strtok_r+0x2c>
 800c59c:	42b5      	cmp	r5, r6
 800c59e:	d1f6      	bne.n	800c58e <__strtok_r+0x12>
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d1f0      	bne.n	800c586 <__strtok_r+0xa>
 800c5a4:	6014      	str	r4, [r2, #0]
 800c5a6:	7003      	strb	r3, [r0, #0]
 800c5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5aa:	461c      	mov	r4, r3
 800c5ac:	e00c      	b.n	800c5c8 <__strtok_r+0x4c>
 800c5ae:	b915      	cbnz	r5, 800c5b6 <__strtok_r+0x3a>
 800c5b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c5b4:	460e      	mov	r6, r1
 800c5b6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c5ba:	42ab      	cmp	r3, r5
 800c5bc:	d1f7      	bne.n	800c5ae <__strtok_r+0x32>
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d0f3      	beq.n	800c5aa <__strtok_r+0x2e>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c5c8:	6014      	str	r4, [r2, #0]
 800c5ca:	e7ed      	b.n	800c5a8 <__strtok_r+0x2c>

0800c5cc <__swbuf_r>:
 800c5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ce:	460e      	mov	r6, r1
 800c5d0:	4614      	mov	r4, r2
 800c5d2:	4605      	mov	r5, r0
 800c5d4:	b118      	cbz	r0, 800c5de <__swbuf_r+0x12>
 800c5d6:	6983      	ldr	r3, [r0, #24]
 800c5d8:	b90b      	cbnz	r3, 800c5de <__swbuf_r+0x12>
 800c5da:	f000 f9ef 	bl	800c9bc <__sinit>
 800c5de:	4b21      	ldr	r3, [pc, #132]	; (800c664 <__swbuf_r+0x98>)
 800c5e0:	429c      	cmp	r4, r3
 800c5e2:	d12b      	bne.n	800c63c <__swbuf_r+0x70>
 800c5e4:	686c      	ldr	r4, [r5, #4]
 800c5e6:	69a3      	ldr	r3, [r4, #24]
 800c5e8:	60a3      	str	r3, [r4, #8]
 800c5ea:	89a3      	ldrh	r3, [r4, #12]
 800c5ec:	071a      	lsls	r2, r3, #28
 800c5ee:	d52f      	bpl.n	800c650 <__swbuf_r+0x84>
 800c5f0:	6923      	ldr	r3, [r4, #16]
 800c5f2:	b36b      	cbz	r3, 800c650 <__swbuf_r+0x84>
 800c5f4:	6923      	ldr	r3, [r4, #16]
 800c5f6:	6820      	ldr	r0, [r4, #0]
 800c5f8:	1ac0      	subs	r0, r0, r3
 800c5fa:	6963      	ldr	r3, [r4, #20]
 800c5fc:	b2f6      	uxtb	r6, r6
 800c5fe:	4283      	cmp	r3, r0
 800c600:	4637      	mov	r7, r6
 800c602:	dc04      	bgt.n	800c60e <__swbuf_r+0x42>
 800c604:	4621      	mov	r1, r4
 800c606:	4628      	mov	r0, r5
 800c608:	f000 f944 	bl	800c894 <_fflush_r>
 800c60c:	bb30      	cbnz	r0, 800c65c <__swbuf_r+0x90>
 800c60e:	68a3      	ldr	r3, [r4, #8]
 800c610:	3b01      	subs	r3, #1
 800c612:	60a3      	str	r3, [r4, #8]
 800c614:	6823      	ldr	r3, [r4, #0]
 800c616:	1c5a      	adds	r2, r3, #1
 800c618:	6022      	str	r2, [r4, #0]
 800c61a:	701e      	strb	r6, [r3, #0]
 800c61c:	6963      	ldr	r3, [r4, #20]
 800c61e:	3001      	adds	r0, #1
 800c620:	4283      	cmp	r3, r0
 800c622:	d004      	beq.n	800c62e <__swbuf_r+0x62>
 800c624:	89a3      	ldrh	r3, [r4, #12]
 800c626:	07db      	lsls	r3, r3, #31
 800c628:	d506      	bpl.n	800c638 <__swbuf_r+0x6c>
 800c62a:	2e0a      	cmp	r6, #10
 800c62c:	d104      	bne.n	800c638 <__swbuf_r+0x6c>
 800c62e:	4621      	mov	r1, r4
 800c630:	4628      	mov	r0, r5
 800c632:	f000 f92f 	bl	800c894 <_fflush_r>
 800c636:	b988      	cbnz	r0, 800c65c <__swbuf_r+0x90>
 800c638:	4638      	mov	r0, r7
 800c63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c63c:	4b0a      	ldr	r3, [pc, #40]	; (800c668 <__swbuf_r+0x9c>)
 800c63e:	429c      	cmp	r4, r3
 800c640:	d101      	bne.n	800c646 <__swbuf_r+0x7a>
 800c642:	68ac      	ldr	r4, [r5, #8]
 800c644:	e7cf      	b.n	800c5e6 <__swbuf_r+0x1a>
 800c646:	4b09      	ldr	r3, [pc, #36]	; (800c66c <__swbuf_r+0xa0>)
 800c648:	429c      	cmp	r4, r3
 800c64a:	bf08      	it	eq
 800c64c:	68ec      	ldreq	r4, [r5, #12]
 800c64e:	e7ca      	b.n	800c5e6 <__swbuf_r+0x1a>
 800c650:	4621      	mov	r1, r4
 800c652:	4628      	mov	r0, r5
 800c654:	f000 f80c 	bl	800c670 <__swsetup_r>
 800c658:	2800      	cmp	r0, #0
 800c65a:	d0cb      	beq.n	800c5f4 <__swbuf_r+0x28>
 800c65c:	f04f 37ff 	mov.w	r7, #4294967295
 800c660:	e7ea      	b.n	800c638 <__swbuf_r+0x6c>
 800c662:	bf00      	nop
 800c664:	0800e37c 	.word	0x0800e37c
 800c668:	0800e39c 	.word	0x0800e39c
 800c66c:	0800e35c 	.word	0x0800e35c

0800c670 <__swsetup_r>:
 800c670:	4b32      	ldr	r3, [pc, #200]	; (800c73c <__swsetup_r+0xcc>)
 800c672:	b570      	push	{r4, r5, r6, lr}
 800c674:	681d      	ldr	r5, [r3, #0]
 800c676:	4606      	mov	r6, r0
 800c678:	460c      	mov	r4, r1
 800c67a:	b125      	cbz	r5, 800c686 <__swsetup_r+0x16>
 800c67c:	69ab      	ldr	r3, [r5, #24]
 800c67e:	b913      	cbnz	r3, 800c686 <__swsetup_r+0x16>
 800c680:	4628      	mov	r0, r5
 800c682:	f000 f99b 	bl	800c9bc <__sinit>
 800c686:	4b2e      	ldr	r3, [pc, #184]	; (800c740 <__swsetup_r+0xd0>)
 800c688:	429c      	cmp	r4, r3
 800c68a:	d10f      	bne.n	800c6ac <__swsetup_r+0x3c>
 800c68c:	686c      	ldr	r4, [r5, #4]
 800c68e:	89a3      	ldrh	r3, [r4, #12]
 800c690:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c694:	0719      	lsls	r1, r3, #28
 800c696:	d42c      	bmi.n	800c6f2 <__swsetup_r+0x82>
 800c698:	06dd      	lsls	r5, r3, #27
 800c69a:	d411      	bmi.n	800c6c0 <__swsetup_r+0x50>
 800c69c:	2309      	movs	r3, #9
 800c69e:	6033      	str	r3, [r6, #0]
 800c6a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c6a4:	81a3      	strh	r3, [r4, #12]
 800c6a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c6aa:	e03e      	b.n	800c72a <__swsetup_r+0xba>
 800c6ac:	4b25      	ldr	r3, [pc, #148]	; (800c744 <__swsetup_r+0xd4>)
 800c6ae:	429c      	cmp	r4, r3
 800c6b0:	d101      	bne.n	800c6b6 <__swsetup_r+0x46>
 800c6b2:	68ac      	ldr	r4, [r5, #8]
 800c6b4:	e7eb      	b.n	800c68e <__swsetup_r+0x1e>
 800c6b6:	4b24      	ldr	r3, [pc, #144]	; (800c748 <__swsetup_r+0xd8>)
 800c6b8:	429c      	cmp	r4, r3
 800c6ba:	bf08      	it	eq
 800c6bc:	68ec      	ldreq	r4, [r5, #12]
 800c6be:	e7e6      	b.n	800c68e <__swsetup_r+0x1e>
 800c6c0:	0758      	lsls	r0, r3, #29
 800c6c2:	d512      	bpl.n	800c6ea <__swsetup_r+0x7a>
 800c6c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6c6:	b141      	cbz	r1, 800c6da <__swsetup_r+0x6a>
 800c6c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6cc:	4299      	cmp	r1, r3
 800c6ce:	d002      	beq.n	800c6d6 <__swsetup_r+0x66>
 800c6d0:	4630      	mov	r0, r6
 800c6d2:	f000 fa93 	bl	800cbfc <_free_r>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	6363      	str	r3, [r4, #52]	; 0x34
 800c6da:	89a3      	ldrh	r3, [r4, #12]
 800c6dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c6e0:	81a3      	strh	r3, [r4, #12]
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	6063      	str	r3, [r4, #4]
 800c6e6:	6923      	ldr	r3, [r4, #16]
 800c6e8:	6023      	str	r3, [r4, #0]
 800c6ea:	89a3      	ldrh	r3, [r4, #12]
 800c6ec:	f043 0308 	orr.w	r3, r3, #8
 800c6f0:	81a3      	strh	r3, [r4, #12]
 800c6f2:	6923      	ldr	r3, [r4, #16]
 800c6f4:	b94b      	cbnz	r3, 800c70a <__swsetup_r+0x9a>
 800c6f6:	89a3      	ldrh	r3, [r4, #12]
 800c6f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c6fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c700:	d003      	beq.n	800c70a <__swsetup_r+0x9a>
 800c702:	4621      	mov	r1, r4
 800c704:	4630      	mov	r0, r6
 800c706:	f000 fa31 	bl	800cb6c <__smakebuf_r>
 800c70a:	89a0      	ldrh	r0, [r4, #12]
 800c70c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c710:	f010 0301 	ands.w	r3, r0, #1
 800c714:	d00a      	beq.n	800c72c <__swsetup_r+0xbc>
 800c716:	2300      	movs	r3, #0
 800c718:	60a3      	str	r3, [r4, #8]
 800c71a:	6963      	ldr	r3, [r4, #20]
 800c71c:	425b      	negs	r3, r3
 800c71e:	61a3      	str	r3, [r4, #24]
 800c720:	6923      	ldr	r3, [r4, #16]
 800c722:	b943      	cbnz	r3, 800c736 <__swsetup_r+0xc6>
 800c724:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c728:	d1ba      	bne.n	800c6a0 <__swsetup_r+0x30>
 800c72a:	bd70      	pop	{r4, r5, r6, pc}
 800c72c:	0781      	lsls	r1, r0, #30
 800c72e:	bf58      	it	pl
 800c730:	6963      	ldrpl	r3, [r4, #20]
 800c732:	60a3      	str	r3, [r4, #8]
 800c734:	e7f4      	b.n	800c720 <__swsetup_r+0xb0>
 800c736:	2000      	movs	r0, #0
 800c738:	e7f7      	b.n	800c72a <__swsetup_r+0xba>
 800c73a:	bf00      	nop
 800c73c:	20000010 	.word	0x20000010
 800c740:	0800e37c 	.word	0x0800e37c
 800c744:	0800e39c 	.word	0x0800e39c
 800c748:	0800e35c 	.word	0x0800e35c

0800c74c <__assert_func>:
 800c74c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c74e:	4614      	mov	r4, r2
 800c750:	461a      	mov	r2, r3
 800c752:	4b09      	ldr	r3, [pc, #36]	; (800c778 <__assert_func+0x2c>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4605      	mov	r5, r0
 800c758:	68d8      	ldr	r0, [r3, #12]
 800c75a:	b14c      	cbz	r4, 800c770 <__assert_func+0x24>
 800c75c:	4b07      	ldr	r3, [pc, #28]	; (800c77c <__assert_func+0x30>)
 800c75e:	9100      	str	r1, [sp, #0]
 800c760:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c764:	4906      	ldr	r1, [pc, #24]	; (800c780 <__assert_func+0x34>)
 800c766:	462b      	mov	r3, r5
 800c768:	f000 f9a6 	bl	800cab8 <fiprintf>
 800c76c:	f000 ffd6 	bl	800d71c <abort>
 800c770:	4b04      	ldr	r3, [pc, #16]	; (800c784 <__assert_func+0x38>)
 800c772:	461c      	mov	r4, r3
 800c774:	e7f3      	b.n	800c75e <__assert_func+0x12>
 800c776:	bf00      	nop
 800c778:	20000010 	.word	0x20000010
 800c77c:	0800e320 	.word	0x0800e320
 800c780:	0800e32d 	.word	0x0800e32d
 800c784:	0800e35b 	.word	0x0800e35b

0800c788 <__sflush_r>:
 800c788:	898a      	ldrh	r2, [r1, #12]
 800c78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c78e:	4605      	mov	r5, r0
 800c790:	0710      	lsls	r0, r2, #28
 800c792:	460c      	mov	r4, r1
 800c794:	d458      	bmi.n	800c848 <__sflush_r+0xc0>
 800c796:	684b      	ldr	r3, [r1, #4]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	dc05      	bgt.n	800c7a8 <__sflush_r+0x20>
 800c79c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	dc02      	bgt.n	800c7a8 <__sflush_r+0x20>
 800c7a2:	2000      	movs	r0, #0
 800c7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7aa:	2e00      	cmp	r6, #0
 800c7ac:	d0f9      	beq.n	800c7a2 <__sflush_r+0x1a>
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c7b4:	682f      	ldr	r7, [r5, #0]
 800c7b6:	602b      	str	r3, [r5, #0]
 800c7b8:	d032      	beq.n	800c820 <__sflush_r+0x98>
 800c7ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c7bc:	89a3      	ldrh	r3, [r4, #12]
 800c7be:	075a      	lsls	r2, r3, #29
 800c7c0:	d505      	bpl.n	800c7ce <__sflush_r+0x46>
 800c7c2:	6863      	ldr	r3, [r4, #4]
 800c7c4:	1ac0      	subs	r0, r0, r3
 800c7c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7c8:	b10b      	cbz	r3, 800c7ce <__sflush_r+0x46>
 800c7ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7cc:	1ac0      	subs	r0, r0, r3
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7d4:	6a21      	ldr	r1, [r4, #32]
 800c7d6:	4628      	mov	r0, r5
 800c7d8:	47b0      	blx	r6
 800c7da:	1c43      	adds	r3, r0, #1
 800c7dc:	89a3      	ldrh	r3, [r4, #12]
 800c7de:	d106      	bne.n	800c7ee <__sflush_r+0x66>
 800c7e0:	6829      	ldr	r1, [r5, #0]
 800c7e2:	291d      	cmp	r1, #29
 800c7e4:	d82c      	bhi.n	800c840 <__sflush_r+0xb8>
 800c7e6:	4a2a      	ldr	r2, [pc, #168]	; (800c890 <__sflush_r+0x108>)
 800c7e8:	40ca      	lsrs	r2, r1
 800c7ea:	07d6      	lsls	r6, r2, #31
 800c7ec:	d528      	bpl.n	800c840 <__sflush_r+0xb8>
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	6062      	str	r2, [r4, #4]
 800c7f2:	04d9      	lsls	r1, r3, #19
 800c7f4:	6922      	ldr	r2, [r4, #16]
 800c7f6:	6022      	str	r2, [r4, #0]
 800c7f8:	d504      	bpl.n	800c804 <__sflush_r+0x7c>
 800c7fa:	1c42      	adds	r2, r0, #1
 800c7fc:	d101      	bne.n	800c802 <__sflush_r+0x7a>
 800c7fe:	682b      	ldr	r3, [r5, #0]
 800c800:	b903      	cbnz	r3, 800c804 <__sflush_r+0x7c>
 800c802:	6560      	str	r0, [r4, #84]	; 0x54
 800c804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c806:	602f      	str	r7, [r5, #0]
 800c808:	2900      	cmp	r1, #0
 800c80a:	d0ca      	beq.n	800c7a2 <__sflush_r+0x1a>
 800c80c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c810:	4299      	cmp	r1, r3
 800c812:	d002      	beq.n	800c81a <__sflush_r+0x92>
 800c814:	4628      	mov	r0, r5
 800c816:	f000 f9f1 	bl	800cbfc <_free_r>
 800c81a:	2000      	movs	r0, #0
 800c81c:	6360      	str	r0, [r4, #52]	; 0x34
 800c81e:	e7c1      	b.n	800c7a4 <__sflush_r+0x1c>
 800c820:	6a21      	ldr	r1, [r4, #32]
 800c822:	2301      	movs	r3, #1
 800c824:	4628      	mov	r0, r5
 800c826:	47b0      	blx	r6
 800c828:	1c41      	adds	r1, r0, #1
 800c82a:	d1c7      	bne.n	800c7bc <__sflush_r+0x34>
 800c82c:	682b      	ldr	r3, [r5, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d0c4      	beq.n	800c7bc <__sflush_r+0x34>
 800c832:	2b1d      	cmp	r3, #29
 800c834:	d001      	beq.n	800c83a <__sflush_r+0xb2>
 800c836:	2b16      	cmp	r3, #22
 800c838:	d101      	bne.n	800c83e <__sflush_r+0xb6>
 800c83a:	602f      	str	r7, [r5, #0]
 800c83c:	e7b1      	b.n	800c7a2 <__sflush_r+0x1a>
 800c83e:	89a3      	ldrh	r3, [r4, #12]
 800c840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c844:	81a3      	strh	r3, [r4, #12]
 800c846:	e7ad      	b.n	800c7a4 <__sflush_r+0x1c>
 800c848:	690f      	ldr	r7, [r1, #16]
 800c84a:	2f00      	cmp	r7, #0
 800c84c:	d0a9      	beq.n	800c7a2 <__sflush_r+0x1a>
 800c84e:	0793      	lsls	r3, r2, #30
 800c850:	680e      	ldr	r6, [r1, #0]
 800c852:	bf08      	it	eq
 800c854:	694b      	ldreq	r3, [r1, #20]
 800c856:	600f      	str	r7, [r1, #0]
 800c858:	bf18      	it	ne
 800c85a:	2300      	movne	r3, #0
 800c85c:	eba6 0807 	sub.w	r8, r6, r7
 800c860:	608b      	str	r3, [r1, #8]
 800c862:	f1b8 0f00 	cmp.w	r8, #0
 800c866:	dd9c      	ble.n	800c7a2 <__sflush_r+0x1a>
 800c868:	6a21      	ldr	r1, [r4, #32]
 800c86a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c86c:	4643      	mov	r3, r8
 800c86e:	463a      	mov	r2, r7
 800c870:	4628      	mov	r0, r5
 800c872:	47b0      	blx	r6
 800c874:	2800      	cmp	r0, #0
 800c876:	dc06      	bgt.n	800c886 <__sflush_r+0xfe>
 800c878:	89a3      	ldrh	r3, [r4, #12]
 800c87a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c87e:	81a3      	strh	r3, [r4, #12]
 800c880:	f04f 30ff 	mov.w	r0, #4294967295
 800c884:	e78e      	b.n	800c7a4 <__sflush_r+0x1c>
 800c886:	4407      	add	r7, r0
 800c888:	eba8 0800 	sub.w	r8, r8, r0
 800c88c:	e7e9      	b.n	800c862 <__sflush_r+0xda>
 800c88e:	bf00      	nop
 800c890:	20400001 	.word	0x20400001

0800c894 <_fflush_r>:
 800c894:	b538      	push	{r3, r4, r5, lr}
 800c896:	690b      	ldr	r3, [r1, #16]
 800c898:	4605      	mov	r5, r0
 800c89a:	460c      	mov	r4, r1
 800c89c:	b913      	cbnz	r3, 800c8a4 <_fflush_r+0x10>
 800c89e:	2500      	movs	r5, #0
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	bd38      	pop	{r3, r4, r5, pc}
 800c8a4:	b118      	cbz	r0, 800c8ae <_fflush_r+0x1a>
 800c8a6:	6983      	ldr	r3, [r0, #24]
 800c8a8:	b90b      	cbnz	r3, 800c8ae <_fflush_r+0x1a>
 800c8aa:	f000 f887 	bl	800c9bc <__sinit>
 800c8ae:	4b14      	ldr	r3, [pc, #80]	; (800c900 <_fflush_r+0x6c>)
 800c8b0:	429c      	cmp	r4, r3
 800c8b2:	d11b      	bne.n	800c8ec <_fflush_r+0x58>
 800c8b4:	686c      	ldr	r4, [r5, #4]
 800c8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d0ef      	beq.n	800c89e <_fflush_r+0xa>
 800c8be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c8c0:	07d0      	lsls	r0, r2, #31
 800c8c2:	d404      	bmi.n	800c8ce <_fflush_r+0x3a>
 800c8c4:	0599      	lsls	r1, r3, #22
 800c8c6:	d402      	bmi.n	800c8ce <_fflush_r+0x3a>
 800c8c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8ca:	f000 f927 	bl	800cb1c <__retarget_lock_acquire_recursive>
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	4621      	mov	r1, r4
 800c8d2:	f7ff ff59 	bl	800c788 <__sflush_r>
 800c8d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8d8:	07da      	lsls	r2, r3, #31
 800c8da:	4605      	mov	r5, r0
 800c8dc:	d4e0      	bmi.n	800c8a0 <_fflush_r+0xc>
 800c8de:	89a3      	ldrh	r3, [r4, #12]
 800c8e0:	059b      	lsls	r3, r3, #22
 800c8e2:	d4dd      	bmi.n	800c8a0 <_fflush_r+0xc>
 800c8e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8e6:	f000 f91a 	bl	800cb1e <__retarget_lock_release_recursive>
 800c8ea:	e7d9      	b.n	800c8a0 <_fflush_r+0xc>
 800c8ec:	4b05      	ldr	r3, [pc, #20]	; (800c904 <_fflush_r+0x70>)
 800c8ee:	429c      	cmp	r4, r3
 800c8f0:	d101      	bne.n	800c8f6 <_fflush_r+0x62>
 800c8f2:	68ac      	ldr	r4, [r5, #8]
 800c8f4:	e7df      	b.n	800c8b6 <_fflush_r+0x22>
 800c8f6:	4b04      	ldr	r3, [pc, #16]	; (800c908 <_fflush_r+0x74>)
 800c8f8:	429c      	cmp	r4, r3
 800c8fa:	bf08      	it	eq
 800c8fc:	68ec      	ldreq	r4, [r5, #12]
 800c8fe:	e7da      	b.n	800c8b6 <_fflush_r+0x22>
 800c900:	0800e37c 	.word	0x0800e37c
 800c904:	0800e39c 	.word	0x0800e39c
 800c908:	0800e35c 	.word	0x0800e35c

0800c90c <std>:
 800c90c:	2300      	movs	r3, #0
 800c90e:	b510      	push	{r4, lr}
 800c910:	4604      	mov	r4, r0
 800c912:	e9c0 3300 	strd	r3, r3, [r0]
 800c916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c91a:	6083      	str	r3, [r0, #8]
 800c91c:	8181      	strh	r1, [r0, #12]
 800c91e:	6643      	str	r3, [r0, #100]	; 0x64
 800c920:	81c2      	strh	r2, [r0, #14]
 800c922:	6183      	str	r3, [r0, #24]
 800c924:	4619      	mov	r1, r3
 800c926:	2208      	movs	r2, #8
 800c928:	305c      	adds	r0, #92	; 0x5c
 800c92a:	f7ff fcff 	bl	800c32c <memset>
 800c92e:	4b05      	ldr	r3, [pc, #20]	; (800c944 <std+0x38>)
 800c930:	6263      	str	r3, [r4, #36]	; 0x24
 800c932:	4b05      	ldr	r3, [pc, #20]	; (800c948 <std+0x3c>)
 800c934:	62a3      	str	r3, [r4, #40]	; 0x28
 800c936:	4b05      	ldr	r3, [pc, #20]	; (800c94c <std+0x40>)
 800c938:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c93a:	4b05      	ldr	r3, [pc, #20]	; (800c950 <std+0x44>)
 800c93c:	6224      	str	r4, [r4, #32]
 800c93e:	6323      	str	r3, [r4, #48]	; 0x30
 800c940:	bd10      	pop	{r4, pc}
 800c942:	bf00      	nop
 800c944:	0800d671 	.word	0x0800d671
 800c948:	0800d693 	.word	0x0800d693
 800c94c:	0800d6cb 	.word	0x0800d6cb
 800c950:	0800d6ef 	.word	0x0800d6ef

0800c954 <_cleanup_r>:
 800c954:	4901      	ldr	r1, [pc, #4]	; (800c95c <_cleanup_r+0x8>)
 800c956:	f000 b8c1 	b.w	800cadc <_fwalk_reent>
 800c95a:	bf00      	nop
 800c95c:	0800c895 	.word	0x0800c895

0800c960 <__sfmoreglue>:
 800c960:	b570      	push	{r4, r5, r6, lr}
 800c962:	2268      	movs	r2, #104	; 0x68
 800c964:	1e4d      	subs	r5, r1, #1
 800c966:	4355      	muls	r5, r2
 800c968:	460e      	mov	r6, r1
 800c96a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c96e:	f000 f9b1 	bl	800ccd4 <_malloc_r>
 800c972:	4604      	mov	r4, r0
 800c974:	b140      	cbz	r0, 800c988 <__sfmoreglue+0x28>
 800c976:	2100      	movs	r1, #0
 800c978:	e9c0 1600 	strd	r1, r6, [r0]
 800c97c:	300c      	adds	r0, #12
 800c97e:	60a0      	str	r0, [r4, #8]
 800c980:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c984:	f7ff fcd2 	bl	800c32c <memset>
 800c988:	4620      	mov	r0, r4
 800c98a:	bd70      	pop	{r4, r5, r6, pc}

0800c98c <__sfp_lock_acquire>:
 800c98c:	4801      	ldr	r0, [pc, #4]	; (800c994 <__sfp_lock_acquire+0x8>)
 800c98e:	f000 b8c5 	b.w	800cb1c <__retarget_lock_acquire_recursive>
 800c992:	bf00      	nop
 800c994:	200032cd 	.word	0x200032cd

0800c998 <__sfp_lock_release>:
 800c998:	4801      	ldr	r0, [pc, #4]	; (800c9a0 <__sfp_lock_release+0x8>)
 800c99a:	f000 b8c0 	b.w	800cb1e <__retarget_lock_release_recursive>
 800c99e:	bf00      	nop
 800c9a0:	200032cd 	.word	0x200032cd

0800c9a4 <__sinit_lock_acquire>:
 800c9a4:	4801      	ldr	r0, [pc, #4]	; (800c9ac <__sinit_lock_acquire+0x8>)
 800c9a6:	f000 b8b9 	b.w	800cb1c <__retarget_lock_acquire_recursive>
 800c9aa:	bf00      	nop
 800c9ac:	200032ce 	.word	0x200032ce

0800c9b0 <__sinit_lock_release>:
 800c9b0:	4801      	ldr	r0, [pc, #4]	; (800c9b8 <__sinit_lock_release+0x8>)
 800c9b2:	f000 b8b4 	b.w	800cb1e <__retarget_lock_release_recursive>
 800c9b6:	bf00      	nop
 800c9b8:	200032ce 	.word	0x200032ce

0800c9bc <__sinit>:
 800c9bc:	b510      	push	{r4, lr}
 800c9be:	4604      	mov	r4, r0
 800c9c0:	f7ff fff0 	bl	800c9a4 <__sinit_lock_acquire>
 800c9c4:	69a3      	ldr	r3, [r4, #24]
 800c9c6:	b11b      	cbz	r3, 800c9d0 <__sinit+0x14>
 800c9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9cc:	f7ff bff0 	b.w	800c9b0 <__sinit_lock_release>
 800c9d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c9d4:	6523      	str	r3, [r4, #80]	; 0x50
 800c9d6:	4b13      	ldr	r3, [pc, #76]	; (800ca24 <__sinit+0x68>)
 800c9d8:	4a13      	ldr	r2, [pc, #76]	; (800ca28 <__sinit+0x6c>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800c9de:	42a3      	cmp	r3, r4
 800c9e0:	bf04      	itt	eq
 800c9e2:	2301      	moveq	r3, #1
 800c9e4:	61a3      	streq	r3, [r4, #24]
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f000 f820 	bl	800ca2c <__sfp>
 800c9ec:	6060      	str	r0, [r4, #4]
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f000 f81c 	bl	800ca2c <__sfp>
 800c9f4:	60a0      	str	r0, [r4, #8]
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	f000 f818 	bl	800ca2c <__sfp>
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	60e0      	str	r0, [r4, #12]
 800ca00:	2104      	movs	r1, #4
 800ca02:	6860      	ldr	r0, [r4, #4]
 800ca04:	f7ff ff82 	bl	800c90c <std>
 800ca08:	68a0      	ldr	r0, [r4, #8]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	2109      	movs	r1, #9
 800ca0e:	f7ff ff7d 	bl	800c90c <std>
 800ca12:	68e0      	ldr	r0, [r4, #12]
 800ca14:	2202      	movs	r2, #2
 800ca16:	2112      	movs	r1, #18
 800ca18:	f7ff ff78 	bl	800c90c <std>
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	61a3      	str	r3, [r4, #24]
 800ca20:	e7d2      	b.n	800c9c8 <__sinit+0xc>
 800ca22:	bf00      	nop
 800ca24:	0800e2a8 	.word	0x0800e2a8
 800ca28:	0800c955 	.word	0x0800c955

0800ca2c <__sfp>:
 800ca2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca2e:	4607      	mov	r7, r0
 800ca30:	f7ff ffac 	bl	800c98c <__sfp_lock_acquire>
 800ca34:	4b1e      	ldr	r3, [pc, #120]	; (800cab0 <__sfp+0x84>)
 800ca36:	681e      	ldr	r6, [r3, #0]
 800ca38:	69b3      	ldr	r3, [r6, #24]
 800ca3a:	b913      	cbnz	r3, 800ca42 <__sfp+0x16>
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	f7ff ffbd 	bl	800c9bc <__sinit>
 800ca42:	3648      	adds	r6, #72	; 0x48
 800ca44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ca48:	3b01      	subs	r3, #1
 800ca4a:	d503      	bpl.n	800ca54 <__sfp+0x28>
 800ca4c:	6833      	ldr	r3, [r6, #0]
 800ca4e:	b30b      	cbz	r3, 800ca94 <__sfp+0x68>
 800ca50:	6836      	ldr	r6, [r6, #0]
 800ca52:	e7f7      	b.n	800ca44 <__sfp+0x18>
 800ca54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ca58:	b9d5      	cbnz	r5, 800ca90 <__sfp+0x64>
 800ca5a:	4b16      	ldr	r3, [pc, #88]	; (800cab4 <__sfp+0x88>)
 800ca5c:	60e3      	str	r3, [r4, #12]
 800ca5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ca62:	6665      	str	r5, [r4, #100]	; 0x64
 800ca64:	f000 f859 	bl	800cb1a <__retarget_lock_init_recursive>
 800ca68:	f7ff ff96 	bl	800c998 <__sfp_lock_release>
 800ca6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ca70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ca74:	6025      	str	r5, [r4, #0]
 800ca76:	61a5      	str	r5, [r4, #24]
 800ca78:	2208      	movs	r2, #8
 800ca7a:	4629      	mov	r1, r5
 800ca7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ca80:	f7ff fc54 	bl	800c32c <memset>
 800ca84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ca88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca90:	3468      	adds	r4, #104	; 0x68
 800ca92:	e7d9      	b.n	800ca48 <__sfp+0x1c>
 800ca94:	2104      	movs	r1, #4
 800ca96:	4638      	mov	r0, r7
 800ca98:	f7ff ff62 	bl	800c960 <__sfmoreglue>
 800ca9c:	4604      	mov	r4, r0
 800ca9e:	6030      	str	r0, [r6, #0]
 800caa0:	2800      	cmp	r0, #0
 800caa2:	d1d5      	bne.n	800ca50 <__sfp+0x24>
 800caa4:	f7ff ff78 	bl	800c998 <__sfp_lock_release>
 800caa8:	230c      	movs	r3, #12
 800caaa:	603b      	str	r3, [r7, #0]
 800caac:	e7ee      	b.n	800ca8c <__sfp+0x60>
 800caae:	bf00      	nop
 800cab0:	0800e2a8 	.word	0x0800e2a8
 800cab4:	ffff0001 	.word	0xffff0001

0800cab8 <fiprintf>:
 800cab8:	b40e      	push	{r1, r2, r3}
 800caba:	b503      	push	{r0, r1, lr}
 800cabc:	4601      	mov	r1, r0
 800cabe:	ab03      	add	r3, sp, #12
 800cac0:	4805      	ldr	r0, [pc, #20]	; (800cad8 <fiprintf+0x20>)
 800cac2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cac6:	6800      	ldr	r0, [r0, #0]
 800cac8:	9301      	str	r3, [sp, #4]
 800caca:	f000 fafd 	bl	800d0c8 <_vfiprintf_r>
 800cace:	b002      	add	sp, #8
 800cad0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cad4:	b003      	add	sp, #12
 800cad6:	4770      	bx	lr
 800cad8:	20000010 	.word	0x20000010

0800cadc <_fwalk_reent>:
 800cadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cae0:	4606      	mov	r6, r0
 800cae2:	4688      	mov	r8, r1
 800cae4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cae8:	2700      	movs	r7, #0
 800caea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800caee:	f1b9 0901 	subs.w	r9, r9, #1
 800caf2:	d505      	bpl.n	800cb00 <_fwalk_reent+0x24>
 800caf4:	6824      	ldr	r4, [r4, #0]
 800caf6:	2c00      	cmp	r4, #0
 800caf8:	d1f7      	bne.n	800caea <_fwalk_reent+0xe>
 800cafa:	4638      	mov	r0, r7
 800cafc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb00:	89ab      	ldrh	r3, [r5, #12]
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d907      	bls.n	800cb16 <_fwalk_reent+0x3a>
 800cb06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	d003      	beq.n	800cb16 <_fwalk_reent+0x3a>
 800cb0e:	4629      	mov	r1, r5
 800cb10:	4630      	mov	r0, r6
 800cb12:	47c0      	blx	r8
 800cb14:	4307      	orrs	r7, r0
 800cb16:	3568      	adds	r5, #104	; 0x68
 800cb18:	e7e9      	b.n	800caee <_fwalk_reent+0x12>

0800cb1a <__retarget_lock_init_recursive>:
 800cb1a:	4770      	bx	lr

0800cb1c <__retarget_lock_acquire_recursive>:
 800cb1c:	4770      	bx	lr

0800cb1e <__retarget_lock_release_recursive>:
 800cb1e:	4770      	bx	lr

0800cb20 <__swhatbuf_r>:
 800cb20:	b570      	push	{r4, r5, r6, lr}
 800cb22:	460e      	mov	r6, r1
 800cb24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb28:	2900      	cmp	r1, #0
 800cb2a:	b096      	sub	sp, #88	; 0x58
 800cb2c:	4614      	mov	r4, r2
 800cb2e:	461d      	mov	r5, r3
 800cb30:	da08      	bge.n	800cb44 <__swhatbuf_r+0x24>
 800cb32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cb36:	2200      	movs	r2, #0
 800cb38:	602a      	str	r2, [r5, #0]
 800cb3a:	061a      	lsls	r2, r3, #24
 800cb3c:	d410      	bmi.n	800cb60 <__swhatbuf_r+0x40>
 800cb3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb42:	e00e      	b.n	800cb62 <__swhatbuf_r+0x42>
 800cb44:	466a      	mov	r2, sp
 800cb46:	f000 fe01 	bl	800d74c <_fstat_r>
 800cb4a:	2800      	cmp	r0, #0
 800cb4c:	dbf1      	blt.n	800cb32 <__swhatbuf_r+0x12>
 800cb4e:	9a01      	ldr	r2, [sp, #4]
 800cb50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb58:	425a      	negs	r2, r3
 800cb5a:	415a      	adcs	r2, r3
 800cb5c:	602a      	str	r2, [r5, #0]
 800cb5e:	e7ee      	b.n	800cb3e <__swhatbuf_r+0x1e>
 800cb60:	2340      	movs	r3, #64	; 0x40
 800cb62:	2000      	movs	r0, #0
 800cb64:	6023      	str	r3, [r4, #0]
 800cb66:	b016      	add	sp, #88	; 0x58
 800cb68:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cb6c <__smakebuf_r>:
 800cb6c:	898b      	ldrh	r3, [r1, #12]
 800cb6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb70:	079d      	lsls	r5, r3, #30
 800cb72:	4606      	mov	r6, r0
 800cb74:	460c      	mov	r4, r1
 800cb76:	d507      	bpl.n	800cb88 <__smakebuf_r+0x1c>
 800cb78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb7c:	6023      	str	r3, [r4, #0]
 800cb7e:	6123      	str	r3, [r4, #16]
 800cb80:	2301      	movs	r3, #1
 800cb82:	6163      	str	r3, [r4, #20]
 800cb84:	b002      	add	sp, #8
 800cb86:	bd70      	pop	{r4, r5, r6, pc}
 800cb88:	ab01      	add	r3, sp, #4
 800cb8a:	466a      	mov	r2, sp
 800cb8c:	f7ff ffc8 	bl	800cb20 <__swhatbuf_r>
 800cb90:	9900      	ldr	r1, [sp, #0]
 800cb92:	4605      	mov	r5, r0
 800cb94:	4630      	mov	r0, r6
 800cb96:	f000 f89d 	bl	800ccd4 <_malloc_r>
 800cb9a:	b948      	cbnz	r0, 800cbb0 <__smakebuf_r+0x44>
 800cb9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cba0:	059a      	lsls	r2, r3, #22
 800cba2:	d4ef      	bmi.n	800cb84 <__smakebuf_r+0x18>
 800cba4:	f023 0303 	bic.w	r3, r3, #3
 800cba8:	f043 0302 	orr.w	r3, r3, #2
 800cbac:	81a3      	strh	r3, [r4, #12]
 800cbae:	e7e3      	b.n	800cb78 <__smakebuf_r+0xc>
 800cbb0:	4b0d      	ldr	r3, [pc, #52]	; (800cbe8 <__smakebuf_r+0x7c>)
 800cbb2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cbb4:	89a3      	ldrh	r3, [r4, #12]
 800cbb6:	6020      	str	r0, [r4, #0]
 800cbb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbbc:	81a3      	strh	r3, [r4, #12]
 800cbbe:	9b00      	ldr	r3, [sp, #0]
 800cbc0:	6163      	str	r3, [r4, #20]
 800cbc2:	9b01      	ldr	r3, [sp, #4]
 800cbc4:	6120      	str	r0, [r4, #16]
 800cbc6:	b15b      	cbz	r3, 800cbe0 <__smakebuf_r+0x74>
 800cbc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbcc:	4630      	mov	r0, r6
 800cbce:	f000 fdcf 	bl	800d770 <_isatty_r>
 800cbd2:	b128      	cbz	r0, 800cbe0 <__smakebuf_r+0x74>
 800cbd4:	89a3      	ldrh	r3, [r4, #12]
 800cbd6:	f023 0303 	bic.w	r3, r3, #3
 800cbda:	f043 0301 	orr.w	r3, r3, #1
 800cbde:	81a3      	strh	r3, [r4, #12]
 800cbe0:	89a0      	ldrh	r0, [r4, #12]
 800cbe2:	4305      	orrs	r5, r0
 800cbe4:	81a5      	strh	r5, [r4, #12]
 800cbe6:	e7cd      	b.n	800cb84 <__smakebuf_r+0x18>
 800cbe8:	0800c955 	.word	0x0800c955

0800cbec <malloc>:
 800cbec:	4b02      	ldr	r3, [pc, #8]	; (800cbf8 <malloc+0xc>)
 800cbee:	4601      	mov	r1, r0
 800cbf0:	6818      	ldr	r0, [r3, #0]
 800cbf2:	f000 b86f 	b.w	800ccd4 <_malloc_r>
 800cbf6:	bf00      	nop
 800cbf8:	20000010 	.word	0x20000010

0800cbfc <_free_r>:
 800cbfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbfe:	2900      	cmp	r1, #0
 800cc00:	d044      	beq.n	800cc8c <_free_r+0x90>
 800cc02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc06:	9001      	str	r0, [sp, #4]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f1a1 0404 	sub.w	r4, r1, #4
 800cc0e:	bfb8      	it	lt
 800cc10:	18e4      	addlt	r4, r4, r3
 800cc12:	f000 fde9 	bl	800d7e8 <__malloc_lock>
 800cc16:	4a1e      	ldr	r2, [pc, #120]	; (800cc90 <_free_r+0x94>)
 800cc18:	9801      	ldr	r0, [sp, #4]
 800cc1a:	6813      	ldr	r3, [r2, #0]
 800cc1c:	b933      	cbnz	r3, 800cc2c <_free_r+0x30>
 800cc1e:	6063      	str	r3, [r4, #4]
 800cc20:	6014      	str	r4, [r2, #0]
 800cc22:	b003      	add	sp, #12
 800cc24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc28:	f000 bde4 	b.w	800d7f4 <__malloc_unlock>
 800cc2c:	42a3      	cmp	r3, r4
 800cc2e:	d908      	bls.n	800cc42 <_free_r+0x46>
 800cc30:	6825      	ldr	r5, [r4, #0]
 800cc32:	1961      	adds	r1, r4, r5
 800cc34:	428b      	cmp	r3, r1
 800cc36:	bf01      	itttt	eq
 800cc38:	6819      	ldreq	r1, [r3, #0]
 800cc3a:	685b      	ldreq	r3, [r3, #4]
 800cc3c:	1949      	addeq	r1, r1, r5
 800cc3e:	6021      	streq	r1, [r4, #0]
 800cc40:	e7ed      	b.n	800cc1e <_free_r+0x22>
 800cc42:	461a      	mov	r2, r3
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	b10b      	cbz	r3, 800cc4c <_free_r+0x50>
 800cc48:	42a3      	cmp	r3, r4
 800cc4a:	d9fa      	bls.n	800cc42 <_free_r+0x46>
 800cc4c:	6811      	ldr	r1, [r2, #0]
 800cc4e:	1855      	adds	r5, r2, r1
 800cc50:	42a5      	cmp	r5, r4
 800cc52:	d10b      	bne.n	800cc6c <_free_r+0x70>
 800cc54:	6824      	ldr	r4, [r4, #0]
 800cc56:	4421      	add	r1, r4
 800cc58:	1854      	adds	r4, r2, r1
 800cc5a:	42a3      	cmp	r3, r4
 800cc5c:	6011      	str	r1, [r2, #0]
 800cc5e:	d1e0      	bne.n	800cc22 <_free_r+0x26>
 800cc60:	681c      	ldr	r4, [r3, #0]
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	6053      	str	r3, [r2, #4]
 800cc66:	4421      	add	r1, r4
 800cc68:	6011      	str	r1, [r2, #0]
 800cc6a:	e7da      	b.n	800cc22 <_free_r+0x26>
 800cc6c:	d902      	bls.n	800cc74 <_free_r+0x78>
 800cc6e:	230c      	movs	r3, #12
 800cc70:	6003      	str	r3, [r0, #0]
 800cc72:	e7d6      	b.n	800cc22 <_free_r+0x26>
 800cc74:	6825      	ldr	r5, [r4, #0]
 800cc76:	1961      	adds	r1, r4, r5
 800cc78:	428b      	cmp	r3, r1
 800cc7a:	bf04      	itt	eq
 800cc7c:	6819      	ldreq	r1, [r3, #0]
 800cc7e:	685b      	ldreq	r3, [r3, #4]
 800cc80:	6063      	str	r3, [r4, #4]
 800cc82:	bf04      	itt	eq
 800cc84:	1949      	addeq	r1, r1, r5
 800cc86:	6021      	streq	r1, [r4, #0]
 800cc88:	6054      	str	r4, [r2, #4]
 800cc8a:	e7ca      	b.n	800cc22 <_free_r+0x26>
 800cc8c:	b003      	add	sp, #12
 800cc8e:	bd30      	pop	{r4, r5, pc}
 800cc90:	200032d0 	.word	0x200032d0

0800cc94 <sbrk_aligned>:
 800cc94:	b570      	push	{r4, r5, r6, lr}
 800cc96:	4e0e      	ldr	r6, [pc, #56]	; (800ccd0 <sbrk_aligned+0x3c>)
 800cc98:	460c      	mov	r4, r1
 800cc9a:	6831      	ldr	r1, [r6, #0]
 800cc9c:	4605      	mov	r5, r0
 800cc9e:	b911      	cbnz	r1, 800cca6 <sbrk_aligned+0x12>
 800cca0:	f000 fcd6 	bl	800d650 <_sbrk_r>
 800cca4:	6030      	str	r0, [r6, #0]
 800cca6:	4621      	mov	r1, r4
 800cca8:	4628      	mov	r0, r5
 800ccaa:	f000 fcd1 	bl	800d650 <_sbrk_r>
 800ccae:	1c43      	adds	r3, r0, #1
 800ccb0:	d00a      	beq.n	800ccc8 <sbrk_aligned+0x34>
 800ccb2:	1cc4      	adds	r4, r0, #3
 800ccb4:	f024 0403 	bic.w	r4, r4, #3
 800ccb8:	42a0      	cmp	r0, r4
 800ccba:	d007      	beq.n	800cccc <sbrk_aligned+0x38>
 800ccbc:	1a21      	subs	r1, r4, r0
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	f000 fcc6 	bl	800d650 <_sbrk_r>
 800ccc4:	3001      	adds	r0, #1
 800ccc6:	d101      	bne.n	800cccc <sbrk_aligned+0x38>
 800ccc8:	f04f 34ff 	mov.w	r4, #4294967295
 800cccc:	4620      	mov	r0, r4
 800ccce:	bd70      	pop	{r4, r5, r6, pc}
 800ccd0:	200032d4 	.word	0x200032d4

0800ccd4 <_malloc_r>:
 800ccd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd8:	1ccd      	adds	r5, r1, #3
 800ccda:	f025 0503 	bic.w	r5, r5, #3
 800ccde:	3508      	adds	r5, #8
 800cce0:	2d0c      	cmp	r5, #12
 800cce2:	bf38      	it	cc
 800cce4:	250c      	movcc	r5, #12
 800cce6:	2d00      	cmp	r5, #0
 800cce8:	4607      	mov	r7, r0
 800ccea:	db01      	blt.n	800ccf0 <_malloc_r+0x1c>
 800ccec:	42a9      	cmp	r1, r5
 800ccee:	d905      	bls.n	800ccfc <_malloc_r+0x28>
 800ccf0:	230c      	movs	r3, #12
 800ccf2:	603b      	str	r3, [r7, #0]
 800ccf4:	2600      	movs	r6, #0
 800ccf6:	4630      	mov	r0, r6
 800ccf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccfc:	4e2e      	ldr	r6, [pc, #184]	; (800cdb8 <_malloc_r+0xe4>)
 800ccfe:	f000 fd73 	bl	800d7e8 <__malloc_lock>
 800cd02:	6833      	ldr	r3, [r6, #0]
 800cd04:	461c      	mov	r4, r3
 800cd06:	bb34      	cbnz	r4, 800cd56 <_malloc_r+0x82>
 800cd08:	4629      	mov	r1, r5
 800cd0a:	4638      	mov	r0, r7
 800cd0c:	f7ff ffc2 	bl	800cc94 <sbrk_aligned>
 800cd10:	1c43      	adds	r3, r0, #1
 800cd12:	4604      	mov	r4, r0
 800cd14:	d14d      	bne.n	800cdb2 <_malloc_r+0xde>
 800cd16:	6834      	ldr	r4, [r6, #0]
 800cd18:	4626      	mov	r6, r4
 800cd1a:	2e00      	cmp	r6, #0
 800cd1c:	d140      	bne.n	800cda0 <_malloc_r+0xcc>
 800cd1e:	6823      	ldr	r3, [r4, #0]
 800cd20:	4631      	mov	r1, r6
 800cd22:	4638      	mov	r0, r7
 800cd24:	eb04 0803 	add.w	r8, r4, r3
 800cd28:	f000 fc92 	bl	800d650 <_sbrk_r>
 800cd2c:	4580      	cmp	r8, r0
 800cd2e:	d13a      	bne.n	800cda6 <_malloc_r+0xd2>
 800cd30:	6821      	ldr	r1, [r4, #0]
 800cd32:	3503      	adds	r5, #3
 800cd34:	1a6d      	subs	r5, r5, r1
 800cd36:	f025 0503 	bic.w	r5, r5, #3
 800cd3a:	3508      	adds	r5, #8
 800cd3c:	2d0c      	cmp	r5, #12
 800cd3e:	bf38      	it	cc
 800cd40:	250c      	movcc	r5, #12
 800cd42:	4629      	mov	r1, r5
 800cd44:	4638      	mov	r0, r7
 800cd46:	f7ff ffa5 	bl	800cc94 <sbrk_aligned>
 800cd4a:	3001      	adds	r0, #1
 800cd4c:	d02b      	beq.n	800cda6 <_malloc_r+0xd2>
 800cd4e:	6823      	ldr	r3, [r4, #0]
 800cd50:	442b      	add	r3, r5
 800cd52:	6023      	str	r3, [r4, #0]
 800cd54:	e00e      	b.n	800cd74 <_malloc_r+0xa0>
 800cd56:	6822      	ldr	r2, [r4, #0]
 800cd58:	1b52      	subs	r2, r2, r5
 800cd5a:	d41e      	bmi.n	800cd9a <_malloc_r+0xc6>
 800cd5c:	2a0b      	cmp	r2, #11
 800cd5e:	d916      	bls.n	800cd8e <_malloc_r+0xba>
 800cd60:	1961      	adds	r1, r4, r5
 800cd62:	42a3      	cmp	r3, r4
 800cd64:	6025      	str	r5, [r4, #0]
 800cd66:	bf18      	it	ne
 800cd68:	6059      	strne	r1, [r3, #4]
 800cd6a:	6863      	ldr	r3, [r4, #4]
 800cd6c:	bf08      	it	eq
 800cd6e:	6031      	streq	r1, [r6, #0]
 800cd70:	5162      	str	r2, [r4, r5]
 800cd72:	604b      	str	r3, [r1, #4]
 800cd74:	4638      	mov	r0, r7
 800cd76:	f104 060b 	add.w	r6, r4, #11
 800cd7a:	f000 fd3b 	bl	800d7f4 <__malloc_unlock>
 800cd7e:	f026 0607 	bic.w	r6, r6, #7
 800cd82:	1d23      	adds	r3, r4, #4
 800cd84:	1af2      	subs	r2, r6, r3
 800cd86:	d0b6      	beq.n	800ccf6 <_malloc_r+0x22>
 800cd88:	1b9b      	subs	r3, r3, r6
 800cd8a:	50a3      	str	r3, [r4, r2]
 800cd8c:	e7b3      	b.n	800ccf6 <_malloc_r+0x22>
 800cd8e:	6862      	ldr	r2, [r4, #4]
 800cd90:	42a3      	cmp	r3, r4
 800cd92:	bf0c      	ite	eq
 800cd94:	6032      	streq	r2, [r6, #0]
 800cd96:	605a      	strne	r2, [r3, #4]
 800cd98:	e7ec      	b.n	800cd74 <_malloc_r+0xa0>
 800cd9a:	4623      	mov	r3, r4
 800cd9c:	6864      	ldr	r4, [r4, #4]
 800cd9e:	e7b2      	b.n	800cd06 <_malloc_r+0x32>
 800cda0:	4634      	mov	r4, r6
 800cda2:	6876      	ldr	r6, [r6, #4]
 800cda4:	e7b9      	b.n	800cd1a <_malloc_r+0x46>
 800cda6:	230c      	movs	r3, #12
 800cda8:	603b      	str	r3, [r7, #0]
 800cdaa:	4638      	mov	r0, r7
 800cdac:	f000 fd22 	bl	800d7f4 <__malloc_unlock>
 800cdb0:	e7a1      	b.n	800ccf6 <_malloc_r+0x22>
 800cdb2:	6025      	str	r5, [r4, #0]
 800cdb4:	e7de      	b.n	800cd74 <_malloc_r+0xa0>
 800cdb6:	bf00      	nop
 800cdb8:	200032d0 	.word	0x200032d0

0800cdbc <__ssputs_r>:
 800cdbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdc0:	688e      	ldr	r6, [r1, #8]
 800cdc2:	429e      	cmp	r6, r3
 800cdc4:	4682      	mov	sl, r0
 800cdc6:	460c      	mov	r4, r1
 800cdc8:	4690      	mov	r8, r2
 800cdca:	461f      	mov	r7, r3
 800cdcc:	d838      	bhi.n	800ce40 <__ssputs_r+0x84>
 800cdce:	898a      	ldrh	r2, [r1, #12]
 800cdd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cdd4:	d032      	beq.n	800ce3c <__ssputs_r+0x80>
 800cdd6:	6825      	ldr	r5, [r4, #0]
 800cdd8:	6909      	ldr	r1, [r1, #16]
 800cdda:	eba5 0901 	sub.w	r9, r5, r1
 800cdde:	6965      	ldr	r5, [r4, #20]
 800cde0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cde4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cde8:	3301      	adds	r3, #1
 800cdea:	444b      	add	r3, r9
 800cdec:	106d      	asrs	r5, r5, #1
 800cdee:	429d      	cmp	r5, r3
 800cdf0:	bf38      	it	cc
 800cdf2:	461d      	movcc	r5, r3
 800cdf4:	0553      	lsls	r3, r2, #21
 800cdf6:	d531      	bpl.n	800ce5c <__ssputs_r+0xa0>
 800cdf8:	4629      	mov	r1, r5
 800cdfa:	f7ff ff6b 	bl	800ccd4 <_malloc_r>
 800cdfe:	4606      	mov	r6, r0
 800ce00:	b950      	cbnz	r0, 800ce18 <__ssputs_r+0x5c>
 800ce02:	230c      	movs	r3, #12
 800ce04:	f8ca 3000 	str.w	r3, [sl]
 800ce08:	89a3      	ldrh	r3, [r4, #12]
 800ce0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce0e:	81a3      	strh	r3, [r4, #12]
 800ce10:	f04f 30ff 	mov.w	r0, #4294967295
 800ce14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce18:	6921      	ldr	r1, [r4, #16]
 800ce1a:	464a      	mov	r2, r9
 800ce1c:	f7ff fa78 	bl	800c310 <memcpy>
 800ce20:	89a3      	ldrh	r3, [r4, #12]
 800ce22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce2a:	81a3      	strh	r3, [r4, #12]
 800ce2c:	6126      	str	r6, [r4, #16]
 800ce2e:	6165      	str	r5, [r4, #20]
 800ce30:	444e      	add	r6, r9
 800ce32:	eba5 0509 	sub.w	r5, r5, r9
 800ce36:	6026      	str	r6, [r4, #0]
 800ce38:	60a5      	str	r5, [r4, #8]
 800ce3a:	463e      	mov	r6, r7
 800ce3c:	42be      	cmp	r6, r7
 800ce3e:	d900      	bls.n	800ce42 <__ssputs_r+0x86>
 800ce40:	463e      	mov	r6, r7
 800ce42:	6820      	ldr	r0, [r4, #0]
 800ce44:	4632      	mov	r2, r6
 800ce46:	4641      	mov	r1, r8
 800ce48:	f000 fcb4 	bl	800d7b4 <memmove>
 800ce4c:	68a3      	ldr	r3, [r4, #8]
 800ce4e:	1b9b      	subs	r3, r3, r6
 800ce50:	60a3      	str	r3, [r4, #8]
 800ce52:	6823      	ldr	r3, [r4, #0]
 800ce54:	4433      	add	r3, r6
 800ce56:	6023      	str	r3, [r4, #0]
 800ce58:	2000      	movs	r0, #0
 800ce5a:	e7db      	b.n	800ce14 <__ssputs_r+0x58>
 800ce5c:	462a      	mov	r2, r5
 800ce5e:	f000 fccf 	bl	800d800 <_realloc_r>
 800ce62:	4606      	mov	r6, r0
 800ce64:	2800      	cmp	r0, #0
 800ce66:	d1e1      	bne.n	800ce2c <__ssputs_r+0x70>
 800ce68:	6921      	ldr	r1, [r4, #16]
 800ce6a:	4650      	mov	r0, sl
 800ce6c:	f7ff fec6 	bl	800cbfc <_free_r>
 800ce70:	e7c7      	b.n	800ce02 <__ssputs_r+0x46>
	...

0800ce74 <_svfiprintf_r>:
 800ce74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce78:	4698      	mov	r8, r3
 800ce7a:	898b      	ldrh	r3, [r1, #12]
 800ce7c:	061b      	lsls	r3, r3, #24
 800ce7e:	b09d      	sub	sp, #116	; 0x74
 800ce80:	4607      	mov	r7, r0
 800ce82:	460d      	mov	r5, r1
 800ce84:	4614      	mov	r4, r2
 800ce86:	d50e      	bpl.n	800cea6 <_svfiprintf_r+0x32>
 800ce88:	690b      	ldr	r3, [r1, #16]
 800ce8a:	b963      	cbnz	r3, 800cea6 <_svfiprintf_r+0x32>
 800ce8c:	2140      	movs	r1, #64	; 0x40
 800ce8e:	f7ff ff21 	bl	800ccd4 <_malloc_r>
 800ce92:	6028      	str	r0, [r5, #0]
 800ce94:	6128      	str	r0, [r5, #16]
 800ce96:	b920      	cbnz	r0, 800cea2 <_svfiprintf_r+0x2e>
 800ce98:	230c      	movs	r3, #12
 800ce9a:	603b      	str	r3, [r7, #0]
 800ce9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cea0:	e0d1      	b.n	800d046 <_svfiprintf_r+0x1d2>
 800cea2:	2340      	movs	r3, #64	; 0x40
 800cea4:	616b      	str	r3, [r5, #20]
 800cea6:	2300      	movs	r3, #0
 800cea8:	9309      	str	r3, [sp, #36]	; 0x24
 800ceaa:	2320      	movs	r3, #32
 800ceac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ceb0:	f8cd 800c 	str.w	r8, [sp, #12]
 800ceb4:	2330      	movs	r3, #48	; 0x30
 800ceb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d060 <_svfiprintf_r+0x1ec>
 800ceba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cebe:	f04f 0901 	mov.w	r9, #1
 800cec2:	4623      	mov	r3, r4
 800cec4:	469a      	mov	sl, r3
 800cec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ceca:	b10a      	cbz	r2, 800ced0 <_svfiprintf_r+0x5c>
 800cecc:	2a25      	cmp	r2, #37	; 0x25
 800cece:	d1f9      	bne.n	800cec4 <_svfiprintf_r+0x50>
 800ced0:	ebba 0b04 	subs.w	fp, sl, r4
 800ced4:	d00b      	beq.n	800ceee <_svfiprintf_r+0x7a>
 800ced6:	465b      	mov	r3, fp
 800ced8:	4622      	mov	r2, r4
 800ceda:	4629      	mov	r1, r5
 800cedc:	4638      	mov	r0, r7
 800cede:	f7ff ff6d 	bl	800cdbc <__ssputs_r>
 800cee2:	3001      	adds	r0, #1
 800cee4:	f000 80aa 	beq.w	800d03c <_svfiprintf_r+0x1c8>
 800cee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ceea:	445a      	add	r2, fp
 800ceec:	9209      	str	r2, [sp, #36]	; 0x24
 800ceee:	f89a 3000 	ldrb.w	r3, [sl]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	f000 80a2 	beq.w	800d03c <_svfiprintf_r+0x1c8>
 800cef8:	2300      	movs	r3, #0
 800cefa:	f04f 32ff 	mov.w	r2, #4294967295
 800cefe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf02:	f10a 0a01 	add.w	sl, sl, #1
 800cf06:	9304      	str	r3, [sp, #16]
 800cf08:	9307      	str	r3, [sp, #28]
 800cf0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf0e:	931a      	str	r3, [sp, #104]	; 0x68
 800cf10:	4654      	mov	r4, sl
 800cf12:	2205      	movs	r2, #5
 800cf14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf18:	4851      	ldr	r0, [pc, #324]	; (800d060 <_svfiprintf_r+0x1ec>)
 800cf1a:	f7f3 f961 	bl	80001e0 <memchr>
 800cf1e:	9a04      	ldr	r2, [sp, #16]
 800cf20:	b9d8      	cbnz	r0, 800cf5a <_svfiprintf_r+0xe6>
 800cf22:	06d0      	lsls	r0, r2, #27
 800cf24:	bf44      	itt	mi
 800cf26:	2320      	movmi	r3, #32
 800cf28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf2c:	0711      	lsls	r1, r2, #28
 800cf2e:	bf44      	itt	mi
 800cf30:	232b      	movmi	r3, #43	; 0x2b
 800cf32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf36:	f89a 3000 	ldrb.w	r3, [sl]
 800cf3a:	2b2a      	cmp	r3, #42	; 0x2a
 800cf3c:	d015      	beq.n	800cf6a <_svfiprintf_r+0xf6>
 800cf3e:	9a07      	ldr	r2, [sp, #28]
 800cf40:	4654      	mov	r4, sl
 800cf42:	2000      	movs	r0, #0
 800cf44:	f04f 0c0a 	mov.w	ip, #10
 800cf48:	4621      	mov	r1, r4
 800cf4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf4e:	3b30      	subs	r3, #48	; 0x30
 800cf50:	2b09      	cmp	r3, #9
 800cf52:	d94e      	bls.n	800cff2 <_svfiprintf_r+0x17e>
 800cf54:	b1b0      	cbz	r0, 800cf84 <_svfiprintf_r+0x110>
 800cf56:	9207      	str	r2, [sp, #28]
 800cf58:	e014      	b.n	800cf84 <_svfiprintf_r+0x110>
 800cf5a:	eba0 0308 	sub.w	r3, r0, r8
 800cf5e:	fa09 f303 	lsl.w	r3, r9, r3
 800cf62:	4313      	orrs	r3, r2
 800cf64:	9304      	str	r3, [sp, #16]
 800cf66:	46a2      	mov	sl, r4
 800cf68:	e7d2      	b.n	800cf10 <_svfiprintf_r+0x9c>
 800cf6a:	9b03      	ldr	r3, [sp, #12]
 800cf6c:	1d19      	adds	r1, r3, #4
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	9103      	str	r1, [sp, #12]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	bfbb      	ittet	lt
 800cf76:	425b      	neglt	r3, r3
 800cf78:	f042 0202 	orrlt.w	r2, r2, #2
 800cf7c:	9307      	strge	r3, [sp, #28]
 800cf7e:	9307      	strlt	r3, [sp, #28]
 800cf80:	bfb8      	it	lt
 800cf82:	9204      	strlt	r2, [sp, #16]
 800cf84:	7823      	ldrb	r3, [r4, #0]
 800cf86:	2b2e      	cmp	r3, #46	; 0x2e
 800cf88:	d10c      	bne.n	800cfa4 <_svfiprintf_r+0x130>
 800cf8a:	7863      	ldrb	r3, [r4, #1]
 800cf8c:	2b2a      	cmp	r3, #42	; 0x2a
 800cf8e:	d135      	bne.n	800cffc <_svfiprintf_r+0x188>
 800cf90:	9b03      	ldr	r3, [sp, #12]
 800cf92:	1d1a      	adds	r2, r3, #4
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	9203      	str	r2, [sp, #12]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	bfb8      	it	lt
 800cf9c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfa0:	3402      	adds	r4, #2
 800cfa2:	9305      	str	r3, [sp, #20]
 800cfa4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d070 <_svfiprintf_r+0x1fc>
 800cfa8:	7821      	ldrb	r1, [r4, #0]
 800cfaa:	2203      	movs	r2, #3
 800cfac:	4650      	mov	r0, sl
 800cfae:	f7f3 f917 	bl	80001e0 <memchr>
 800cfb2:	b140      	cbz	r0, 800cfc6 <_svfiprintf_r+0x152>
 800cfb4:	2340      	movs	r3, #64	; 0x40
 800cfb6:	eba0 000a 	sub.w	r0, r0, sl
 800cfba:	fa03 f000 	lsl.w	r0, r3, r0
 800cfbe:	9b04      	ldr	r3, [sp, #16]
 800cfc0:	4303      	orrs	r3, r0
 800cfc2:	3401      	adds	r4, #1
 800cfc4:	9304      	str	r3, [sp, #16]
 800cfc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfca:	4826      	ldr	r0, [pc, #152]	; (800d064 <_svfiprintf_r+0x1f0>)
 800cfcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfd0:	2206      	movs	r2, #6
 800cfd2:	f7f3 f905 	bl	80001e0 <memchr>
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	d038      	beq.n	800d04c <_svfiprintf_r+0x1d8>
 800cfda:	4b23      	ldr	r3, [pc, #140]	; (800d068 <_svfiprintf_r+0x1f4>)
 800cfdc:	bb1b      	cbnz	r3, 800d026 <_svfiprintf_r+0x1b2>
 800cfde:	9b03      	ldr	r3, [sp, #12]
 800cfe0:	3307      	adds	r3, #7
 800cfe2:	f023 0307 	bic.w	r3, r3, #7
 800cfe6:	3308      	adds	r3, #8
 800cfe8:	9303      	str	r3, [sp, #12]
 800cfea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfec:	4433      	add	r3, r6
 800cfee:	9309      	str	r3, [sp, #36]	; 0x24
 800cff0:	e767      	b.n	800cec2 <_svfiprintf_r+0x4e>
 800cff2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cff6:	460c      	mov	r4, r1
 800cff8:	2001      	movs	r0, #1
 800cffa:	e7a5      	b.n	800cf48 <_svfiprintf_r+0xd4>
 800cffc:	2300      	movs	r3, #0
 800cffe:	3401      	adds	r4, #1
 800d000:	9305      	str	r3, [sp, #20]
 800d002:	4619      	mov	r1, r3
 800d004:	f04f 0c0a 	mov.w	ip, #10
 800d008:	4620      	mov	r0, r4
 800d00a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d00e:	3a30      	subs	r2, #48	; 0x30
 800d010:	2a09      	cmp	r2, #9
 800d012:	d903      	bls.n	800d01c <_svfiprintf_r+0x1a8>
 800d014:	2b00      	cmp	r3, #0
 800d016:	d0c5      	beq.n	800cfa4 <_svfiprintf_r+0x130>
 800d018:	9105      	str	r1, [sp, #20]
 800d01a:	e7c3      	b.n	800cfa4 <_svfiprintf_r+0x130>
 800d01c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d020:	4604      	mov	r4, r0
 800d022:	2301      	movs	r3, #1
 800d024:	e7f0      	b.n	800d008 <_svfiprintf_r+0x194>
 800d026:	ab03      	add	r3, sp, #12
 800d028:	9300      	str	r3, [sp, #0]
 800d02a:	462a      	mov	r2, r5
 800d02c:	4b0f      	ldr	r3, [pc, #60]	; (800d06c <_svfiprintf_r+0x1f8>)
 800d02e:	a904      	add	r1, sp, #16
 800d030:	4638      	mov	r0, r7
 800d032:	f3af 8000 	nop.w
 800d036:	1c42      	adds	r2, r0, #1
 800d038:	4606      	mov	r6, r0
 800d03a:	d1d6      	bne.n	800cfea <_svfiprintf_r+0x176>
 800d03c:	89ab      	ldrh	r3, [r5, #12]
 800d03e:	065b      	lsls	r3, r3, #25
 800d040:	f53f af2c 	bmi.w	800ce9c <_svfiprintf_r+0x28>
 800d044:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d046:	b01d      	add	sp, #116	; 0x74
 800d048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d04c:	ab03      	add	r3, sp, #12
 800d04e:	9300      	str	r3, [sp, #0]
 800d050:	462a      	mov	r2, r5
 800d052:	4b06      	ldr	r3, [pc, #24]	; (800d06c <_svfiprintf_r+0x1f8>)
 800d054:	a904      	add	r1, sp, #16
 800d056:	4638      	mov	r0, r7
 800d058:	f000 f9d4 	bl	800d404 <_printf_i>
 800d05c:	e7eb      	b.n	800d036 <_svfiprintf_r+0x1c2>
 800d05e:	bf00      	nop
 800d060:	0800e3bc 	.word	0x0800e3bc
 800d064:	0800e3c6 	.word	0x0800e3c6
 800d068:	00000000 	.word	0x00000000
 800d06c:	0800cdbd 	.word	0x0800cdbd
 800d070:	0800e3c2 	.word	0x0800e3c2

0800d074 <__sfputc_r>:
 800d074:	6893      	ldr	r3, [r2, #8]
 800d076:	3b01      	subs	r3, #1
 800d078:	2b00      	cmp	r3, #0
 800d07a:	b410      	push	{r4}
 800d07c:	6093      	str	r3, [r2, #8]
 800d07e:	da08      	bge.n	800d092 <__sfputc_r+0x1e>
 800d080:	6994      	ldr	r4, [r2, #24]
 800d082:	42a3      	cmp	r3, r4
 800d084:	db01      	blt.n	800d08a <__sfputc_r+0x16>
 800d086:	290a      	cmp	r1, #10
 800d088:	d103      	bne.n	800d092 <__sfputc_r+0x1e>
 800d08a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d08e:	f7ff ba9d 	b.w	800c5cc <__swbuf_r>
 800d092:	6813      	ldr	r3, [r2, #0]
 800d094:	1c58      	adds	r0, r3, #1
 800d096:	6010      	str	r0, [r2, #0]
 800d098:	7019      	strb	r1, [r3, #0]
 800d09a:	4608      	mov	r0, r1
 800d09c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0a0:	4770      	bx	lr

0800d0a2 <__sfputs_r>:
 800d0a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a4:	4606      	mov	r6, r0
 800d0a6:	460f      	mov	r7, r1
 800d0a8:	4614      	mov	r4, r2
 800d0aa:	18d5      	adds	r5, r2, r3
 800d0ac:	42ac      	cmp	r4, r5
 800d0ae:	d101      	bne.n	800d0b4 <__sfputs_r+0x12>
 800d0b0:	2000      	movs	r0, #0
 800d0b2:	e007      	b.n	800d0c4 <__sfputs_r+0x22>
 800d0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0b8:	463a      	mov	r2, r7
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	f7ff ffda 	bl	800d074 <__sfputc_r>
 800d0c0:	1c43      	adds	r3, r0, #1
 800d0c2:	d1f3      	bne.n	800d0ac <__sfputs_r+0xa>
 800d0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d0c8 <_vfiprintf_r>:
 800d0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0cc:	460d      	mov	r5, r1
 800d0ce:	b09d      	sub	sp, #116	; 0x74
 800d0d0:	4614      	mov	r4, r2
 800d0d2:	4698      	mov	r8, r3
 800d0d4:	4606      	mov	r6, r0
 800d0d6:	b118      	cbz	r0, 800d0e0 <_vfiprintf_r+0x18>
 800d0d8:	6983      	ldr	r3, [r0, #24]
 800d0da:	b90b      	cbnz	r3, 800d0e0 <_vfiprintf_r+0x18>
 800d0dc:	f7ff fc6e 	bl	800c9bc <__sinit>
 800d0e0:	4b89      	ldr	r3, [pc, #548]	; (800d308 <_vfiprintf_r+0x240>)
 800d0e2:	429d      	cmp	r5, r3
 800d0e4:	d11b      	bne.n	800d11e <_vfiprintf_r+0x56>
 800d0e6:	6875      	ldr	r5, [r6, #4]
 800d0e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0ea:	07d9      	lsls	r1, r3, #31
 800d0ec:	d405      	bmi.n	800d0fa <_vfiprintf_r+0x32>
 800d0ee:	89ab      	ldrh	r3, [r5, #12]
 800d0f0:	059a      	lsls	r2, r3, #22
 800d0f2:	d402      	bmi.n	800d0fa <_vfiprintf_r+0x32>
 800d0f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0f6:	f7ff fd11 	bl	800cb1c <__retarget_lock_acquire_recursive>
 800d0fa:	89ab      	ldrh	r3, [r5, #12]
 800d0fc:	071b      	lsls	r3, r3, #28
 800d0fe:	d501      	bpl.n	800d104 <_vfiprintf_r+0x3c>
 800d100:	692b      	ldr	r3, [r5, #16]
 800d102:	b9eb      	cbnz	r3, 800d140 <_vfiprintf_r+0x78>
 800d104:	4629      	mov	r1, r5
 800d106:	4630      	mov	r0, r6
 800d108:	f7ff fab2 	bl	800c670 <__swsetup_r>
 800d10c:	b1c0      	cbz	r0, 800d140 <_vfiprintf_r+0x78>
 800d10e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d110:	07dc      	lsls	r4, r3, #31
 800d112:	d50e      	bpl.n	800d132 <_vfiprintf_r+0x6a>
 800d114:	f04f 30ff 	mov.w	r0, #4294967295
 800d118:	b01d      	add	sp, #116	; 0x74
 800d11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d11e:	4b7b      	ldr	r3, [pc, #492]	; (800d30c <_vfiprintf_r+0x244>)
 800d120:	429d      	cmp	r5, r3
 800d122:	d101      	bne.n	800d128 <_vfiprintf_r+0x60>
 800d124:	68b5      	ldr	r5, [r6, #8]
 800d126:	e7df      	b.n	800d0e8 <_vfiprintf_r+0x20>
 800d128:	4b79      	ldr	r3, [pc, #484]	; (800d310 <_vfiprintf_r+0x248>)
 800d12a:	429d      	cmp	r5, r3
 800d12c:	bf08      	it	eq
 800d12e:	68f5      	ldreq	r5, [r6, #12]
 800d130:	e7da      	b.n	800d0e8 <_vfiprintf_r+0x20>
 800d132:	89ab      	ldrh	r3, [r5, #12]
 800d134:	0598      	lsls	r0, r3, #22
 800d136:	d4ed      	bmi.n	800d114 <_vfiprintf_r+0x4c>
 800d138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d13a:	f7ff fcf0 	bl	800cb1e <__retarget_lock_release_recursive>
 800d13e:	e7e9      	b.n	800d114 <_vfiprintf_r+0x4c>
 800d140:	2300      	movs	r3, #0
 800d142:	9309      	str	r3, [sp, #36]	; 0x24
 800d144:	2320      	movs	r3, #32
 800d146:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d14a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d14e:	2330      	movs	r3, #48	; 0x30
 800d150:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d314 <_vfiprintf_r+0x24c>
 800d154:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d158:	f04f 0901 	mov.w	r9, #1
 800d15c:	4623      	mov	r3, r4
 800d15e:	469a      	mov	sl, r3
 800d160:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d164:	b10a      	cbz	r2, 800d16a <_vfiprintf_r+0xa2>
 800d166:	2a25      	cmp	r2, #37	; 0x25
 800d168:	d1f9      	bne.n	800d15e <_vfiprintf_r+0x96>
 800d16a:	ebba 0b04 	subs.w	fp, sl, r4
 800d16e:	d00b      	beq.n	800d188 <_vfiprintf_r+0xc0>
 800d170:	465b      	mov	r3, fp
 800d172:	4622      	mov	r2, r4
 800d174:	4629      	mov	r1, r5
 800d176:	4630      	mov	r0, r6
 800d178:	f7ff ff93 	bl	800d0a2 <__sfputs_r>
 800d17c:	3001      	adds	r0, #1
 800d17e:	f000 80aa 	beq.w	800d2d6 <_vfiprintf_r+0x20e>
 800d182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d184:	445a      	add	r2, fp
 800d186:	9209      	str	r2, [sp, #36]	; 0x24
 800d188:	f89a 3000 	ldrb.w	r3, [sl]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	f000 80a2 	beq.w	800d2d6 <_vfiprintf_r+0x20e>
 800d192:	2300      	movs	r3, #0
 800d194:	f04f 32ff 	mov.w	r2, #4294967295
 800d198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d19c:	f10a 0a01 	add.w	sl, sl, #1
 800d1a0:	9304      	str	r3, [sp, #16]
 800d1a2:	9307      	str	r3, [sp, #28]
 800d1a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1a8:	931a      	str	r3, [sp, #104]	; 0x68
 800d1aa:	4654      	mov	r4, sl
 800d1ac:	2205      	movs	r2, #5
 800d1ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1b2:	4858      	ldr	r0, [pc, #352]	; (800d314 <_vfiprintf_r+0x24c>)
 800d1b4:	f7f3 f814 	bl	80001e0 <memchr>
 800d1b8:	9a04      	ldr	r2, [sp, #16]
 800d1ba:	b9d8      	cbnz	r0, 800d1f4 <_vfiprintf_r+0x12c>
 800d1bc:	06d1      	lsls	r1, r2, #27
 800d1be:	bf44      	itt	mi
 800d1c0:	2320      	movmi	r3, #32
 800d1c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1c6:	0713      	lsls	r3, r2, #28
 800d1c8:	bf44      	itt	mi
 800d1ca:	232b      	movmi	r3, #43	; 0x2b
 800d1cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1d0:	f89a 3000 	ldrb.w	r3, [sl]
 800d1d4:	2b2a      	cmp	r3, #42	; 0x2a
 800d1d6:	d015      	beq.n	800d204 <_vfiprintf_r+0x13c>
 800d1d8:	9a07      	ldr	r2, [sp, #28]
 800d1da:	4654      	mov	r4, sl
 800d1dc:	2000      	movs	r0, #0
 800d1de:	f04f 0c0a 	mov.w	ip, #10
 800d1e2:	4621      	mov	r1, r4
 800d1e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1e8:	3b30      	subs	r3, #48	; 0x30
 800d1ea:	2b09      	cmp	r3, #9
 800d1ec:	d94e      	bls.n	800d28c <_vfiprintf_r+0x1c4>
 800d1ee:	b1b0      	cbz	r0, 800d21e <_vfiprintf_r+0x156>
 800d1f0:	9207      	str	r2, [sp, #28]
 800d1f2:	e014      	b.n	800d21e <_vfiprintf_r+0x156>
 800d1f4:	eba0 0308 	sub.w	r3, r0, r8
 800d1f8:	fa09 f303 	lsl.w	r3, r9, r3
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	9304      	str	r3, [sp, #16]
 800d200:	46a2      	mov	sl, r4
 800d202:	e7d2      	b.n	800d1aa <_vfiprintf_r+0xe2>
 800d204:	9b03      	ldr	r3, [sp, #12]
 800d206:	1d19      	adds	r1, r3, #4
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	9103      	str	r1, [sp, #12]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	bfbb      	ittet	lt
 800d210:	425b      	neglt	r3, r3
 800d212:	f042 0202 	orrlt.w	r2, r2, #2
 800d216:	9307      	strge	r3, [sp, #28]
 800d218:	9307      	strlt	r3, [sp, #28]
 800d21a:	bfb8      	it	lt
 800d21c:	9204      	strlt	r2, [sp, #16]
 800d21e:	7823      	ldrb	r3, [r4, #0]
 800d220:	2b2e      	cmp	r3, #46	; 0x2e
 800d222:	d10c      	bne.n	800d23e <_vfiprintf_r+0x176>
 800d224:	7863      	ldrb	r3, [r4, #1]
 800d226:	2b2a      	cmp	r3, #42	; 0x2a
 800d228:	d135      	bne.n	800d296 <_vfiprintf_r+0x1ce>
 800d22a:	9b03      	ldr	r3, [sp, #12]
 800d22c:	1d1a      	adds	r2, r3, #4
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	9203      	str	r2, [sp, #12]
 800d232:	2b00      	cmp	r3, #0
 800d234:	bfb8      	it	lt
 800d236:	f04f 33ff 	movlt.w	r3, #4294967295
 800d23a:	3402      	adds	r4, #2
 800d23c:	9305      	str	r3, [sp, #20]
 800d23e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d324 <_vfiprintf_r+0x25c>
 800d242:	7821      	ldrb	r1, [r4, #0]
 800d244:	2203      	movs	r2, #3
 800d246:	4650      	mov	r0, sl
 800d248:	f7f2 ffca 	bl	80001e0 <memchr>
 800d24c:	b140      	cbz	r0, 800d260 <_vfiprintf_r+0x198>
 800d24e:	2340      	movs	r3, #64	; 0x40
 800d250:	eba0 000a 	sub.w	r0, r0, sl
 800d254:	fa03 f000 	lsl.w	r0, r3, r0
 800d258:	9b04      	ldr	r3, [sp, #16]
 800d25a:	4303      	orrs	r3, r0
 800d25c:	3401      	adds	r4, #1
 800d25e:	9304      	str	r3, [sp, #16]
 800d260:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d264:	482c      	ldr	r0, [pc, #176]	; (800d318 <_vfiprintf_r+0x250>)
 800d266:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d26a:	2206      	movs	r2, #6
 800d26c:	f7f2 ffb8 	bl	80001e0 <memchr>
 800d270:	2800      	cmp	r0, #0
 800d272:	d03f      	beq.n	800d2f4 <_vfiprintf_r+0x22c>
 800d274:	4b29      	ldr	r3, [pc, #164]	; (800d31c <_vfiprintf_r+0x254>)
 800d276:	bb1b      	cbnz	r3, 800d2c0 <_vfiprintf_r+0x1f8>
 800d278:	9b03      	ldr	r3, [sp, #12]
 800d27a:	3307      	adds	r3, #7
 800d27c:	f023 0307 	bic.w	r3, r3, #7
 800d280:	3308      	adds	r3, #8
 800d282:	9303      	str	r3, [sp, #12]
 800d284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d286:	443b      	add	r3, r7
 800d288:	9309      	str	r3, [sp, #36]	; 0x24
 800d28a:	e767      	b.n	800d15c <_vfiprintf_r+0x94>
 800d28c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d290:	460c      	mov	r4, r1
 800d292:	2001      	movs	r0, #1
 800d294:	e7a5      	b.n	800d1e2 <_vfiprintf_r+0x11a>
 800d296:	2300      	movs	r3, #0
 800d298:	3401      	adds	r4, #1
 800d29a:	9305      	str	r3, [sp, #20]
 800d29c:	4619      	mov	r1, r3
 800d29e:	f04f 0c0a 	mov.w	ip, #10
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2a8:	3a30      	subs	r2, #48	; 0x30
 800d2aa:	2a09      	cmp	r2, #9
 800d2ac:	d903      	bls.n	800d2b6 <_vfiprintf_r+0x1ee>
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d0c5      	beq.n	800d23e <_vfiprintf_r+0x176>
 800d2b2:	9105      	str	r1, [sp, #20]
 800d2b4:	e7c3      	b.n	800d23e <_vfiprintf_r+0x176>
 800d2b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e7f0      	b.n	800d2a2 <_vfiprintf_r+0x1da>
 800d2c0:	ab03      	add	r3, sp, #12
 800d2c2:	9300      	str	r3, [sp, #0]
 800d2c4:	462a      	mov	r2, r5
 800d2c6:	4b16      	ldr	r3, [pc, #88]	; (800d320 <_vfiprintf_r+0x258>)
 800d2c8:	a904      	add	r1, sp, #16
 800d2ca:	4630      	mov	r0, r6
 800d2cc:	f3af 8000 	nop.w
 800d2d0:	4607      	mov	r7, r0
 800d2d2:	1c78      	adds	r0, r7, #1
 800d2d4:	d1d6      	bne.n	800d284 <_vfiprintf_r+0x1bc>
 800d2d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2d8:	07d9      	lsls	r1, r3, #31
 800d2da:	d405      	bmi.n	800d2e8 <_vfiprintf_r+0x220>
 800d2dc:	89ab      	ldrh	r3, [r5, #12]
 800d2de:	059a      	lsls	r2, r3, #22
 800d2e0:	d402      	bmi.n	800d2e8 <_vfiprintf_r+0x220>
 800d2e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2e4:	f7ff fc1b 	bl	800cb1e <__retarget_lock_release_recursive>
 800d2e8:	89ab      	ldrh	r3, [r5, #12]
 800d2ea:	065b      	lsls	r3, r3, #25
 800d2ec:	f53f af12 	bmi.w	800d114 <_vfiprintf_r+0x4c>
 800d2f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2f2:	e711      	b.n	800d118 <_vfiprintf_r+0x50>
 800d2f4:	ab03      	add	r3, sp, #12
 800d2f6:	9300      	str	r3, [sp, #0]
 800d2f8:	462a      	mov	r2, r5
 800d2fa:	4b09      	ldr	r3, [pc, #36]	; (800d320 <_vfiprintf_r+0x258>)
 800d2fc:	a904      	add	r1, sp, #16
 800d2fe:	4630      	mov	r0, r6
 800d300:	f000 f880 	bl	800d404 <_printf_i>
 800d304:	e7e4      	b.n	800d2d0 <_vfiprintf_r+0x208>
 800d306:	bf00      	nop
 800d308:	0800e37c 	.word	0x0800e37c
 800d30c:	0800e39c 	.word	0x0800e39c
 800d310:	0800e35c 	.word	0x0800e35c
 800d314:	0800e3bc 	.word	0x0800e3bc
 800d318:	0800e3c6 	.word	0x0800e3c6
 800d31c:	00000000 	.word	0x00000000
 800d320:	0800d0a3 	.word	0x0800d0a3
 800d324:	0800e3c2 	.word	0x0800e3c2

0800d328 <_printf_common>:
 800d328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d32c:	4616      	mov	r6, r2
 800d32e:	4699      	mov	r9, r3
 800d330:	688a      	ldr	r2, [r1, #8]
 800d332:	690b      	ldr	r3, [r1, #16]
 800d334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d338:	4293      	cmp	r3, r2
 800d33a:	bfb8      	it	lt
 800d33c:	4613      	movlt	r3, r2
 800d33e:	6033      	str	r3, [r6, #0]
 800d340:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d344:	4607      	mov	r7, r0
 800d346:	460c      	mov	r4, r1
 800d348:	b10a      	cbz	r2, 800d34e <_printf_common+0x26>
 800d34a:	3301      	adds	r3, #1
 800d34c:	6033      	str	r3, [r6, #0]
 800d34e:	6823      	ldr	r3, [r4, #0]
 800d350:	0699      	lsls	r1, r3, #26
 800d352:	bf42      	ittt	mi
 800d354:	6833      	ldrmi	r3, [r6, #0]
 800d356:	3302      	addmi	r3, #2
 800d358:	6033      	strmi	r3, [r6, #0]
 800d35a:	6825      	ldr	r5, [r4, #0]
 800d35c:	f015 0506 	ands.w	r5, r5, #6
 800d360:	d106      	bne.n	800d370 <_printf_common+0x48>
 800d362:	f104 0a19 	add.w	sl, r4, #25
 800d366:	68e3      	ldr	r3, [r4, #12]
 800d368:	6832      	ldr	r2, [r6, #0]
 800d36a:	1a9b      	subs	r3, r3, r2
 800d36c:	42ab      	cmp	r3, r5
 800d36e:	dc26      	bgt.n	800d3be <_printf_common+0x96>
 800d370:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d374:	1e13      	subs	r3, r2, #0
 800d376:	6822      	ldr	r2, [r4, #0]
 800d378:	bf18      	it	ne
 800d37a:	2301      	movne	r3, #1
 800d37c:	0692      	lsls	r2, r2, #26
 800d37e:	d42b      	bmi.n	800d3d8 <_printf_common+0xb0>
 800d380:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d384:	4649      	mov	r1, r9
 800d386:	4638      	mov	r0, r7
 800d388:	47c0      	blx	r8
 800d38a:	3001      	adds	r0, #1
 800d38c:	d01e      	beq.n	800d3cc <_printf_common+0xa4>
 800d38e:	6823      	ldr	r3, [r4, #0]
 800d390:	68e5      	ldr	r5, [r4, #12]
 800d392:	6832      	ldr	r2, [r6, #0]
 800d394:	f003 0306 	and.w	r3, r3, #6
 800d398:	2b04      	cmp	r3, #4
 800d39a:	bf08      	it	eq
 800d39c:	1aad      	subeq	r5, r5, r2
 800d39e:	68a3      	ldr	r3, [r4, #8]
 800d3a0:	6922      	ldr	r2, [r4, #16]
 800d3a2:	bf0c      	ite	eq
 800d3a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3a8:	2500      	movne	r5, #0
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	bfc4      	itt	gt
 800d3ae:	1a9b      	subgt	r3, r3, r2
 800d3b0:	18ed      	addgt	r5, r5, r3
 800d3b2:	2600      	movs	r6, #0
 800d3b4:	341a      	adds	r4, #26
 800d3b6:	42b5      	cmp	r5, r6
 800d3b8:	d11a      	bne.n	800d3f0 <_printf_common+0xc8>
 800d3ba:	2000      	movs	r0, #0
 800d3bc:	e008      	b.n	800d3d0 <_printf_common+0xa8>
 800d3be:	2301      	movs	r3, #1
 800d3c0:	4652      	mov	r2, sl
 800d3c2:	4649      	mov	r1, r9
 800d3c4:	4638      	mov	r0, r7
 800d3c6:	47c0      	blx	r8
 800d3c8:	3001      	adds	r0, #1
 800d3ca:	d103      	bne.n	800d3d4 <_printf_common+0xac>
 800d3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3d4:	3501      	adds	r5, #1
 800d3d6:	e7c6      	b.n	800d366 <_printf_common+0x3e>
 800d3d8:	18e1      	adds	r1, r4, r3
 800d3da:	1c5a      	adds	r2, r3, #1
 800d3dc:	2030      	movs	r0, #48	; 0x30
 800d3de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d3e2:	4422      	add	r2, r4
 800d3e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d3e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d3ec:	3302      	adds	r3, #2
 800d3ee:	e7c7      	b.n	800d380 <_printf_common+0x58>
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	4622      	mov	r2, r4
 800d3f4:	4649      	mov	r1, r9
 800d3f6:	4638      	mov	r0, r7
 800d3f8:	47c0      	blx	r8
 800d3fa:	3001      	adds	r0, #1
 800d3fc:	d0e6      	beq.n	800d3cc <_printf_common+0xa4>
 800d3fe:	3601      	adds	r6, #1
 800d400:	e7d9      	b.n	800d3b6 <_printf_common+0x8e>
	...

0800d404 <_printf_i>:
 800d404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d408:	7e0f      	ldrb	r7, [r1, #24]
 800d40a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d40c:	2f78      	cmp	r7, #120	; 0x78
 800d40e:	4691      	mov	r9, r2
 800d410:	4680      	mov	r8, r0
 800d412:	460c      	mov	r4, r1
 800d414:	469a      	mov	sl, r3
 800d416:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d41a:	d807      	bhi.n	800d42c <_printf_i+0x28>
 800d41c:	2f62      	cmp	r7, #98	; 0x62
 800d41e:	d80a      	bhi.n	800d436 <_printf_i+0x32>
 800d420:	2f00      	cmp	r7, #0
 800d422:	f000 80d8 	beq.w	800d5d6 <_printf_i+0x1d2>
 800d426:	2f58      	cmp	r7, #88	; 0x58
 800d428:	f000 80a3 	beq.w	800d572 <_printf_i+0x16e>
 800d42c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d430:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d434:	e03a      	b.n	800d4ac <_printf_i+0xa8>
 800d436:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d43a:	2b15      	cmp	r3, #21
 800d43c:	d8f6      	bhi.n	800d42c <_printf_i+0x28>
 800d43e:	a101      	add	r1, pc, #4	; (adr r1, 800d444 <_printf_i+0x40>)
 800d440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d444:	0800d49d 	.word	0x0800d49d
 800d448:	0800d4b1 	.word	0x0800d4b1
 800d44c:	0800d42d 	.word	0x0800d42d
 800d450:	0800d42d 	.word	0x0800d42d
 800d454:	0800d42d 	.word	0x0800d42d
 800d458:	0800d42d 	.word	0x0800d42d
 800d45c:	0800d4b1 	.word	0x0800d4b1
 800d460:	0800d42d 	.word	0x0800d42d
 800d464:	0800d42d 	.word	0x0800d42d
 800d468:	0800d42d 	.word	0x0800d42d
 800d46c:	0800d42d 	.word	0x0800d42d
 800d470:	0800d5bd 	.word	0x0800d5bd
 800d474:	0800d4e1 	.word	0x0800d4e1
 800d478:	0800d59f 	.word	0x0800d59f
 800d47c:	0800d42d 	.word	0x0800d42d
 800d480:	0800d42d 	.word	0x0800d42d
 800d484:	0800d5df 	.word	0x0800d5df
 800d488:	0800d42d 	.word	0x0800d42d
 800d48c:	0800d4e1 	.word	0x0800d4e1
 800d490:	0800d42d 	.word	0x0800d42d
 800d494:	0800d42d 	.word	0x0800d42d
 800d498:	0800d5a7 	.word	0x0800d5a7
 800d49c:	682b      	ldr	r3, [r5, #0]
 800d49e:	1d1a      	adds	r2, r3, #4
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	602a      	str	r2, [r5, #0]
 800d4a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	e0a3      	b.n	800d5f8 <_printf_i+0x1f4>
 800d4b0:	6820      	ldr	r0, [r4, #0]
 800d4b2:	6829      	ldr	r1, [r5, #0]
 800d4b4:	0606      	lsls	r6, r0, #24
 800d4b6:	f101 0304 	add.w	r3, r1, #4
 800d4ba:	d50a      	bpl.n	800d4d2 <_printf_i+0xce>
 800d4bc:	680e      	ldr	r6, [r1, #0]
 800d4be:	602b      	str	r3, [r5, #0]
 800d4c0:	2e00      	cmp	r6, #0
 800d4c2:	da03      	bge.n	800d4cc <_printf_i+0xc8>
 800d4c4:	232d      	movs	r3, #45	; 0x2d
 800d4c6:	4276      	negs	r6, r6
 800d4c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4cc:	485e      	ldr	r0, [pc, #376]	; (800d648 <_printf_i+0x244>)
 800d4ce:	230a      	movs	r3, #10
 800d4d0:	e019      	b.n	800d506 <_printf_i+0x102>
 800d4d2:	680e      	ldr	r6, [r1, #0]
 800d4d4:	602b      	str	r3, [r5, #0]
 800d4d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d4da:	bf18      	it	ne
 800d4dc:	b236      	sxthne	r6, r6
 800d4de:	e7ef      	b.n	800d4c0 <_printf_i+0xbc>
 800d4e0:	682b      	ldr	r3, [r5, #0]
 800d4e2:	6820      	ldr	r0, [r4, #0]
 800d4e4:	1d19      	adds	r1, r3, #4
 800d4e6:	6029      	str	r1, [r5, #0]
 800d4e8:	0601      	lsls	r1, r0, #24
 800d4ea:	d501      	bpl.n	800d4f0 <_printf_i+0xec>
 800d4ec:	681e      	ldr	r6, [r3, #0]
 800d4ee:	e002      	b.n	800d4f6 <_printf_i+0xf2>
 800d4f0:	0646      	lsls	r6, r0, #25
 800d4f2:	d5fb      	bpl.n	800d4ec <_printf_i+0xe8>
 800d4f4:	881e      	ldrh	r6, [r3, #0]
 800d4f6:	4854      	ldr	r0, [pc, #336]	; (800d648 <_printf_i+0x244>)
 800d4f8:	2f6f      	cmp	r7, #111	; 0x6f
 800d4fa:	bf0c      	ite	eq
 800d4fc:	2308      	moveq	r3, #8
 800d4fe:	230a      	movne	r3, #10
 800d500:	2100      	movs	r1, #0
 800d502:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d506:	6865      	ldr	r5, [r4, #4]
 800d508:	60a5      	str	r5, [r4, #8]
 800d50a:	2d00      	cmp	r5, #0
 800d50c:	bfa2      	ittt	ge
 800d50e:	6821      	ldrge	r1, [r4, #0]
 800d510:	f021 0104 	bicge.w	r1, r1, #4
 800d514:	6021      	strge	r1, [r4, #0]
 800d516:	b90e      	cbnz	r6, 800d51c <_printf_i+0x118>
 800d518:	2d00      	cmp	r5, #0
 800d51a:	d04d      	beq.n	800d5b8 <_printf_i+0x1b4>
 800d51c:	4615      	mov	r5, r2
 800d51e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d522:	fb03 6711 	mls	r7, r3, r1, r6
 800d526:	5dc7      	ldrb	r7, [r0, r7]
 800d528:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d52c:	4637      	mov	r7, r6
 800d52e:	42bb      	cmp	r3, r7
 800d530:	460e      	mov	r6, r1
 800d532:	d9f4      	bls.n	800d51e <_printf_i+0x11a>
 800d534:	2b08      	cmp	r3, #8
 800d536:	d10b      	bne.n	800d550 <_printf_i+0x14c>
 800d538:	6823      	ldr	r3, [r4, #0]
 800d53a:	07de      	lsls	r6, r3, #31
 800d53c:	d508      	bpl.n	800d550 <_printf_i+0x14c>
 800d53e:	6923      	ldr	r3, [r4, #16]
 800d540:	6861      	ldr	r1, [r4, #4]
 800d542:	4299      	cmp	r1, r3
 800d544:	bfde      	ittt	le
 800d546:	2330      	movle	r3, #48	; 0x30
 800d548:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d54c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d550:	1b52      	subs	r2, r2, r5
 800d552:	6122      	str	r2, [r4, #16]
 800d554:	f8cd a000 	str.w	sl, [sp]
 800d558:	464b      	mov	r3, r9
 800d55a:	aa03      	add	r2, sp, #12
 800d55c:	4621      	mov	r1, r4
 800d55e:	4640      	mov	r0, r8
 800d560:	f7ff fee2 	bl	800d328 <_printf_common>
 800d564:	3001      	adds	r0, #1
 800d566:	d14c      	bne.n	800d602 <_printf_i+0x1fe>
 800d568:	f04f 30ff 	mov.w	r0, #4294967295
 800d56c:	b004      	add	sp, #16
 800d56e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d572:	4835      	ldr	r0, [pc, #212]	; (800d648 <_printf_i+0x244>)
 800d574:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d578:	6829      	ldr	r1, [r5, #0]
 800d57a:	6823      	ldr	r3, [r4, #0]
 800d57c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d580:	6029      	str	r1, [r5, #0]
 800d582:	061d      	lsls	r5, r3, #24
 800d584:	d514      	bpl.n	800d5b0 <_printf_i+0x1ac>
 800d586:	07df      	lsls	r7, r3, #31
 800d588:	bf44      	itt	mi
 800d58a:	f043 0320 	orrmi.w	r3, r3, #32
 800d58e:	6023      	strmi	r3, [r4, #0]
 800d590:	b91e      	cbnz	r6, 800d59a <_printf_i+0x196>
 800d592:	6823      	ldr	r3, [r4, #0]
 800d594:	f023 0320 	bic.w	r3, r3, #32
 800d598:	6023      	str	r3, [r4, #0]
 800d59a:	2310      	movs	r3, #16
 800d59c:	e7b0      	b.n	800d500 <_printf_i+0xfc>
 800d59e:	6823      	ldr	r3, [r4, #0]
 800d5a0:	f043 0320 	orr.w	r3, r3, #32
 800d5a4:	6023      	str	r3, [r4, #0]
 800d5a6:	2378      	movs	r3, #120	; 0x78
 800d5a8:	4828      	ldr	r0, [pc, #160]	; (800d64c <_printf_i+0x248>)
 800d5aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d5ae:	e7e3      	b.n	800d578 <_printf_i+0x174>
 800d5b0:	0659      	lsls	r1, r3, #25
 800d5b2:	bf48      	it	mi
 800d5b4:	b2b6      	uxthmi	r6, r6
 800d5b6:	e7e6      	b.n	800d586 <_printf_i+0x182>
 800d5b8:	4615      	mov	r5, r2
 800d5ba:	e7bb      	b.n	800d534 <_printf_i+0x130>
 800d5bc:	682b      	ldr	r3, [r5, #0]
 800d5be:	6826      	ldr	r6, [r4, #0]
 800d5c0:	6961      	ldr	r1, [r4, #20]
 800d5c2:	1d18      	adds	r0, r3, #4
 800d5c4:	6028      	str	r0, [r5, #0]
 800d5c6:	0635      	lsls	r5, r6, #24
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	d501      	bpl.n	800d5d0 <_printf_i+0x1cc>
 800d5cc:	6019      	str	r1, [r3, #0]
 800d5ce:	e002      	b.n	800d5d6 <_printf_i+0x1d2>
 800d5d0:	0670      	lsls	r0, r6, #25
 800d5d2:	d5fb      	bpl.n	800d5cc <_printf_i+0x1c8>
 800d5d4:	8019      	strh	r1, [r3, #0]
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	6123      	str	r3, [r4, #16]
 800d5da:	4615      	mov	r5, r2
 800d5dc:	e7ba      	b.n	800d554 <_printf_i+0x150>
 800d5de:	682b      	ldr	r3, [r5, #0]
 800d5e0:	1d1a      	adds	r2, r3, #4
 800d5e2:	602a      	str	r2, [r5, #0]
 800d5e4:	681d      	ldr	r5, [r3, #0]
 800d5e6:	6862      	ldr	r2, [r4, #4]
 800d5e8:	2100      	movs	r1, #0
 800d5ea:	4628      	mov	r0, r5
 800d5ec:	f7f2 fdf8 	bl	80001e0 <memchr>
 800d5f0:	b108      	cbz	r0, 800d5f6 <_printf_i+0x1f2>
 800d5f2:	1b40      	subs	r0, r0, r5
 800d5f4:	6060      	str	r0, [r4, #4]
 800d5f6:	6863      	ldr	r3, [r4, #4]
 800d5f8:	6123      	str	r3, [r4, #16]
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d600:	e7a8      	b.n	800d554 <_printf_i+0x150>
 800d602:	6923      	ldr	r3, [r4, #16]
 800d604:	462a      	mov	r2, r5
 800d606:	4649      	mov	r1, r9
 800d608:	4640      	mov	r0, r8
 800d60a:	47d0      	blx	sl
 800d60c:	3001      	adds	r0, #1
 800d60e:	d0ab      	beq.n	800d568 <_printf_i+0x164>
 800d610:	6823      	ldr	r3, [r4, #0]
 800d612:	079b      	lsls	r3, r3, #30
 800d614:	d413      	bmi.n	800d63e <_printf_i+0x23a>
 800d616:	68e0      	ldr	r0, [r4, #12]
 800d618:	9b03      	ldr	r3, [sp, #12]
 800d61a:	4298      	cmp	r0, r3
 800d61c:	bfb8      	it	lt
 800d61e:	4618      	movlt	r0, r3
 800d620:	e7a4      	b.n	800d56c <_printf_i+0x168>
 800d622:	2301      	movs	r3, #1
 800d624:	4632      	mov	r2, r6
 800d626:	4649      	mov	r1, r9
 800d628:	4640      	mov	r0, r8
 800d62a:	47d0      	blx	sl
 800d62c:	3001      	adds	r0, #1
 800d62e:	d09b      	beq.n	800d568 <_printf_i+0x164>
 800d630:	3501      	adds	r5, #1
 800d632:	68e3      	ldr	r3, [r4, #12]
 800d634:	9903      	ldr	r1, [sp, #12]
 800d636:	1a5b      	subs	r3, r3, r1
 800d638:	42ab      	cmp	r3, r5
 800d63a:	dcf2      	bgt.n	800d622 <_printf_i+0x21e>
 800d63c:	e7eb      	b.n	800d616 <_printf_i+0x212>
 800d63e:	2500      	movs	r5, #0
 800d640:	f104 0619 	add.w	r6, r4, #25
 800d644:	e7f5      	b.n	800d632 <_printf_i+0x22e>
 800d646:	bf00      	nop
 800d648:	0800e3cd 	.word	0x0800e3cd
 800d64c:	0800e3de 	.word	0x0800e3de

0800d650 <_sbrk_r>:
 800d650:	b538      	push	{r3, r4, r5, lr}
 800d652:	4d06      	ldr	r5, [pc, #24]	; (800d66c <_sbrk_r+0x1c>)
 800d654:	2300      	movs	r3, #0
 800d656:	4604      	mov	r4, r0
 800d658:	4608      	mov	r0, r1
 800d65a:	602b      	str	r3, [r5, #0]
 800d65c:	f7f4 f812 	bl	8001684 <_sbrk>
 800d660:	1c43      	adds	r3, r0, #1
 800d662:	d102      	bne.n	800d66a <_sbrk_r+0x1a>
 800d664:	682b      	ldr	r3, [r5, #0]
 800d666:	b103      	cbz	r3, 800d66a <_sbrk_r+0x1a>
 800d668:	6023      	str	r3, [r4, #0]
 800d66a:	bd38      	pop	{r3, r4, r5, pc}
 800d66c:	200032d8 	.word	0x200032d8

0800d670 <__sread>:
 800d670:	b510      	push	{r4, lr}
 800d672:	460c      	mov	r4, r1
 800d674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d678:	f000 f8f2 	bl	800d860 <_read_r>
 800d67c:	2800      	cmp	r0, #0
 800d67e:	bfab      	itete	ge
 800d680:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d682:	89a3      	ldrhlt	r3, [r4, #12]
 800d684:	181b      	addge	r3, r3, r0
 800d686:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d68a:	bfac      	ite	ge
 800d68c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d68e:	81a3      	strhlt	r3, [r4, #12]
 800d690:	bd10      	pop	{r4, pc}

0800d692 <__swrite>:
 800d692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d696:	461f      	mov	r7, r3
 800d698:	898b      	ldrh	r3, [r1, #12]
 800d69a:	05db      	lsls	r3, r3, #23
 800d69c:	4605      	mov	r5, r0
 800d69e:	460c      	mov	r4, r1
 800d6a0:	4616      	mov	r6, r2
 800d6a2:	d505      	bpl.n	800d6b0 <__swrite+0x1e>
 800d6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6a8:	2302      	movs	r3, #2
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	f000 f870 	bl	800d790 <_lseek_r>
 800d6b0:	89a3      	ldrh	r3, [r4, #12]
 800d6b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d6ba:	81a3      	strh	r3, [r4, #12]
 800d6bc:	4632      	mov	r2, r6
 800d6be:	463b      	mov	r3, r7
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6c6:	f000 b817 	b.w	800d6f8 <_write_r>

0800d6ca <__sseek>:
 800d6ca:	b510      	push	{r4, lr}
 800d6cc:	460c      	mov	r4, r1
 800d6ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6d2:	f000 f85d 	bl	800d790 <_lseek_r>
 800d6d6:	1c43      	adds	r3, r0, #1
 800d6d8:	89a3      	ldrh	r3, [r4, #12]
 800d6da:	bf15      	itete	ne
 800d6dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d6de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d6e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d6e6:	81a3      	strheq	r3, [r4, #12]
 800d6e8:	bf18      	it	ne
 800d6ea:	81a3      	strhne	r3, [r4, #12]
 800d6ec:	bd10      	pop	{r4, pc}

0800d6ee <__sclose>:
 800d6ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6f2:	f000 b81b 	b.w	800d72c <_close_r>
	...

0800d6f8 <_write_r>:
 800d6f8:	b538      	push	{r3, r4, r5, lr}
 800d6fa:	4d07      	ldr	r5, [pc, #28]	; (800d718 <_write_r+0x20>)
 800d6fc:	4604      	mov	r4, r0
 800d6fe:	4608      	mov	r0, r1
 800d700:	4611      	mov	r1, r2
 800d702:	2200      	movs	r2, #0
 800d704:	602a      	str	r2, [r5, #0]
 800d706:	461a      	mov	r2, r3
 800d708:	f7f3 ff6b 	bl	80015e2 <_write>
 800d70c:	1c43      	adds	r3, r0, #1
 800d70e:	d102      	bne.n	800d716 <_write_r+0x1e>
 800d710:	682b      	ldr	r3, [r5, #0]
 800d712:	b103      	cbz	r3, 800d716 <_write_r+0x1e>
 800d714:	6023      	str	r3, [r4, #0]
 800d716:	bd38      	pop	{r3, r4, r5, pc}
 800d718:	200032d8 	.word	0x200032d8

0800d71c <abort>:
 800d71c:	b508      	push	{r3, lr}
 800d71e:	2006      	movs	r0, #6
 800d720:	f000 f8d8 	bl	800d8d4 <raise>
 800d724:	2001      	movs	r0, #1
 800d726:	f7f3 ff35 	bl	8001594 <_exit>
	...

0800d72c <_close_r>:
 800d72c:	b538      	push	{r3, r4, r5, lr}
 800d72e:	4d06      	ldr	r5, [pc, #24]	; (800d748 <_close_r+0x1c>)
 800d730:	2300      	movs	r3, #0
 800d732:	4604      	mov	r4, r0
 800d734:	4608      	mov	r0, r1
 800d736:	602b      	str	r3, [r5, #0]
 800d738:	f7f3 ff6f 	bl	800161a <_close>
 800d73c:	1c43      	adds	r3, r0, #1
 800d73e:	d102      	bne.n	800d746 <_close_r+0x1a>
 800d740:	682b      	ldr	r3, [r5, #0]
 800d742:	b103      	cbz	r3, 800d746 <_close_r+0x1a>
 800d744:	6023      	str	r3, [r4, #0]
 800d746:	bd38      	pop	{r3, r4, r5, pc}
 800d748:	200032d8 	.word	0x200032d8

0800d74c <_fstat_r>:
 800d74c:	b538      	push	{r3, r4, r5, lr}
 800d74e:	4d07      	ldr	r5, [pc, #28]	; (800d76c <_fstat_r+0x20>)
 800d750:	2300      	movs	r3, #0
 800d752:	4604      	mov	r4, r0
 800d754:	4608      	mov	r0, r1
 800d756:	4611      	mov	r1, r2
 800d758:	602b      	str	r3, [r5, #0]
 800d75a:	f7f3 ff6a 	bl	8001632 <_fstat>
 800d75e:	1c43      	adds	r3, r0, #1
 800d760:	d102      	bne.n	800d768 <_fstat_r+0x1c>
 800d762:	682b      	ldr	r3, [r5, #0]
 800d764:	b103      	cbz	r3, 800d768 <_fstat_r+0x1c>
 800d766:	6023      	str	r3, [r4, #0]
 800d768:	bd38      	pop	{r3, r4, r5, pc}
 800d76a:	bf00      	nop
 800d76c:	200032d8 	.word	0x200032d8

0800d770 <_isatty_r>:
 800d770:	b538      	push	{r3, r4, r5, lr}
 800d772:	4d06      	ldr	r5, [pc, #24]	; (800d78c <_isatty_r+0x1c>)
 800d774:	2300      	movs	r3, #0
 800d776:	4604      	mov	r4, r0
 800d778:	4608      	mov	r0, r1
 800d77a:	602b      	str	r3, [r5, #0]
 800d77c:	f7f3 ff69 	bl	8001652 <_isatty>
 800d780:	1c43      	adds	r3, r0, #1
 800d782:	d102      	bne.n	800d78a <_isatty_r+0x1a>
 800d784:	682b      	ldr	r3, [r5, #0]
 800d786:	b103      	cbz	r3, 800d78a <_isatty_r+0x1a>
 800d788:	6023      	str	r3, [r4, #0]
 800d78a:	bd38      	pop	{r3, r4, r5, pc}
 800d78c:	200032d8 	.word	0x200032d8

0800d790 <_lseek_r>:
 800d790:	b538      	push	{r3, r4, r5, lr}
 800d792:	4d07      	ldr	r5, [pc, #28]	; (800d7b0 <_lseek_r+0x20>)
 800d794:	4604      	mov	r4, r0
 800d796:	4608      	mov	r0, r1
 800d798:	4611      	mov	r1, r2
 800d79a:	2200      	movs	r2, #0
 800d79c:	602a      	str	r2, [r5, #0]
 800d79e:	461a      	mov	r2, r3
 800d7a0:	f7f3 ff62 	bl	8001668 <_lseek>
 800d7a4:	1c43      	adds	r3, r0, #1
 800d7a6:	d102      	bne.n	800d7ae <_lseek_r+0x1e>
 800d7a8:	682b      	ldr	r3, [r5, #0]
 800d7aa:	b103      	cbz	r3, 800d7ae <_lseek_r+0x1e>
 800d7ac:	6023      	str	r3, [r4, #0]
 800d7ae:	bd38      	pop	{r3, r4, r5, pc}
 800d7b0:	200032d8 	.word	0x200032d8

0800d7b4 <memmove>:
 800d7b4:	4288      	cmp	r0, r1
 800d7b6:	b510      	push	{r4, lr}
 800d7b8:	eb01 0402 	add.w	r4, r1, r2
 800d7bc:	d902      	bls.n	800d7c4 <memmove+0x10>
 800d7be:	4284      	cmp	r4, r0
 800d7c0:	4623      	mov	r3, r4
 800d7c2:	d807      	bhi.n	800d7d4 <memmove+0x20>
 800d7c4:	1e43      	subs	r3, r0, #1
 800d7c6:	42a1      	cmp	r1, r4
 800d7c8:	d008      	beq.n	800d7dc <memmove+0x28>
 800d7ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7d2:	e7f8      	b.n	800d7c6 <memmove+0x12>
 800d7d4:	4402      	add	r2, r0
 800d7d6:	4601      	mov	r1, r0
 800d7d8:	428a      	cmp	r2, r1
 800d7da:	d100      	bne.n	800d7de <memmove+0x2a>
 800d7dc:	bd10      	pop	{r4, pc}
 800d7de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7e6:	e7f7      	b.n	800d7d8 <memmove+0x24>

0800d7e8 <__malloc_lock>:
 800d7e8:	4801      	ldr	r0, [pc, #4]	; (800d7f0 <__malloc_lock+0x8>)
 800d7ea:	f7ff b997 	b.w	800cb1c <__retarget_lock_acquire_recursive>
 800d7ee:	bf00      	nop
 800d7f0:	200032cc 	.word	0x200032cc

0800d7f4 <__malloc_unlock>:
 800d7f4:	4801      	ldr	r0, [pc, #4]	; (800d7fc <__malloc_unlock+0x8>)
 800d7f6:	f7ff b992 	b.w	800cb1e <__retarget_lock_release_recursive>
 800d7fa:	bf00      	nop
 800d7fc:	200032cc 	.word	0x200032cc

0800d800 <_realloc_r>:
 800d800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d804:	4680      	mov	r8, r0
 800d806:	4614      	mov	r4, r2
 800d808:	460e      	mov	r6, r1
 800d80a:	b921      	cbnz	r1, 800d816 <_realloc_r+0x16>
 800d80c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d810:	4611      	mov	r1, r2
 800d812:	f7ff ba5f 	b.w	800ccd4 <_malloc_r>
 800d816:	b92a      	cbnz	r2, 800d824 <_realloc_r+0x24>
 800d818:	f7ff f9f0 	bl	800cbfc <_free_r>
 800d81c:	4625      	mov	r5, r4
 800d81e:	4628      	mov	r0, r5
 800d820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d824:	f000 f872 	bl	800d90c <_malloc_usable_size_r>
 800d828:	4284      	cmp	r4, r0
 800d82a:	4607      	mov	r7, r0
 800d82c:	d802      	bhi.n	800d834 <_realloc_r+0x34>
 800d82e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d832:	d812      	bhi.n	800d85a <_realloc_r+0x5a>
 800d834:	4621      	mov	r1, r4
 800d836:	4640      	mov	r0, r8
 800d838:	f7ff fa4c 	bl	800ccd4 <_malloc_r>
 800d83c:	4605      	mov	r5, r0
 800d83e:	2800      	cmp	r0, #0
 800d840:	d0ed      	beq.n	800d81e <_realloc_r+0x1e>
 800d842:	42bc      	cmp	r4, r7
 800d844:	4622      	mov	r2, r4
 800d846:	4631      	mov	r1, r6
 800d848:	bf28      	it	cs
 800d84a:	463a      	movcs	r2, r7
 800d84c:	f7fe fd60 	bl	800c310 <memcpy>
 800d850:	4631      	mov	r1, r6
 800d852:	4640      	mov	r0, r8
 800d854:	f7ff f9d2 	bl	800cbfc <_free_r>
 800d858:	e7e1      	b.n	800d81e <_realloc_r+0x1e>
 800d85a:	4635      	mov	r5, r6
 800d85c:	e7df      	b.n	800d81e <_realloc_r+0x1e>
	...

0800d860 <_read_r>:
 800d860:	b538      	push	{r3, r4, r5, lr}
 800d862:	4d07      	ldr	r5, [pc, #28]	; (800d880 <_read_r+0x20>)
 800d864:	4604      	mov	r4, r0
 800d866:	4608      	mov	r0, r1
 800d868:	4611      	mov	r1, r2
 800d86a:	2200      	movs	r2, #0
 800d86c:	602a      	str	r2, [r5, #0]
 800d86e:	461a      	mov	r2, r3
 800d870:	f7f3 fe9a 	bl	80015a8 <_read>
 800d874:	1c43      	adds	r3, r0, #1
 800d876:	d102      	bne.n	800d87e <_read_r+0x1e>
 800d878:	682b      	ldr	r3, [r5, #0]
 800d87a:	b103      	cbz	r3, 800d87e <_read_r+0x1e>
 800d87c:	6023      	str	r3, [r4, #0]
 800d87e:	bd38      	pop	{r3, r4, r5, pc}
 800d880:	200032d8 	.word	0x200032d8

0800d884 <_raise_r>:
 800d884:	291f      	cmp	r1, #31
 800d886:	b538      	push	{r3, r4, r5, lr}
 800d888:	4604      	mov	r4, r0
 800d88a:	460d      	mov	r5, r1
 800d88c:	d904      	bls.n	800d898 <_raise_r+0x14>
 800d88e:	2316      	movs	r3, #22
 800d890:	6003      	str	r3, [r0, #0]
 800d892:	f04f 30ff 	mov.w	r0, #4294967295
 800d896:	bd38      	pop	{r3, r4, r5, pc}
 800d898:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d89a:	b112      	cbz	r2, 800d8a2 <_raise_r+0x1e>
 800d89c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d8a0:	b94b      	cbnz	r3, 800d8b6 <_raise_r+0x32>
 800d8a2:	4620      	mov	r0, r4
 800d8a4:	f000 f830 	bl	800d908 <_getpid_r>
 800d8a8:	462a      	mov	r2, r5
 800d8aa:	4601      	mov	r1, r0
 800d8ac:	4620      	mov	r0, r4
 800d8ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8b2:	f000 b817 	b.w	800d8e4 <_kill_r>
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	d00a      	beq.n	800d8d0 <_raise_r+0x4c>
 800d8ba:	1c59      	adds	r1, r3, #1
 800d8bc:	d103      	bne.n	800d8c6 <_raise_r+0x42>
 800d8be:	2316      	movs	r3, #22
 800d8c0:	6003      	str	r3, [r0, #0]
 800d8c2:	2001      	movs	r0, #1
 800d8c4:	e7e7      	b.n	800d896 <_raise_r+0x12>
 800d8c6:	2400      	movs	r4, #0
 800d8c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d8cc:	4628      	mov	r0, r5
 800d8ce:	4798      	blx	r3
 800d8d0:	2000      	movs	r0, #0
 800d8d2:	e7e0      	b.n	800d896 <_raise_r+0x12>

0800d8d4 <raise>:
 800d8d4:	4b02      	ldr	r3, [pc, #8]	; (800d8e0 <raise+0xc>)
 800d8d6:	4601      	mov	r1, r0
 800d8d8:	6818      	ldr	r0, [r3, #0]
 800d8da:	f7ff bfd3 	b.w	800d884 <_raise_r>
 800d8de:	bf00      	nop
 800d8e0:	20000010 	.word	0x20000010

0800d8e4 <_kill_r>:
 800d8e4:	b538      	push	{r3, r4, r5, lr}
 800d8e6:	4d07      	ldr	r5, [pc, #28]	; (800d904 <_kill_r+0x20>)
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	4608      	mov	r0, r1
 800d8ee:	4611      	mov	r1, r2
 800d8f0:	602b      	str	r3, [r5, #0]
 800d8f2:	f7f3 fe3f 	bl	8001574 <_kill>
 800d8f6:	1c43      	adds	r3, r0, #1
 800d8f8:	d102      	bne.n	800d900 <_kill_r+0x1c>
 800d8fa:	682b      	ldr	r3, [r5, #0]
 800d8fc:	b103      	cbz	r3, 800d900 <_kill_r+0x1c>
 800d8fe:	6023      	str	r3, [r4, #0]
 800d900:	bd38      	pop	{r3, r4, r5, pc}
 800d902:	bf00      	nop
 800d904:	200032d8 	.word	0x200032d8

0800d908 <_getpid_r>:
 800d908:	f7f3 be2c 	b.w	8001564 <_getpid>

0800d90c <_malloc_usable_size_r>:
 800d90c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d910:	1f18      	subs	r0, r3, #4
 800d912:	2b00      	cmp	r3, #0
 800d914:	bfbc      	itt	lt
 800d916:	580b      	ldrlt	r3, [r1, r0]
 800d918:	18c0      	addlt	r0, r0, r3
 800d91a:	4770      	bx	lr

0800d91c <_init>:
 800d91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d91e:	bf00      	nop
 800d920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d922:	bc08      	pop	{r3}
 800d924:	469e      	mov	lr, r3
 800d926:	4770      	bx	lr

0800d928 <_fini>:
 800d928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d92a:	bf00      	nop
 800d92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d92e:	bc08      	pop	{r3}
 800d930:	469e      	mov	lr, r3
 800d932:	4770      	bx	lr
